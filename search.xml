<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Runtime实现自定义description打印中文</title>
      <link href="/2024/08/21/Runtime%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89description%E6%89%93%E5%8D%B0%E4%B8%AD%E6%96%87/"/>
      <url>/2024/08/21/Runtime%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89description%E6%89%93%E5%8D%B0%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>实现原理简介：首先通过runtiime获取对象属性，然后取值进行自定义拼接，通过runtime方法交换自定义description方法，通过Unicode解码打印中文。只在Debug状态下进行方法交换</p><p>在接触runtime前，团队开发时为便于调试，常常需要在model里进行description重写，手工重写十分的繁琐不便。而通过runtime方法交换可以无需一行代码即可自定义description，十分方便。另外，从服务器请求下来的json数据包含中文，控制无法直接显示中文，通过重写<br>DescriptionWithLocale方法Uinicode转码后可以方便查看中文，方便开发调试。</p><p>需导入<code>#import &lt;objc/runtime.h&gt;</code></p><ol><li>description—-当通过NSLog函数打印一个对象时，其输出结果就是该对象的description方法的返回值</li><li>debugDescription—当在LLDB中，通过诸如po命令打印一个对象时，其输出结果就是该对象的debugDescription方法的返回值。</li><li>debugDescription—默认实现就是直接返回description方法的返回值。</li></ol><p>代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;NSObject+AutoDescription.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;NSObject+Propertys.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1.description----当通过NSLog函数打印一个对象时，其输出结果就是该对象的description方法的返回值</span></span><br><span class="line"><span class="comment"> 2.debugDescription---当在LLDB中，通过诸如po命令打印一个对象时，其输出结果就是该对象的debugDescription方法的返回值。</span></span><br><span class="line"><span class="comment"> 3.debugDescription---默认实现就是直接返回description方法的返回值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">AutoDescription</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  C 方法交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">void</span>  SwizzleMethods_AutoDes(Class cls, SEL originalSel, SEL newSel)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取实例方法</span></span><br><span class="line">    Method originalMethod = class_getInstanceMethod(cls, originalSel);</span><br><span class="line">    Method newMethod = class_getInstanceMethod(cls, newSel);</span><br><span class="line">    <span class="comment">//改变两个方法的具体指针指向</span></span><br><span class="line">    method_exchangeImplementations(originalMethod, newMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// DEBUG输出</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">+ (<span class="type">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        SwizzleMethods_AutoDes([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(description), <span class="keyword">@selector</span>(autoDescription));</span><br><span class="line"><span class="comment">//        method_exchangeImplementations(class_getInstanceMethod([NSObject class], @selector(description)), class_getInstanceMethod([NSObject class], @selector(autoDescription)));</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)autoDescription</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> isKindOfClass:[<span class="built_in">NSObject</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调试状态</span></span><br><span class="line">    <span class="built_in">NSArray</span> * allProperties = [<span class="keyword">self</span>  getAllProperties];</span><br><span class="line">    <span class="built_in">NSString</span> * print_str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;❗%@\n&quot;</span>,[<span class="keyword">self</span> <span class="keyword">class</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> * propertyName <span class="keyword">in</span> allProperties) &#123;</span><br><span class="line">        <span class="type">id</span> value = [<span class="keyword">self</span> valueForKey:propertyName]?:<span class="string">@&quot;nil&quot;</span>;<span class="comment">//默认值为nil字符串</span></span><br><span class="line">        <span class="keyword">if</span> (![value isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="keyword">return</span> print_str;</span><br><span class="line">        &#125;</span><br><span class="line">        print_str = [print_str stringByAppendingFormat:<span class="string">@&quot;\t└%@:%@\n&quot;</span>,propertyName,value];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> print_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Uicode转码方法<br>参考 <a href="http://stackoverflow.com/questions/2099349/using-objectivec-cocoa-to-unescape-unicode-characters-ie-u1234/">StackFlow</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSString</span> *)stringByReplaceUnicode:(<span class="built_in">NSString</span> *)string</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *convertedString = [string mutableCopy];</span><br><span class="line">    [convertedString replaceOccurrencesOfString:<span class="string">@&quot;\\U&quot;</span> withString:<span class="string">@&quot;\\u&quot;</span> options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, convertedString.length)];</span><br><span class="line">    <span class="built_in">CFStringRef</span> transform = <span class="built_in">CFSTR</span>(<span class="string">&quot;Any-Hex/Java&quot;</span>);</span><br><span class="line">    <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)convertedString, <span class="literal">NULL</span>, transform, <span class="literal">YES</span>);</span><br><span class="line">    <span class="keyword">return</span> convertedString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>字典NSDictionary，数组NSArray Description</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark--- NSDictionary Description</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG</span></span><br><span class="line"><span class="comment">//直接打印中文乱码问题</span></span><br><span class="line"><span class="comment">//http://objccn.io/issue-9-1/</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDictionary</span> (<span class="title">AutoDescription</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    SwizzleMethods_AutoDes([<span class="built_in">NSDictionary</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(descriptionWithLocale:), <span class="keyword">@selector</span>(autoDescriptionWithLocale:));</span><br><span class="line">    SwizzleMethods_AutoDes([<span class="built_in">NSDictionary</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(descriptionWithLocale:indent:), <span class="keyword">@selector</span>(autoDescriptionWithLocale:indent:));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)autoDescriptionWithLocale:(<span class="type">id</span>)locale</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *description=[<span class="keyword">self</span> autoDescriptionWithLocale:locale];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSObject</span> stringByReplaceUnicode:description];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)autoDescriptionWithLocale:(<span class="type">id</span>)locale indent:(<span class="built_in">NSUInteger</span>)level</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *description=[<span class="keyword">self</span> autoDescriptionWithLocale:locale indent:level];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSObject</span> stringByReplaceUnicode:description];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark--- NSArray Description</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">AutoDescription</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    SwizzleMethods_AutoDes([<span class="built_in">NSArray</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(descriptionWithLocale:), <span class="keyword">@selector</span>(autoDescriptionWithLocale:));</span><br><span class="line">    SwizzleMethods_AutoDes([<span class="built_in">NSArray</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(descriptionWithLocale:indent:), <span class="keyword">@selector</span>(autoDescriptionWithLocale:indent:));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)autoDescriptionWithLocale:(<span class="type">id</span>)locale</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *description=[<span class="keyword">self</span> autoDescriptionWithLocale:locale];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSObject</span> stringByReplaceUnicode:description];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)autoDescriptionWithLocale:(<span class="type">id</span>)locale indent:(<span class="built_in">NSUInteger</span>)level</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *description=[<span class="keyword">self</span> autoDescriptionWithLocale:locale indent:level];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSObject</span> stringByReplaceUnicode:description];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 新建,模板,小书匠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tauri+Vue开发桌面应用</title>
      <link href="/2022/07/13/Tauri-Vue%E5%BC%80%E5%8F%91%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
      <url>/2022/07/13/Tauri-Vue%E5%BC%80%E5%8F%91%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>一、安装Rust开发环境</p><p><a href="https://www.rust-lang.org/zh-CN/learn/get-started">https://www.rust-lang.org/zh-CN/learn/get-started</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line">$ rust --version</span><br><span class="line">$ rustup update stable</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm create tauri-app</span><br><span class="line"></span><br><span class="line">Press any key to <span class="built_in">continue</span>...</span><br><span class="line">? What is your app name? AutoTask</span><br><span class="line">? What should the window title be? 自动任务</span><br><span class="line">? What UI recipe would you like to add? create-vite (vanilla, vue, react, svelte, preact, lit) </span><br><span class="line">(https://vitejs.dev/guide/#scaffolding-your-first-vite-project)</span><br><span class="line">? Add <span class="string">&quot;@tauri-apps/api&quot;</span> npm package? Yes</span><br><span class="line">? Which vite template would you like to use? vue</span><br></pre></td></tr></table></figure><p>调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd AutoTask</span><br><span class="line">$ npm run tauri dev #调试</span><br><span class="line">$ npm run tauri build #打包</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://element-plus.gitee.io/zh-CN/guide/installation.html">https://element-plus.gitee.io/zh-CN/guide/installation.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install element-plus --save</span><br></pre></td></tr></table></figure><h2 id="Python3脚本调用"><a href="#Python3脚本调用" class="headerlink" title="Python3脚本调用"></a>Python3脚本调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">let _ = std::process::Command::new(<span class="string">&quot;python3&quot;</span>)</span><br><span class="line">.current_dir(path)</span><br><span class="line">.args(&amp;[<span class="string">&quot;-m&quot;</span>, <span class="string">&quot;http.server&quot;</span>, <span class="string">&quot;8000&quot;</span>])</span><br><span class="line">.output().unwrap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Command::new(<span class="string">&quot;python3.6&quot;</span>)</span><br><span class="line">        .arg(os)</span><br><span class="line">        .args(&amp;[</span><br><span class="line">            <span class="string">&quot;--layers&quot;</span>,</span><br><span class="line">            &amp;<span class="built_in">format</span>!(<span class="string">&quot;&#123;&#125;&quot;</span>, layers),</span><br><span class="line">            <span class="string">&quot;--width&quot;</span>,</span><br><span class="line">            &amp;<span class="built_in">format</span>!(<span class="string">&quot;&#123;&#125;&quot;</span>, width),</span><br><span class="line">            <span class="string">&quot;--threshold&quot;</span>,</span><br><span class="line">            &amp;<span class="built_in">format</span>!(<span class="string">&quot;&#123;&#125;&quot;</span>, threshold),</span><br><span class="line">        ])</span><br><span class="line">        .arg(<span class="string">&quot;--index&quot;</span>)</span><br><span class="line">        .arg(file_name.path())</span><br><span class="line">        .stdout(Stdio::inherit())</span><br><span class="line">        .stderr(Stdio::inherit())</span><br><span class="line">        .output()</span><br><span class="line">        .expect(<span class="string">&quot;Failed to execute Python script&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> let base_dir = env::var(<span class="string">&quot;PWD&quot;</span>).unwrap_or(current_dir);</span><br><span class="line"></span><br><span class="line">        let command_args = [&amp;<span class="built_in">format</span>!(<span class="string">&quot;&#123;&#125;/e2e/run.py&quot;</span>, base_dir), <span class="string">&quot;-c&quot;</span>, config_path];</span><br><span class="line"></span><br><span class="line">        let output = Command::new(<span class="string">&quot;python3&quot;</span>)</span><br><span class="line">            .args(&amp;command_args)</span><br><span class="line">            .current_dir(base_dir)</span><br><span class="line">            .stdout(Stdio::inherit())</span><br><span class="line">            .stderr(Stdio::inherit())</span><br><span class="line">            .output()?;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> output.status.success() &#123;</span><br><span class="line">            Ok(())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Err(Error::generic(eyre!(</span><br><span class="line">                <span class="string">&quot;Python E2E test exited with error code &#123;:?&#125;&quot;</span>,</span><br><span class="line">                output.status.code(),</span><br><span class="line">            )))</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/novifinancial/serde-reflection/blob/2ea672f8795a8d1b5c2825662ecf477cf302e023/serde-generate/tests/python_generation.rs">https://github.com/novifinancial/serde-reflection/blob/2ea672f8795a8d1b5c2825662ecf477cf302e023/serde-generate/tests/python_generation.rs</a></p><p>API文档：<a href="https://tauri.app/v1/api/js/modules/app">https://tauri.app/v1/api/js/modules/app</a></p><p><a href="https://github.com/kenethrrizzo/learning-rust/search?q=show_city">https://github.com/kenethrrizzo/learning-rust/search?q=show_city</a></p><p><a href="https://github.com/datayang/tauri_demo">https://github.com/datayang/tauri_demo</a></p><p><a href="https://github.com/8mamo10">https://github.com/8mamo10</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用网站</title>
      <link href="/2022/07/13/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
      <url>/2022/07/13/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="前端资源"><a href="#前端资源" class="headerlink" title="前端资源"></a>前端资源</h2><ul><li><p><a href="https://bestofjs.org/"><strong>bestofjs</strong></a> bestofjs整合了最优秀的的js, html和css项目资源。 JavaScript 流行项目总结，基于 GitHub 数据的流量农场</p></li><li><p><a href="https://risingstars.js.org/">https://risingstars.js.org/</a></p></li><li><p>npmjsNode.js包搜索工具</p></li><li><p><strong>npms.io 一个更好的Node.js包搜索工具</strong></p><p>相比于npmjs官方的搜索，npms.io提供量化的数据，表明了一个包的质量，流行度以及维护性。并给出一个包的整体分数。</p></li></ul><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p><a href="https://npmtrends.com/">https://npmtrends.com/</a></p><p><a href="https://www.libhunt.com/">https://www.libhunt.com/</a></p><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><p><a href="https://www.libhunt.com/">https://www.libhunt.com/</a></p><h2 id="Python资源"><a href="#Python资源" class="headerlink" title="Python资源"></a>Python资源</h2><p><a href="https://python.libhunt.com/">libhunt</a></p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ul><li><p><a href="http://githubrank.com/"><strong>http://githubrank.com/</strong></a> github 按照 followers 排名</p></li><li><p><a href="https://wangchujiang.com/github-rank/"><strong>github-rank</strong></a>同上，githubrank 基本算挂了已经，只能用这个新的</p></li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li><a href="https://maliquankai.com/designnav/"><strong>产品&#x2F;设计师&#x2F;独立开发者的资源库</strong></a> 很全很强大</li></ul><h2 id="开发者导航网站"><a href="#开发者导航网站" class="headerlink" title="开发者导航网站"></a>开发者导航网站</h2><p><a href="https://oio.dev/">https://oio.dev/</a></p><p><a href="https://www.zdzn.net/">https://www.zdzn.net/</a></p><p><a href="https://www.bxdhz.com/coder/">https://www.bxdhz.com/coder/</a></p><p><a href="https://www.githubs.cn/collections">GitHub中文社区</a></p><h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><p><a href="https://www.extfans.com/">https://www.extfans.com/</a></p><p><a href="https://huajiakeji.com/top/">https://huajiakeji.com/top/</a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://link.juejin.cn/?target=https://prettier.io/playground/">Prettier Playground: 任意语言代码格式化</a>**</li></ul><p>参考：<a href="https://github.com/PanJiaChen/awesome-bookmarks">https://github.com/PanJiaChen/awesome-bookmarks</a></p><p><a href="https://zqianduan.com/">https://zqianduan.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac定时任务实现自动化Git提交</title>
      <link href="/2022/07/12/Mac%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96Git%E6%8F%90%E4%BA%A4/"/>
      <url>/2022/07/12/Mac%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96Git%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="OSX系统添加定时任务"><a href="#OSX系统添加定时任务" class="headerlink" title="OSX系统添加定时任务"></a>OSX系统添加定时任务</h2><p>Mac 有两种方式可以添加定时任务：</p><p>1、launchctl 定时任务(推荐)</p><p>2、crontab命令</p><p>由于crontab可能会遇到用户交互权限问题导致execution error， crontab 来配置定时任务很容易出错。在 Mac 中，配置定时任务有更好的选择。plist对于MAC上系统交互的操作更支持，plist可以设置到秒，而crontab只能到分钟等原因，故选择使用plist方式实现。</p><h3 id="2-编写plist文件"><a href="#2-编写plist文件" class="headerlink" title="2. 编写plist文件"></a>2. 编写plist文件</h3><p>launchctl 将根据plist文件的信息来启动任务。<br>plist脚本一般存放在以下目录：</p><ul><li><code>/Library/LaunchDaemons</code> –&gt;只要系统启动了，哪怕用户不登陆系统也会被执行</li><li><code>/Library/LaunchAgents</code> –&gt;当用户登陆系统后才会被执行</li></ul><p>更多的plist存放目录：</p><blockquote><p>~&#x2F;Library&#x2F;LaunchAgents 由用户自己定义的任务项<br>&#x2F;Library&#x2F;LaunchAgents 由管理员为用户定义的任务项<br>&#x2F;Library&#x2F;LaunchDaemons 由管理员定义的守护进程任务项<br>&#x2F;System&#x2F;Library&#x2F;LaunchAgents 由Mac OS X为用户定义的任务项<br>&#x2F;System&#x2F;Library&#x2F;LaunchDaemons 由Mac OS X定义的守护进程任务项</p></blockquote><p>我们随便点看查看一些其中的任务配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple Computer//DTD PLIST 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>org.getlantern<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Applications/Lantern.app/Contents/MacOS/lantern<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>-startup<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解读：</p><p><code>Label</code> 对应的 <code>org.getlantern</code> 表示任务名称，必须唯一。<br> <code>ProgramArguments</code> 表示程序参数，数组的形式，第一个为 需要执行的程序或者脚本等，这里的 <code>/Applications/Lantern.app/Contents/MacOS/lantern</code> 和 <code>-startup</code> 意味着打开程序 <code>lantern</code> 。<br> <code>RunAtLoad</code> 是个布尔值，表示开启自启项。</p><p>因此，该任务配置表示：设置 lantern 应用为开机自起项。</p><p>进入<code>~/Library/LaunchAgents</code>，创建一个plist文件<code>com.github.autocommit.plist</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>com.autotask.default<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/demo/run.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>45<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>11<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-加载命令"><a href="#3-加载命令" class="headerlink" title="3. 加载命令"></a>3. 加载命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load -w com.autotask.default.plist</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 加载任务</span><br><span class="line">$ launchctl load -w com.autotask.default.plist</span><br><span class="line"></span><br><span class="line">// 删除任务</span><br><span class="line">$ launchctl unload com.autotask.default.plist</span><br><span class="line"></span><br><span class="line">// 查看任务列表, 使用 grep <span class="string">&#x27;任务部分名字&#x27;</span> 过滤</span><br><span class="line">$ launchctl list | grep <span class="string">&#x27;com.autotask.default&#x27;</span></span><br><span class="line"></span><br><span class="line">// 开始</span><br><span class="line">$ launchctl start com.autotask.default.plist</span><br><span class="line"></span><br><span class="line">// 停止-停止任务。如果将任务已经是运行状态，则作业可能会立即重新启动。</span><br><span class="line">$ launchctl stop com.autotask.default.plist</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">launchctl remove：从launchd中异步删除任务，在返回之前它不会等待作业实际停止，因此不会对任何错误做处理</span><br><span class="line">launchctl unload：停止并卸载任务，但该任务仍将在下次登录/重新启动时重新启动</span><br><span class="line">launchctl unload -w &lt;路径&gt;：停止并卸载和禁用任务。该任务将不会在下次登录/重新启动时重新启动。</span><br><span class="line"></span><br><span class="line">其他几个相关命令</span><br><span class="line"></span><br><span class="line">launchctl stop：停止任务。如果将任务已经是运行状态，则作业可能会立即重新启动。</span><br><span class="line">launchctl load &lt;路径&gt;：只要未“禁用”该任务，就加载并启动任务。</span><br><span class="line">launchctl load -w &lt;路径&gt;：加载并启动任务，同时还将任务标记为“未禁用”。任务将在下次登录/重新启动时重新启动。</span><br></pre></td></tr></table></figure><p><a href="http://www.wu.run/2019/03/27/mac-launchctl-guidance/">http://www.wu.run/2019/03/27/mac-launchctl-guidance/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 名称，要全局唯一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.uniflor.notifier<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 要运行的程序， 如果省略这个选项，会把ProgramArguments的第一个</span></span><br><span class="line"><span class="comment">    元素作为要运行的程序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Program<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/uniflor/script.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 命令， 第一个为命令，其它为参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/uniflor/script.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 运行时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>30<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>9<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>Day<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>5<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 0和7都指星期天 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>Weekday<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>0<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 运行间隔，与StartCalenderInterval使用其一，单位为秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">integer</span>&gt;</span>30<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准输入文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardInPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/uniflor/run-in.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准输出文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/uniflor/Bin/run-out.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准错误输出文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/uniflor/Bin/run-err.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>1、Label：对应的需要保证全局唯一性；<br> 2、Program：要运行的程序；<br> 3、ProgramArguments：命令语句<br> 4、StartCalendarInterval：运行的时间，单个时间点使用dict，多个时间点使用 array <dict><br> 5、StartInterval：时间间隔，与StartCalendarInterval使用其一，单位为秒，设置执行的时间间隔，单位为秒</p></blockquote><p>多个时间任务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>Weekday<span class="tag">&lt;/<span class="name">key</span>&gt;</span>  <span class="comment">&lt;!-- 周几 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span>     <span class="comment">&lt;!-- 小时 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">integer</span>&gt;</span>8<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span>   <span class="comment">&lt;!-- 分钟 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">string</span>&gt;</span>58<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>Weekday<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">integer</span>&gt;</span>2<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">integer</span>&gt;</span>8<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">string</span>&gt;</span>52<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个表示每个小时的0分钟会执行此任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integer</span>&gt;</span>0<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在每天的3:55会执行此任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integer</span>&gt;</span>3<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integer</span>&gt;</span>55<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在每六的3:15会执行此任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integer</span>&gt;</span>3<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integer</span>&gt;</span>15<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Weekday<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integer</span>&gt;</span>6<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、验证脚本的正确性</p><p>你可以将执行时间设置为较近的时间，也可以使用下面语句直接执行一次脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始</span></span><br><span class="line">$ launchctl start com.test.task.plist</span><br></pre></td></tr></table></figure><p>WorkingDirectory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmdStr: `$&#123;publicDirPath&#125;/Autotask.py --bunldeid $&#123;Bunlde_ID&#125; --startinterval $&#123;StartInterval&#125; --scriptpath $&#123;this.Script_Path&#125;`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://imchenway.com/2021/02/24/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/">https://imchenway.com/2021/02/24/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">总结一下</span><br><span class="line">虽然plist的设置会复杂很多。但是当前在mac os还是倾向于推荐使用Plist的方法，crontab已不推荐使用。</span><br><span class="line">两者的区别：</span><br><span class="line">1、plist可以设置到秒，而crontab只能到分钟。</span><br><span class="line">2、plist可以同时应用于Mac OS/Iphone。</span><br><span class="line">3、plist对于MAC上系统交互的操作更支持(我就出现过用crontab设置，运行时出现execution error: 不允许用户交互。 (-1713)的错误)</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Python脚本不执行原因</p><p>1、无权限 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 777 task.py</span><br></pre></td></tr></table></figure><p>2、正常编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在上述的例子中，python脚本文件最开始的部分有两行说明：</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env python// 声明编译环境，即指定编译器</span><br><span class="line"># -*- coding:utf-8 -*-// 编码问题</span><br></pre></td></tr></table></figure><p>3、含有第三方库（如:import click）</p><p>4、plist文件中的路径以及脚本中的路径都必须是绝对路径</p><p>5、验证脚本的正确性</p><p>你可以将执行时间设置为较近的时间，也可以使用下面语句直接执行一次脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 开始</span><br><span class="line">$ launchctl start com.test.task.plist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/07/08/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2022/07/08/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>测试使用</p><p><a href="https://github.com/D0n9X1n/hexo-blog-encrypt">https://github.com/D0n9X1n/hexo-blog-encrypt</a></p><h3 id="1、测试加密"><a href="#1、测试加密" class="headerlink" title="1、测试加密"></a>1、测试加密</h3><p><a href="https://blog.csdn.net/weixin_58068682/article/details/116614622">https://blog.csdn.net/weixin_58068682/article/details/116614622</a></p><p>测试自动化部署</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>理财知识</title>
      <link href="/2020/07/11/%E7%90%86%E8%B4%A2%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/07/11/%E7%90%86%E8%B4%A2%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="盈亏同源"><a href="#盈亏同源" class="headerlink" title="盈亏同源"></a>盈亏同源</h3><p>链接：<a href="https://www.zhihu.com/question/31905060/answer/53819072">https://www.zhihu.com/question/31905060/answer/53819072</a><br>来源：知乎</p><p>请阅读《<a href="https://www.zhihu.com/search?q=%E8%B5%B0%E5%87%BA%E5%B9%BB%E8%A7%89%EF%BC%8C%E8%B5%B0%E5%90%91%E6%88%90%E7%86%9F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">走出幻觉，走向成熟</a>》。</p><p>-——————-</p><p>2016.1.13更新</p><p>题主说的这个方面，就是过滤的问题，是<a href="https://www.zhihu.com/search?q=%E7%9B%88%E4%BA%8F%E5%90%8C%E6%BA%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">盈亏同源</a>的一个体现，一个方面。</p><p>我是这样想的。盈亏同源，这个源，源头，是什么？</p><p>是<a href="https://www.zhihu.com/search?q=%E6%B3%A2%E5%8A%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">波动</a>。</p><p>波动的本质是什么？是不确定性。</p><p>盈利和亏损都是从不确定中来的。</p><p>不确定性意味着什么呢？</p><p>从不利的方面说，他意味着风险——亏损的可能性。</p><p>从有利的方面说，他意味着机会——获利的可能性。</p><p>不确定性，就是可能性。</p><p>我们喜欢<a href="https://www.zhihu.com/search?q=%E7%A1%AE%E5%AE%9A%E6%80%A7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">确定性</a>，而且是对我们有利的的确定性，能带来保障，能给我们安全感。</p><p>但是，不确定性（可能性）才是最好的。因为，我们还有改变的权利。</p><p>如果这个世界已经没有可能性，我们没有改变的权力，注定要如何如何，那活着真是太没意思了，为什么要拼搏呢？为什么要尝试新事物呢？一切<a href="https://www.zhihu.com/search?q=%E5%8F%98%E9%9D%A9&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">变革</a>都不会发生，一切困难和挫折都无法解决，我们只有忍受，没有转机，没有解脱的希望。</p><p>但幸运的是，事情不是这样的。我们会亏损，但是我可以止损。我们会获利，而且我们可以放任它肆虐。通过在一些关键的环节、枢纽、操作杆上，下功夫，施加影响，我们可以改变最终的结果。这样，游戏才有趣，不是吗？</p><p>从这种角度理解，盈亏都是表象，就好像蒸汽和结冰，都是表象，内里本质是水。我们处理掉的不是盈亏，而是<a href="https://www.zhihu.com/search?q=%E6%B3%A2%E5%8A%A8%E6%80%A7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">波动性</a>的不同表现形式。而且我们理解，波动性不可怕，不确定也不可怕，可怕的是我们让它失控。</p><p>所以最大的风险不是来自<a href="https://www.zhihu.com/search?q=%E5%B8%82%E5%9C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:53819072%7D">市场</a>，不是来自波动，不是来自行情的不确定性，而是来自我们自己。</p><p>控制住自己，就控制住了“自己的”市场。</p><h1 id="投资是普通人摆脱阶层固化的唯一靠谱方式"><a href="#投资是普通人摆脱阶层固化的唯一靠谱方式" class="headerlink" title="投资是普通人摆脱阶层固化的唯一靠谱方式"></a>投资是普通人摆脱阶层固化的唯一靠谱方式</h1><p>投资，是我能找到的唯一一个普通人可以跨越阶层的通路。而定投则是唯一一种所有普通人都有机会做、并且都有能力做好的投资方式。</p><blockquote><p>所谓的定投，就是针对某个投资标的在很长的时间内定期投资一定的金额。</p></blockquote><p>事实上，阶层固化在任何时代、任何国家都或多或少存在，轻重程度不一而已 —— 根本就没任何必要大惊小怪。</p><p>现在的问题是，打拼和汗水，是摆脱阶层固化的靠谱手段吗？这个问题的答案是很令人绝望的：不是。从能否摆脱阶层固化这个角度来看，打拼和汗水真的非常不靠谱。这不是我一个人独自的看法。被认为是二十世纪最有影响力的经济学家之一的富兰克·奈特（Frank H Knight）有个著名的观点：</p><blockquote><p>“决定一个人富有的三个条件，一是出身，二是运气，三是努力；</p><p>—— 而这三者之中，努力是最微不足道的。”</p></blockquote><p>当然，这并不是说努力就不重要了，因为相对成功可以靠努力，巨大成功只能靠运气 —— 谁都知道运气是普通人无法左右的；而出身（或者联姻）么 —— 更不是普通人可以仰仗的因素。</p><p>有一组数据可以帮助我们理解为什么努力那么微不足道。如果按照我们每个人的平均寿命为 78 年计算的话，</p><blockquote><p>睡觉时间加起来大概是 28.3 年；<br>工作占据了我们人生的 10.5 年；<br>花在各种各样社交媒体上的时间有 9 年；<br>花在做家务的时间有 6 年；<br>花在吃喝上的时间有 4 年；<br>花在真正接受教育的时间真的不长，只有 3.5 年；<br>花在化妆打扮上的时间有 3 年；<br>花在购物上的时间有 2.5 年；<br>花在照顾小孩的时间有 1.5 年；<br>花在路上的时间有 1.3 年；</p><p>……</p></blockquote><p>如此计算下来，剩下的，可供你自由支配的时间只剩下了 9 年…… 仅仅 9 年！</p><p>什么叫拼？如果别人一天工作 8 小时，你一天工作 10 小时，你的确比别人拼；但事实上，你只不过是比别人多拼了 2 小时而已 —— 也就是说，只有在那 2 小时里，你真的在拼 —— 因为其它的 8 小时里，你跟别人没有什么不同……</p><p>什么叫真拼？就是所有人其实都只有 9 年可自由支配的时间，你却把那 9 年时间全部用来去拼…… 可是，就算全部用来去拼，加起来也不过是 9 年时间…… 上面的数据中，还没有扣除掉你可能生病的时间、你可能情绪低落的时间，也没有考虑到各种各样稀奇古怪的意外事件毫无例外地注定会发生！</p><p>这就是为什么打拼、汗水或努力实际上根本无法让你摆脱阶层固化的根本原因 —— 在哪个国家都一样，在哪个时代都一样。</p><p>为什么投资可以？<strong>投资的本质就是用你的钱去帮你赚钱 —— 而钱这个东西，它是不休息的，一年 365 天，每天 24 小时，在投资正确的前提下，它都在为你工作……</strong> 请问，你的汗水和努力怎么跟它比拼？我们之所以很羡慕沃伦·巴菲特就是因为以下的事实：</p><blockquote><p>沃伦·巴菲特 1930 年出生，11 岁买了他人生第一支股票，到现在 2019 年，已经 78 年了！<br>78 年！—— 别人平均寿命 78 岁，其中只有 9 年是可以用来额外打拼的所谓有效寿命，可是巴菲特呢？巴菲特的钱已经帮着他 78 年每年 365 天、每天 24 小时地拼着……<br>这相当于说，不从事任何投资活动的普通人就算活上 8 辈子也追不上他！因为 78 除以 9 等于 8.6667……<br>而且，巴菲特老爷子的身体还很健康，还会继续活下去…… 更为关键的是，他已经把自己的投资活动做成了一个企业并且上市了（波克夏·哈撒韦公司）—— 也就是说，就算巴菲特老爷子去世了，这家上市公司的钱还在毫不间歇地干活……</p></blockquote><p>很惊人！</p><p>年轻的时候，我和其他年轻人一样，是非常拼的。</p><p>刚从学校毕业出来做销售的时候，我曾经可以一周内六个夜晚睡在火车上，早上下车找个洗澡的地方换衣服，然后做一天的培训工作，而后晚上踏上火车睡上一觉，醒来后就在另外一个城市里继续工作……</p><p>认识我很多年的人都知道，李笑来是不过节假日的。这是为什么呢？因为在 1995 年大学快毕业的时候，有一天我突然想，怎么节假日这么多？一年 365 天，法定节假日竟然有 115 个！ 也就是说，一年的 1&#x2F;3 被 “休息” 掉了！总觉得哪里不对。后来注意到 “法定” 两个字，于是恍然大悟 —— 哦，这个法定节假日是用来限制用工企业的，到了法定节假日，企业不让人休息，那是违法的…… 也就是说，这个法定节假日不是限制个人的 —— 没有任何法律可以说：“今天是法定节假日，你不休息，你违法了！”于是，我就决定，从此之后，法定节假日与李笑来无关！于是，从 1995 年开始到 2019 年，24 年过去了 —— 我就是没有周六周日、没有元旦春节，每天该干嘛就干嘛地走过来的。我出版过的很多书，都是在别人过春节的时候我把自己关在家里动手整理出来的。我是不是真的很拼？</p><p>大约十年前，我突然发现 “在意自己的发型” 是时间成本非常高的习惯。每个月都要花上一两个小时去理发，动不动还要在理发店等很久…… 于是，我决定以后自己理发。一把飞利浦电动理发器真的很便宜，三百多块钱，能用好几年。于是你就看到了我随后十几年里的固定发型，3 毫米圆头板寸。这很简单，基本上就是在某次淋浴之前，用推子在镜子前自己三五分钟搞定。你看，在节省时间方面，我是不是真的很拼？</p><p>可是呢？数据是令人无比沮丧的。你看我，24 年没有节假日，我给自己多拼出来多少有效寿命呢？我们算一算。就算我不把节假日当作休息日，每天平均下来，有效工作时间 4 小时就很了不起了 —— 你真的为自己工作过，不磨洋工的话就知道了，一天下来有效工作时间是非常少的。那么，这 24 年我的有效工作时间是多少呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24 × 115 × 4 = 11,040</span><br></pre></td></tr></table></figure><p>一万多个小时。那么这相当于多少年呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11,040 ÷ (365 × 24) = 1.26</span><br></pre></td></tr></table></figure><p>你看，我对自己下手这么狠，那么结果是什么呢？结果不过是相对于“其他真的很拼的人们”多拼了 14% 而已…… 我 10 年前决定自己理发，给自己省了多少时间呢？每月 1 次，每次平均 1.5 小时，那么一年下来就是 18 个小时，10 年下来，就是 180 个小时…… 你看，我用实际行动精打细算，已经真的够狠了吧？那能增加多少有效寿命呢？或者说相对于别人多拼了多久呢？不过是 7.5 天而已，用了这么大的力气，只不过是比所有人增加了 2.28‰ 而已啊！</p><p>你现在明白了，<strong>不投资是不可能摆脱阶层固化的</strong>。</p><p>然而你一定被警告过：</p><blockquote><p>投资有风险，决策需谨慎！（或，股市有风险，投资需谨慎！）</p></blockquote><p>但是，是否真的如此呢？是真是假，只能靠你自己的行动去检验，在你没有长期践行之前，没有尚未践行的你能够直接理解的答案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建与使用</title>
      <link href="/2020/07/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a>Hexo官网</h2><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 初始化博客目录</span></span><br><span class="line">hexo init Blog</span><br><span class="line"><span class="comment"># 进入博客目录</span></span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line"><span class="comment"># 安装博客相关依赖</span></span><br><span class="line">npm install</span><br><span class="line">hexo -v <span class="comment">#验证</span></span><br></pre></td></tr></table></figure><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><h3 id="1-创建一个md文件"><a href="#1-创建一个md文件" class="headerlink" title="1.创建一个md文件"></a>1.创建一个md文件</h3><p>md文件也就是<code>Markdown</code>文件，通过以下命令来创建：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;title&gt;</span><br><span class="line">$ hexo new <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-布局（layout）"><a href="#2-布局（layout）" class="headerlink" title="2.布局（layout）"></a>2.布局（layout）</h3><ul><li>创建md文件时，我们可以指定布局</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">$ hexo new post <span class="string">&quot;测试文章&quot;</span></span><br><span class="line">$ hexo new page <span class="string">&quot;about&quot;</span> </span><br><span class="line">$ hexo new page about</span><br><span class="line">新建一个标题为 about 的页面，默认链接地址为 主页地址/about/</span><br><span class="line"><span class="variable">$hexo</span> new <span class="string">&quot;新文章&quot;</span></span><br><span class="line">新建一个标题为 新文章 的页面，文章标题日期可以随时修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  blog git:(master) ✗ hexo new post <span class="string">&quot;测试文章&quot;</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~/Gitee/myblog/blog/source/_posts/测试文章.md</span><br></pre></td></tr></table></figure><ul><li>布局有三种：<code>post</code>（文章）、<code>draft</code>（草稿）、<code>page</code>（页面）</li></ul><p>Front-matter预定义参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">layout  布局  默认为true，如果你不想你的文章被处理，可以设置为false</span><br><span class="line">title  标题  标题会显示在最上方居中位置     </span><br><span class="line">date  建立日期    如果不指定则为默认值-文件创建日期，可以自定义。</span><br><span class="line">update  更新日期  如果不指定则为默认值-文件修改后重新生成静态文件的日期。</span><br><span class="line">comments  是否开启文章的评论功能 默认值为true</span><br><span class="line">tags  标签（不适用于页面page布局）</span><br><span class="line">categoreies  分类（不适用于页面page布局）</span><br><span class="line">permalink  覆盖文章网址</span><br><span class="line">keywords  仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</span><br></pre></td></tr></table></figure><h3 id="为文章添加多个分类"><a href="#为文章添加多个分类" class="headerlink" title="为文章添加多个分类"></a>为文章添加多个分类</h3><p>1）下面文章属于三个分类：日常 &gt; 生活，日常 &gt; 随想，日记<br>2）其中生活、随想为日常的子分类，日常和日记为同级分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [日常, 生活]</span><br><span class="line">- [日常, 随想]</span><br><span class="line">- [日记]</span><br></pre></td></tr></table></figure><p><strong>一般发布文章或者修改博客后需要这些操作：</strong>清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 我们可以写成一条命令</span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="文章头示例"><a href="#文章头示例" class="headerlink" title="文章头示例"></a>文章头示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Typora</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line">  </span><br><span class="line"><span class="string">description：摘要内容</span> <span class="comment">#如果主题配置项中的 excerpt_description：true 则摘要会在首页作为本文的全部内容显示出，通过点击标题或更多看完整的文章内容。</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#多个标签用[]扩起来,标签中间用半角逗号&quot;,&quot;分割、tags关键字自动生成（这里的tags就是/source/tags/index.md中配置的type: tags）</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: 全栈开发实战：用Vue2+Koa1开发完整的前后端项目（更新Koa2）</span><br><span class="line">tags: </span><br><span class="line">  - 前端</span><br><span class="line">  - Nodejs</span><br><span class="line">categories:</span><br><span class="line">  - Web</span><br><span class="line">  - 开发</span><br><span class="line">  - Nodejs</span><br><span class="line">date: 2017-05-03 14:09:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo创建文章、标签和分类</span><br><span class="line">date: 2022-07-11 17:39:44</span><br><span class="line">categories: [iOS, Python]</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h3 id="Gitee自动化部署gitee-pages"><a href="#Gitee自动化部署gitee-pages" class="headerlink" title="Gitee自动化部署gitee pages"></a>Gitee自动化部署gitee pages</h3><p>Gitee Pages 的访问速度很快，但无法GitHub Pages那样自动更新Pages，因为 Gitee 的自动部署属于 Gitee Pages Pro 的服务。</p><p>详细操作:<a href="https://github.com/marketplace/actions/gitee-pages-action">https://github.com/marketplace/actions/gitee-pages-action</a></p><p>GitHub Actions：<a href="https://docs.github.com/cn/actions">https://docs.github.com/cn/actions</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><h3 id="创建所需仓库"><a href="#创建所需仓库" class="headerlink" title="创建所需仓库"></a>创建所需仓库</h3><ol><li>创建 <code>blog</code> 仓库用来存放 Hexo 项目</li><li>创建 <code>your.github.io</code> 仓库用来存放静态博客页面</li></ol><h2 id="创建工作流配置"><a href="#创建工作流配置" class="headerlink" title="创建工作流配置"></a>创建工作流配置</h2><p>参考文章</p><p><a href="https://juejin.cn/post/7011765438262558727">https://juejin.cn/post/7011765438262558727</a></p><p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>理财大师名人名言</title>
      <link href="/2019/07/26/%E7%90%86%E8%B4%A2%E5%A4%A7%E5%B8%88%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80/"/>
      <url>/2019/07/26/%E7%90%86%E8%B4%A2%E5%A4%A7%E5%B8%88%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="巴菲特"><a href="#巴菲特" class="headerlink" title="巴菲特"></a>巴菲特</h1><h2 id="巴菲特名言：「世界上最笨的事情就是看到股价上扬就决定要投资一档股票。」"><a href="#巴菲特名言：「世界上最笨的事情就是看到股价上扬就决定要投资一档股票。」" class="headerlink" title="巴菲特名言：「世界上最笨的事情就是看到股价上扬就决定要投资一档股票。」"></a>巴菲特名言：「世界上最笨的事情就是看到股价上扬就决定要投资一档股票。」</h2><p>1、投资必需是理性的，如果你不能理解它，那就不要做。　　</p><p>2、我们的工作就是专注于自己所了解的事情，这一点是最最最重要的事。</p><p>3、一辈子能够累积多少财富，不取决于你能够赚多少钱，而是取决于你如何投资理财，钱找人胜过人找钱，要懂得让钱为你工作，而不是你为钱工作。</p><p>4、我从十一岁开始就在作资金配置这个工作，一直到现在都是如此。</p><p>5、从预言中你可以得悉许多预言者的资讯，但对于未来却仍然所获无几。</p><p>6、无须等到企业降至谷底才去购买它的股票。所选企业股票的售价要低于你所认为的它的价值并且企业要由诚实而有能力的人经营。然而，你若能以低于一家企业目前所值的钱买进它的股分，你对于它的管理有信念，同时你又买进了一批相似于该企业的股分，那你赚钱的日子就为期不远了。</p><p>7、今天的投资者不是从昨天的增长中获利的。</p><p>8、你是在市场中与许多蠢人打交道；这就像一个巨大的赌场，除了你以外每个人都在狂吞豪饮。如果你一直喝百事可乐，你可能会中奖。</p><p>9、在国内并不需要过多的人应用与股市亲密关联的那些非必需的工具进行赌博，也不需要过多激励这些这么做的经纪人。我们需要的是投资者与建议者，他们能够依据一家企业的远景瞻望而进行相应的投资。 （励志 ）咱们需要的是有才智的投资资金委托人，而非应用杠杆收购谋利的股市赌徒。资金市场中那种需要高度智力才能经营的；支撑社会运转倾向性，却在某种程度上被在同一舞台上、使用同一种语系、享受着同一个劳动力大军服务的、狂热而使人心跳的赌场经营所扼制了，而不是被促进了。</p><p>10、在商业不景气时，我们散布谣言说，咱们的糖果有着春药的效用，这样无比有效。但谣言是谣言，而糖果则不然。</p><p>11、习气的链条在重到断裂以前，老是轻到难以察觉。</p><p>12、如果你的基础都是从别人那里学知识，那你无需有太多自己的新观点，你只需套用你学到的最佳的知识。</p><p>13、我永远不打算在买入股票的次日就赚钱，我买入股票时，老是会先假如明天交易所就会关门，5年之后才又从新开启旧档，恢复交易。</p><p>14、不要投资一门蠢人均可以做的生意，因为终有一日蠢人都会这样做。</p><p>15、如开始就胜利，就不要另觅他途。</p><p>16、但愿你不要认为自己拥有的股票仅仅是一纸价格天天都在变动的凭证，而且一旦某种经济事件或者政治事件使你紧张不安就会成为你抛售的候选对象。相反，我但愿你将自己想像成为企业的所有者之一，对于这家企业你愿意无限期的投资，就像你与家庭中的其他成员合伙拥有的一个农场或者一套公寓。<br>17、我们的目的是使我们持股合伙人的利润来自于企业，而不是其他共有者的愚蠢行为。<br>18、想要在股市从事波段动作是神做的事，不是人做的事。<br>19、1919年，可口可乐公司上市，价格40美元摆布。一年后，股价降了50％，只有19美元。然后是瓶装问题，糖料涨价等等。一些年后，又发生了大萧条、第二次世界大战、核武器竞赛等等，老是有这样或者那样不利的事件。然而，若果你在一开始用40块钱买了一股，然后你把派发的红利继续投资于它，那么现在，当初40美元可口可乐公司的股票，已经经变为了500万。这个事实压倒了一切。若果你看对于了生意模式，你就会赚得多钱。<br>20、一个杰出的企业可以预计到，将来可能会发生什么，但不必定晓得何时会发生。重心需要放在“什么”上面，而不是“何时”上。若果对于“什么”的判断是正确的，那么对于“何时”大可无须过虑。<br>21、你所找寻的出路就是，想出一个好法子，然后持之以恒，尽最大可能，直到把梦想变为现实。然而，在华尔街，每一五分钟就互相叫价一次，人们在你的鼻子底下买进卖出，想做到不为所动是很难的。<br>22、华尔街靠的是不断的交易来赚钱，你靠的是不去做买进卖出而赚钱。这间屋子里的每一个人，天天互相交易你们所拥有的股票，到最后所有人都会破产，而所有钱财都进了经纪公司的腰包。 （励志 ）相反地，若果你们像一般企业那样，50年岿然不动，到最后你赚患上不亦乐乎，而你的经纪公司只好破产。<br>23、当一个阅历辉煌的经营阶层遇到一个逐步没落的夕阳工业，往往是后者占了上风。<br>24、所谓有‘转机’的企业，最后很少有胜利的案例，与其把时间以及精力花在购买价廉的烂企业上，还不如以合理的价格投资一些物美的企业。<br>25、投资人必需谨记，你的投资成就并不是像奥运跳水竞赛的模式评分，难度高下并不首要，你正确地投资一家简单易懂而竞争力持续的企业所患上到的回报，与你辛勤地分析一家变量不断、复杂难懂的企业可以说是并驾齐驱。<br>26、近些年来，我的投资重点已经经转移。咱们不想以最廉价的价格买最糟糕糕的家具，咱们要的是按合理的价格买最佳的家具。<br>27、当一些大企业暂时呈现危机或者股市下跌，呈现有利可图的交易价格时，应该毫不犹豫买进它们的股票。<br>28、经验显示，能够创造盈余新高的企业，现在做生意的模式通常与其五年前甚至十年前没有多大的悬殊。<br>29、咱们不会因为想要将企业的获利数字增添一个百分点，便收场对比不赚钱的事业，但同时咱们也觉患上只因公司无比赚钱便无前提去支撑一项彻底不具前景的投资的做法不太妥帖，亚当·史密斯必定不赞同我第一项的看法，而卡尔·马克斯却又会反对于我第二项见解，而采行不偏不倚是惟一能让我感到安心的做法。<br>30、一只能数到十的马是只了不起的马，却不是了不起的数学家，同样的一家能够合理应用资金的纺织公司是一家了不起的纺织公司，但却不是什么了不起的企业。<br>31、我对于总体经济一窍不通，汇率与利率根本无法预测，好在我在做分析与选取投资标时根本不去理睬它。<br>32、利率就像是投资上的地心引力同样。<br>33、抉择卖掉公司所持有的麦当劳股票是一项严重的过错，总而言之，假如我在股市开碟期间经常溜去看电影的话，你们去年应该赚患上更多。<br>34、一群旅鼠在乎见分歧时，以及华尔街那群利己的个人主义者没有两样。<br>35、股票预测专家惟一的价值，就是让算命先生看起来还不错。<br>36、只要想到隔天早上会有25亿男性需要刮胡子，我每一晚都能坦然入眠。 （谈到对于于吉列刮胡刀持股的看法）<br>37、经理人在思索会计原则时，必定要谨记林肯总统最常讲的一句俚语：「如果一只狗连尾巴也算在内的话，总共有几条腿？」<br>谜底仍是四条腿，因为不论你是否把尾巴当成是一条腿，「尾巴永远仍是尾巴！」这句话提醒经理人就算会计师愿意帮你证明尾巴也算是一条腿，你也不会因而多了一条腿。　<br>38、我们从未想到要预估股市未来的走势。<br>39、短期股市的预测是毒药，应该要把他们摆在最安全之处，远离儿童以及那些在股市中的行为像小孩般幼稚的投资人。<br>40、人们习气把天天短线进出股市的投契客称之为投资人，就好像大家把不断发生一晚上情的恋情骗子当成浪漫情人同样。<br>41、有的企业有高耸的护城河，里头还有凶猛的鳄鱼、海盗与沙鱼守护着，这才是你应该投资的企业。<br>42、所谓拥有特许权的事业，是指那些可以等闲提高价格，且只需额外多投入一些资金，就可增添销售量与市场占有率的企业。<br>43、投资对于于我来讲，既是一种运动，也是一种娱乐。<br>44、禁不起股价下跌50%的人就不应该炒股。<br>45、伟大企业的定义如下：在25年或者30年依然能够维持其伟大企业地位的企业。<br>46、我们的投资依然是集中于很少几只股票，而且在概念上无比简单：真正伟大的投资理念经常用简单的一句话就能概括。咱们喜欢一个具备持续竞争优势并且由一群既能干又全心全意为股东服务的人来管理的企业。当发现具备这些特征的企业而且咱们又能以合理的价格购买时，咱们几乎不可能犯错。<br>47、如果某人相信了空头市场行将来临而卖出手中不错的投资，那么此人会发现，通常卖出股票后，所谓的空头市场当即转为多头市场，于是又再次错失良机。<br>48、咱们欢迎市场下跌，因为它使咱们能以新的、使人感到恐慌的廉价价格拣到更多的股票。<br>49、当人们健忘「二加二等于四」这种最基本的常识时，就该是脱手离场的时候了。<br>50、若果咱们有坚定的长期投资指望，那么短期的价格波动对于咱们来讲毫无心义，除了非它们能够让咱们有机会以更廉价的价格增持股分。<br>51、我从来不曾经有过自我怀疑。我从来不曾经灰心过。<br>52、对于于每一一笔投资，你都应该有勇气以及信念将你净资产的10%以上投入。<br>【名人语录】70句 股神巴菲特名言经典投资语录2：禁不起股价下跌50%的人就不应该炒股 Warren Buffett Quotes<br>53、假如你缺乏自信，心虚与恐惧会致使你投资惨败。缺乏自信的投资人容易紧张，而且时常会在股价下跌时卖出股票。然而这种行为简直形同疯狂，就如你刚花了10万美元买了一栋房子，然后立刻就奉告经纪人，只要有人出价8万美元就卖了。<br>54、我之所以能有今天的投资造诣，是依靠自己的自律以及别人的愚蠢。<br>55、我是个现实主义者，我喜欢目前自己所从事的一切，并对于此始终坚信不疑。作为一个彻底的现实主义者，我只对于现实感兴致，永远不抱任何幻想，尤为是对于自己。<br>56、在糊口中，我不是最爱欢迎的，但也不是最使人厌恶的人。我哪种人都不属于。<br>57、吸引我从事证券工作的缘故之一是，它可让你过你自己想过的糊口。你没有必要为胜利而装扮。<br>58、这些数字就是我未来所拥有的财富，尽管我现在没有这么多，但总有一天我会赚到的。<br>59、我不会以我赚来的钱衡量我的生命的价值。其别人或许会这么做，但我当然不会。<br>60、钱，在某种程度上，有时会使你的处境有利，但它无法扭转你的健康状况或者让别人爱你。<br>61、从巨额的消费中，我不会患上到什么快活，享受自身并非我对于财富渴求的根本缘故。对于我而言，金钱只无非是一种证明，是我所喜欢的游戏的一个计分牌而已经。<br>62、我所想要的并非金钱。我觉得是爱上赚钱并看着它慢慢增可能是一件颇有趣的事情。<br>63、尽管我也靠收入糊口，但我依恋过程要远胜于收入。<br>64、我有一块黑色的画布，我还有许许多多的颜料，我患上到我所想要的。现在我拥有较大数目的财富，然而，在多年以前，当金钱的数目较少时，我也拥有同样多的乐趣。因为我深知，我想做的事情必然会达成。<br>65、必需有工作激情但又没有贪念，并且对于投资的过程入迷的人材合适做这个工作。利欲熏心会毁了自己。当然，冷视金钱或是恬澹财富的人也不合适玩这种‘游戏’，因为他不喜欢就没有激情。<br>66、如果把那些曾经经信任过我的人推开，我不会自我感觉优良。<br>67、巴菲特名言：「人生就像滚雪球，你只要找到湿的雪，和很长的坡道，雪球就会越滚越大。」<br>Life is like a snowball. The important thing is finding wet snow and a really long hill. – Buffett<br>68、今天他可以坐在阴凉处，是因为很久以前他种了一棵树。<br>69、和对的人结婚，人生会有重大改变。<br>70、建立你的名誉需要花上20年，但只需要5分钟就能付之一炬。如果你能好好思考这件事，那你做的事情都会非常不一样。<br>71、股神巴菲特名言：「退潮的时候，就知道谁没有穿裤子。」（After all, you only find out who is swimming naked when the tide goes out.）<br>退潮的时候，就知道谁在裸泳。</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Native开发环境搭建-Mac</title>
      <link href="/2018/04/02/React-Native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Mac/"/>
      <url>/2018/04/02/React-Native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Mac/</url>
      
        <content type="html"><![CDATA[<h4 id="1、React-Native-Command-Line-Tools安装"><a href="#1、React-Native-Command-Line-Tools安装" class="headerlink" title="1、React Native Command Line Tools安装"></a>1、React Native Command Line Tools安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><p>如果你看到<code>EACCES: permission denied</code>这样的权限报错，那么请参照上文的homebrew译注，修复&#x2F;usr&#x2F;local目录的所有权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R `whoami` /usr/local</span><br></pre></td></tr></table></figure><p>帮助</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native --help</span><br></pre></td></tr></table></figure><p>2、创建 HelloWorld ReactNative</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-native init &lt;项目名字&gt;</span><br><span class="line">如：</span><br><span class="line">react-native init HelloWorld</span><br></pre></td></tr></table></figure><p>3、运行应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd HelloWorld</span><br><span class="line">react-native run-ios</span><br><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><p>或直接用xcode打开工程</p><p>执行react-native run-ios 遇到下面错误：</p><p><code>xcrun: error: unable to find utility &quot;instruments&quot;, not a developer tool or in PATH</code></p><p>解决方法：在 终端执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/</span><br></pre></td></tr></table></figure><p>“react&#x2F;rctbundleurlprovider.h no found”</p><p>原因是没有启动npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd HelloWorld</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、删除node modules文件夹，然后重新执行npm install命令。</span><br><span class="line">2、执行react-native upgrade 按照提示覆盖旧文件。</span><br><span class="line">3、清楚xcode缓存shift+alt+command+k</span><br></pre></td></tr></table></figure><p>有时出现错误，可能重启一下就ok了.</p><p><a href="https://github.com/JasonBoy/javascript/blob/master/react/README.md">ReactNative规范指南</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Xcode格式化代码</title>
      <link href="/2018/03/30/Xcode%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/03/30/Xcode%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat</a> -来自<a href="https://github.com/nicklockwood/iCarousel">iCarousel</a>作者</p><ul><li>A code library and command-line formatting tool for reformatting Swift code</li></ul><p><a href="https://github.com/realm/SwiftLint/">SwiftLint</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>优雅的使用Sublime-Text3</title>
      <link href="/2018/03/29/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Sublime-Text3/"/>
      <url>/2018/03/29/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Sublime-Text3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a><br><a href="http://www.sublimetextcn.com/">http://www.sublimetextcn.com/</a></p><p>如何安装插件详见：<a href="https://link.jianshu.com/?t=https://packagecontrol.io/installation">https://packagecontrol.io/installation</a></p><p>安装方法：</p><p><code>Cmd+Shift+P</code>-&gt;<code>install package</code> -&gt; 输入主题名Theme</p><p>推荐使用<a href="https://packagecontrol.io/">package Control</a>安装</p><p>Boxy主题安装</p><p>1、<code>Cmd+Shift+P-&gt;install package</code> -&gt; Boxy Theme</p><p>2、<code>Cmd+Shift+P-&gt;install package</code> -&gt; A File Icon</p><p>主题选择-<code>Preferences-&gt;Color Theme</code></p><p>使用ColorSublime插件浏览主题</p><p><a href="https://link.jianshu.com/?t=http://colorsublime.com/">ColorSublime</a>：Sublime主题网站</p><p><a href="https://link.jianshu.com/?t=https://github.com/Colorsublime/Colorsublime-Plugin">ColorSublime插件</a> ：主题实时预览插件，推荐使用<code>Package Control</code>安装，安装完可以使用在控制面板中移动上下箭头就可以预览，回车即可安装。</p><p>使用：<code>Cmd+Shift+P</code>-&gt;<code>UI:Select Theme</code></p><p><code>esc</code>–退出当前操作</p><h4 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h4><p>Spacegray<br>ayu<br>Material<br>GitHub<br>Solarized<br>Soda</p><h4 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h4><p>SideBarEnhancements-左侧文件管理栏增强</p><p>Markdown Extended-让sublime text支持markdown，并支持预览。</p><p>Alignment —代码对齐</p><p>ColorPicker-调色板</p><p>TrailingSpaces-检测并一键去除代码中多余的空格</p><p>SublimeCodeIntel<br>代码提示和补全插件，支持 JavaScript、Mason、XBL、XUL、RHTML、SCSS、Python、HTML、Ruby、Python3、XML、Sass、XSLT、Django、HTML5、Perl、CSS、Twig、Less、Smarty、Node.js、Tcl、TemplateToolkit 和 PHP 等所有语言<br>SublimeLinter<br>一个支持lint语法的插件，可以高亮linter认为有错误的代码行，也支持高亮一些特别的注释<br>ChineseLocalization–汉化</p><p>插件推荐</p><p><a href="http://www.cnblogs.com/hykun/p/sublimeText3.html">http://www.cnblogs.com/hykun/p/sublimeText3.html</a></p><p><strong>卸载插件</strong></p><p>按<code>ctr+shift +p</code>然后输入remove 回车，再输入要删除的插件名</p><p>小技巧：点击文件进行编辑模式，再次点击失去编辑模式。这样键盘上下键可以快速浏览文件</p><h4 id="管理文档资料"><a href="#管理文档资料" class="headerlink" title="管理文档资料"></a>管理文档资料</h4><p>一直用Typora写文档资料，但Typora没有文档管理功能，使用Sublime直接拖入文件夹即可。可以查看源码格式。</p><p>批量替换<br>hexo主题objective-c无法高亮，使用“objectivec”字段进行高亮<br>Find-&gt;Find in files（⌘+shift+F）–替换后记得保存所有-&gt;File-save-all(⌘+control+s)</p><p><strong>相关插件</strong><br>MarkdownEditing —语法高亮，快捷键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">⌘+option+V 选中的内容将自动转换为行内式超链接，链接到剪贴板中的内容</span><br><span class="line">⌘+option+R 选中的内容将自动转换为参考式超链接，链接到剪贴板中的内容</span><br><span class="line">⌘+Shift+K 插入一个标准的行内式图片</span><br></pre></td></tr></table></figure><p>Typora -用Typora打开插件<br>DeleteBlankLines-删除空行，选择需要删除空行的文本，⌘+shift+p，选择delete blank lines</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">⌘+Alt+Delete             删除所有空行</span><br><span class="line">⌘+Alt+Shift+Delete       删除多余空行</span><br></pre></td></tr></table></figure><p>在相同窗口打开文件</p><p>每次点击一个文件都会打开新的窗口，然后自己手动关闭</p><p>How to open files in the same window?</p><p>Anwer:select <strong>Preferences -&gt; Settings-User</strong> and add</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;open_files_in_new_window&quot;: false</span><br></pre></td></tr></table></figure><p>这样单击不会再新窗口打开，双击新窗口打开文件</p><p>搜索：</p><ul><li>用 <code>⌘ + P</code> 可以快速跳转到当前项目中的任意文件，可进行关键词匹配。</li><li>用 <code>⌘ + P</code> 后 <code>@</code> (或是<code>⌘ +R</code>)可以快速列出&#x2F;跳转到某个函数</li></ul><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><strong>⌘</strong>&#x3D; Command key</li><li><strong>⌃</strong>*&#x3D;Control key</li><li><strong>⌥</strong>&#x3D;Option key</li><li><strong>⇧</strong>&#x3D;Shift Key</li></ul><p>快捷键在线练习：<a href="https://www.shortcutfoo.com/app">https://www.shortcutfoo.com/app</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">⌘+Shift+P：打开命令面板</span><br><span class="line">⌘+P：搜索项目中的文件</span><br><span class="line">⌘+G：跳转到第几行</span><br><span class="line">⌘+W：关闭当前打开文件</span><br><span class="line">⌘+Shift+W：关闭所有打开文件</span><br><span class="line">⌘+Shift+V：粘贴并格式化</span><br><span class="line">⌘+D：选择单词，重复可增加选择下一个相同的单词</span><br><span class="line">⌘+L：选择行，重复可依次增加选择下一行</span><br><span class="line">⌘+Shift+L：选择多行</span><br><span class="line">⌘+Shift+Enter：在当前行前插入新行</span><br><span class="line">⌘+X：删除当前行</span><br><span class="line">⌘+M：跳转到对应括号</span><br><span class="line">⌘+U：软撤销，撤销光标位置</span><br><span class="line">⌘+J：选择标签内容</span><br><span class="line">⌘+F：查找内容</span><br><span class="line">⌘+Shift+F：查找并替换</span><br><span class="line">⌘+H：替换</span><br><span class="line">⌘+R：前往 method</span><br><span class="line">⌘+N：新建窗口</span><br><span class="line">⌘+K+B：开关侧栏</span><br><span class="line">⌘+Shift+M：选中当前括号内容，重复可选着括号本身</span><br><span class="line">⌘+F2：设置/删除标记</span><br><span class="line">⌘+/：注释当前行</span><br><span class="line">⌘+Shift+/：当前位置插入注释</span><br><span class="line">⌘+Alt+/：块注释，并Focus到首行，写注释说明用的</span><br><span class="line">⌘+Shift+A：选择当前标签前后，修改标签用的</span><br><span class="line">F11：全屏</span><br><span class="line">Shift+F11：全屏免打扰模式，只编辑当前文件</span><br><span class="line">Alt+F3：选择所有相同的词</span><br><span class="line">Alt+.：闭合标签</span><br><span class="line">Alt+Shift+数字：分屏显示</span><br><span class="line">Alt+数字：切换打开第N个文件</span><br><span class="line">Shift+右键拖动：光标多不，用来更改或插入列内容</span><br><span class="line">鼠标的前进后退键可切换Tab文件</span><br><span class="line">按⌘，依次点击或选取，可需要编辑的多个位置</span><br><span class="line">按⌘+Shift+上下键，可替换行</span><br></pre></td></tr></table></figure><h1 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h1><p>⌘+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。<br>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。<br>⌘+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>⌘+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>⌘+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>⌘+M 光标移动至括号内结束或开始的位置。<br>⌘+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。<br>⌘+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>⌘+Shift+[ 选中代码，按下快捷键，折叠代码。<br>⌘+Shift+] 选中代码，按下快捷键，展开代码。<br>⌘+K+0 展开所有折叠代码。<br>⌘+← 向左单位性地移动光标，快速移动光标。<br>⌘+→ 向右单位性地移动光标，快速移动光标。<br>shift+↑ 向上选中多行。<br>shift+↓ 向下选中多行。<br>Shift+← 向左选中文本。<br>Shift+→ 向右选中文本。<br>⌘+Shift+← 向左单位性地选中文本。<br>⌘+Shift+→ 向右单位性地选中文本。<br>⌘+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。<br>⌘+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>⌘+Alt+↑ 向上添加多行光标，可同时编辑多行。<br>⌘+Alt+↓ 向下添加多行光标，可同时编辑多行。</p><h1 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h1><p>⌘+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>⌘+Shift+D 复制光标所在整行，插入到下一行。<br>Tab 向右缩进。<br>Shift+Tab 向左缩进。<br>⌘+K+K 从光标处开始删除代码至行尾。<br>⌘+Shift+K 删除整行。<br>⌘+&#x2F; 注释单行。<br>⌘+Shift+&#x2F; 注释多行。<br>⌘+K+U 转换大写。<br>⌘+K+L 转换小写。<br>⌘+Z 撤销。<br>⌘+Y 恢复撤销。<br>⌘+U 软撤销，感觉和 Gtrl+Z 一样。<br>⌘+F2 设置书签<br>⌘+T 左右字母互换。<br>F6 单词检测拼写</p><h1 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h1><p>⌘+F 打开底部搜索框，查找关键字。<br>⌘+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。<br>⌘+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。<br>⌘+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。<br>⌘+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。<br>⌘+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。<br>⌘+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。<br>Esc 退出光标多行选择，退出搜索框，命令框等。</p><h1 id="显示类-屏幕"><a href="#显示类-屏幕" class="headerlink" title="显示类-屏幕"></a>显示类-屏幕</h1><p>⌘+Tab 按文件浏览过的顺序，切换当前窗口的标签页。<br>⌘+PageDown 向左切换当前窗口的标签页。<br>⌘+PageUp 向右切换当前窗口的标签页。<br>Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2 左右分屏-2列<br>Alt+Shift+3 左右分屏-3列<br>Alt+Shift+4 左右分屏-4列<br>Alt+Shift+5 等分4屏<br>Alt+Shift+8 垂直分屏-2屏<br>Alt+Shift+9 垂直分屏-3屏<br>⌘+K+B 开启&#x2F;关闭侧边栏。<br>F11 全屏模式<br>Shift+F11 免打扰模式</p><p><code>update</code><br>⌘+k+2 折叠注释和方法<br>⌘+k+3 折叠if<br>⌘+k+4 折叠switch</p><p><a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">Sublime Text 全程指南</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS内存泄漏</title>
      <link href="/2018/03/27/iOS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
      <url>/2018/03/27/iOS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="Instrument-—-Leaks，Allocations，Analyze"><a href="#Instrument-—-Leaks，Allocations，Analyze" class="headerlink" title="Instrument — Leaks，Allocations，Analyze"></a>Instrument — Leaks，Allocations，Analyze</h4><p><strong>Analyze</strong>-静态分析工具</p><p>Product-&gt;Analyze(<code>command+shift+B</code>)</p><p>可以找出代码潜在错误,如内存泄露,未使用函数和变量等,还可以检测出一些内存泄漏问题，比如一些比较明显的循环引用，CF库对象未release等相对简单的问题，通常是在进行其他方式检测之前就使用的方式，把一些简单的问题先发现并处理了。</p><p>主要分析以下四种问题</p><ul><li>逻辑错误：访问空指针或为初始化的变量等；</li><li>内存管理错误：如内存泄漏等；</li><li>声明错误：从未使用过的变量</li><li>Api调用错误：未包含使用库和框架</li></ul><p> Allocations工具是一个跟踪由应用程序分配的对象内存的工具。可以用来在疑似内存泄露的地方，通过反复操作，查看某些对象内存是否有被正常的释放，从而得知是否发生内存泄露。</p><p><strong>Instruments</strong>-动态分析工具（product -&gt; profile）</p><p>内存泄漏检测工具-Leaks</p><p>Instruments工具(<code>command+I</code>)-选择Leaks选项</p><p>选择Target，在右下角Display Setting面板的Call Tree，勾选Invert Call Tree和Hide System Libraries，方便接下来我们迅速查找有内存问题的代码段。</p><h4 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h4><p>相对于系统工具，方便快速多了</p><h4 id="一、MLeaksFinder"><a href="#一、MLeaksFinder" class="headerlink" title="一、MLeaksFinder"></a>一、MLeaksFinder</h4><p>精准 iOS 内存泄露检测工具</p><p><a href="https://github.com/Tencent/MLeaksFinder">https://github.com/Tencent/MLeaksFinder</a></p><p>直接拖入<code>MLeaksFinder</code>文件夹到工程即可</p><p><strong>MLeaksFinder 新特性</strong> <a href="https://wereadteam.github.io/2016/07/20/MLeaksFinder2/">https://wereadteam.github.io/2016/07/20/MLeaksFinder2/</a></p><p>MLeaksFinder的原理：</p><p>使用runtime方法交换，它swizzle了NavigationController的Push和Pop相关方法来管理viewController和view的生命周期, 在你Pop掉viewController的时候, 会执行这么一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__weak id weakSelf = self;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [weakSelf assertNotDealloc];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3秒后执行 [weakSelf assertNotDealloc]; 如果这个时候view和viewController已经释放了, 那么weakSelf应该为nil, 所以将不会触发断言, 否则将会打印日志, 触发断言.</p><p>MLeaksFinder的原理还是很简单的, 它swizzle了NavigationController的Push和Pop相关方法来管理viewController和view的生命周期, 在你Pop掉viewController的时候, 会执行这么一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__weak id weakSelf = self;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [weakSelf assertNotDealloc];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3秒后执行 [weakSelf assertNotDealloc]; 如果这个时候view和viewController已经释放了, 那么weakSelf应该为nil, 所以将不会触发断言, 否则将会打印日志, 触发断言.</p><p><strong>OOMDetector</strong></p><p><a href="https://github.com/Tencent/OOMDetector">https://github.com/Tencent/OOMDetector</a></p><p>同样来自腾讯，OOMDetector是一个iOS内存监控组件，应用此组件可以帮助你轻松实现OOM监控、大内存分配监控、内存泄漏检测等功能。</p><p><a href="https://juejin.im/post/5a58f1a76fb9a01cab283392">【腾讯开源】iOS爆内存问题解决方案-OOMDetector组件</a></p><h4 id="二、PLeakSniffer"><a href="#二、PLeakSniffer" class="headerlink" title="二、PLeakSniffer"></a>二、PLeakSniffer</h4><p>iOS内存泄漏自动检测工具</p><p><a href="https://github.com/music4kid/PLeakSniffer">https://github.com/music4kid/PLeakSniffer</a></p><p><a href="http://mrpeak.cn/blog/leak/">http://mrpeak.cn/blog/leak/</a></p><p>在<code>AppDelegate.m</code>加入</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG</span></span><br><span class="line">[[PLeakSniffer sharedInstance] installLeakSniffer];</span><br><span class="line">[[PLeakSniffer sharedInstance] addIgnoreList:@[<span class="string">@&quot;MySingletonController&quot;</span>]];<span class="comment">//需要忽略的文件</span></span><br><span class="line">[[PLeakSniffer sharedInstance]  alertLeaks];<span class="comment">//使用弹出框提示</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="三、使用Facebook开源检查工具FBRetainCycleDetector"><a href="#三、使用Facebook开源检查工具FBRetainCycleDetector" class="headerlink" title="三、使用Facebook开源检查工具FBRetainCycleDetector"></a>三、使用Facebook开源检查工具FBRetainCycleDetector</h4><p>使用的是MRC机制的文件，需要设置对应文件的Compiler Flags为<code>-fno-objc-arc</code>。</p><p>如何使用，使用<code>FBRetainCycleDetector</code>，需要将以上4个文件改成<code>-fno-objc-arc</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FBBlockStrongLayout</span><br><span class="line">FBAssociationManager</span><br><span class="line">FBBlockStrongRelationDetector</span><br><span class="line">FBClassStrongLayoutHelpers</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS常用第三分库源码分析</title>
      <link href="/2018/03/27/iOS%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E5%88%86%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/03/27/iOS%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E5%88%86%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="AFNetworking"><a href="#AFNetworking" class="headerlink" title="AFNetworking"></a>AFNetworking</h4><p>GitHub:<a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a></p><p>AF分为如下5个功能模块：</p><ul><li>网络通信模块(AFURLSessionManager、AFHTTPSessionManger)</li><li>网络状态监听模块(Reachability)</li><li>网络通信安全策略模块(Security)</li><li>网络通信信息序列化&#x2F;反序列化模块(Serialization)</li><li>UIKit库的拓展：UIKit+AFNetworking</li></ul><p>其中核心模块是AFURLSessionManager，也就是基于NSURLSessionManager封装的请求类。其余四个模块是为了配合网络通信而做的拓展类。AFHTTPSessionManger只是简单封装自NSURLSessionManager的类，简单的http请求一般就用这个类就足够了。</p><p><a href="https://github.com/swiftcafex/NSURLSessionSamples">https://github.com/swiftcafex/NSURLSessionSamples</a></p><p><a href="http://imtangqi.com/2016/04/01/from-nsurlconnection-to-nsurlsession/">http://imtangqi.com/2016/04/01/from-nsurlconnection-to-nsurlsession/</a></p><p><a href="http://imtangqi.com/2016/05/05/the-notes-of-learning-afnetworking-one/">http://imtangqi.com/2016/05/05/the-notes-of-learning-afnetworking-one/</a></p><p><a href="https://renchao0711.github.io/2017/08/25/AFNetWorking%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)/">https://renchao0711.github.io/2017/08/25/AFNetWorking%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)/</a></p><h4 id="SDWebImage"><a href="#SDWebImage" class="headerlink" title="SDWebImage"></a>SDWebImage</h4><p>GitHub:<a href="https://github.com/rs/SDWebImage">https://github.com/rs/SDWebImage</a></p><p><a href="https://github.com/Draveness/analyze/blob/master/contents/SDWebImage/iOS%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%20---%20SDWebImage.md">https://github.com/Draveness/analyze/blob/master/contents/SDWebImage/iOS%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%20---%20SDWebImage.md</a></p><p><a href="http://xgfe.github.io/2017/05/27/shsoul/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">http://xgfe.github.io/2017/05/27/shsoul/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</a></p><p><a href="http://www.guiyongdong.com/2017/01/15/SDWebImage%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">http://www.guiyongdong.com/2017/01/15/SDWebImage%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p><p><a href="http://imtangqi.com/2016/03/19/the-notes-of-learning-sdwebimage-one/">http://imtangqi.com/2016/03/19/the-notes-of-learning-sdwebimage-one/</a></p><p><a href="http://www.chaisong.xyz/2016/01/25/SDWebImage%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AD%A6%E4%B9%A0/">http://www.chaisong.xyz/2016/01/25/SDWebImage%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AD%A6%E4%B9%A0/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS多线程</title>
      <link href="/2018/03/26/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/03/26/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>在 iOS 中其实目前有 <code>4</code> 套多线程方案</p><ul><li>NSThread</li><li>GCD</li><li>NSOperation &amp; NSOperationQueue</li><li>Pthreads(基于<strong>c语言</strong>的框架,不常用)</li></ul><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><table><thead><tr><th>名称</th><th>概念</th></tr></thead><tbody><tr><td>进程</td><td>一个具有一定独立功能的程序关于某个数据集合的一次运行活动。可以理解成一个运行中的应用程序</td></tr><tr><td>线程</td><td>程序执行流的最小单元，线程是进程中的一个实体。</td></tr><tr><td>同步</td><td>只能在当前线程按先后顺序依次执行，不开启新线程。</td></tr><tr><td>异步</td><td>可以在当前线程开启多个新线程执行，可不按顺序执行。  队列： 装载线程任务的队形结构。  并发： 线程执行可以同时一起进行执行。  串行： 线程执行只能依次逐一先后有序的执行。</td></tr><tr><td>队列</td><td>装载线程任务的队形结构。  并发： 线程执行可以同时一起进行执行。  串行： 线程执行只能依次逐一先后有序的执行。</td></tr><tr><td>并发</td><td>线程执行可以同时一起进行执行。</td></tr><tr><td>串行</td><td>线程执行只能依次逐一先后有序的执行。</td></tr></tbody></table><blockquote><p>备注：一个进程可有多个线程-&gt;一个进程可有多个队列-&gt;队列可分并发队列和串行队列。</p></blockquote><h4 id="一、NSThread"><a href="#一、NSThread" class="headerlink" title="一、NSThread"></a>一、NSThread</h4><p>这套方案是经过苹果封装后的，并且完全面向对象的。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：创建线程，需要自己开启线程</span></span><br><span class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(run) object:<span class="literal">nil</span>];</span><br><span class="line">thread.threadPriority = <span class="number">1</span>;<span class="comment">// 设置线程的优先级(0.0 - 1.0，1.0最高级)</span></span><br><span class="line"><span class="comment">// 开启线程</span></span><br><span class="line">[thread start];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：静态实例化-创建线程后自动启动线程</span></span><br><span class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(run) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：隐式实例化-隐式创建并启动线程</span></span><br><span class="line">[<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(run) withObject:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><h4 id="二、GCD-英文全称-Grand-Central-Dispatch"><a href="#二、GCD-英文全称-Grand-Central-Dispatch" class="headerlink" title="二、GCD(英文全称:Grand Central Dispatch)"></a>二、GCD(英文全称:Grand Central Dispatch)</h4><ul><li>GCD是苹果开发的一个多核编程的解决方法</li><li>GCD是苹果推荐而且最简洁的;</li><li>纯C语言，提供了非常多强大的函数；</li><li>GCD会自动利用更多的CPU内核（比如双核、四核);</li><li>GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）;</li></ul><p>GCD是基于C的API，因此比较底层。</p><p>GCD所管理的调度队列（dispatch queue）主要有三类，1、<strong>串行队列</strong>（private dispatch queue）、2、<strong>并发队列</strong> （global dispatch queue，又称全局调度队列）和<strong>主队列</strong>（main dispatch queue）。</p><p><strong>队列与任务</strong></p><p>GCD有四个概念：串行队列、并行队列、同步、异步四者。</p><p><code>同步（sync）</code> 和 <code>异步（async）</code> 的主要区别在于会不会阻塞当前线程，直到 <code>Block</code> 中的任务执行完毕！</p><p><strong>同步(sync)</strong> ：它会阻塞当前线程并等待 <code>Block</code> 中的任务执行完毕，然后当前线程才会继续往下运行。</p><p>**异步(async)**：当前线程会直接往下执行，它不会阻塞当前线程。</p><p><strong>队列</strong>：用于存放任务。一共有两种队列， <strong>串行队列</strong> 和 <strong>并行队列</strong>。</p><p>队列**：用于存放任务。一共有两种队列， <strong>串行队列</strong> 和 <strong>并行队列</strong>。</p><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>同步</td><td>完成需要做的任务后才会返回，进行下一任务(“任务”，在 GCD 里指的是 Block；在 performSelector 方法中，对应 selector 方法。同步方法，功能类似 <code>dispatch_group_wait</code> ，而 group 指的是所有线程，包括主线程。)</td></tr><tr><td>异步</td><td>不会等待任务完成才返回，会立即返回。(异步是多线程的代名词，因为必定会开启新的线程，线程的申请是由异步负责，起到开分支的作用。)</td></tr><tr><td>串行队列</td><td>任务依次执行(同一时间队列中只有一个任务在执行，每个任务只有在前一个任务执行完成后才能开始执行。)</td></tr><tr><td>并行队列</td><td>任务并发执行(你唯一能保证的是，这些任务会按照被添加的顺序开始执行。但是任务可以以任何顺序完成)</td></tr><tr><td>全局队列</td><td>隶属于并行队列,不要与 barrier 栅栏方法搭配使用， barrier 只有与自定义的并行队列一起使用，才能让 barrier 达到我们所期望的栅栏功能。与 串行队列或者 global 队列 一起使用，barrier 的表现会和 dispatch_sync 方法一样。</td></tr><tr><td>主队列</td><td>隶属于串行队列,不能与 sync 同步方法搭配使用，会造成死循环（ 主队列是GCD自带的一种特殊的串行队列，放在主队列中的任务，都会放到主线程中执行）</td></tr></tbody></table><p><strong>自定义队列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Serial Dispatch Queue:串行调度队列</span><br><span class="line">Concurrent Dispatch Queue:并发调度队列</span><br><span class="line">Serial:串行 Concurrent:同时   并发:Concurrency  并行:Parallelism</span><br></pre></td></tr></table></figure><p>并发和并行都是指多个任务可以同时执行，都属于多线程编程概念，因此二者必然十分相近，容易混淆。二者区别只有一点，即是否多任务执行于严格的同一时刻。并发不是，并行是。</p><table><thead><tr><th>说明</th><th>Dispatch Queue分类</th></tr></thead><tbody><tr><td>串行的队列，每次只能执行一个任务，并且必须等待前一个执行任务完成</td><td>Serial Dispatch Queue</td></tr><tr><td>一次可以并发执行多个任务，不必等待执行中的任务完成</td><td>Concurrent Dispatch Queue</td></tr></tbody></table><table><thead><tr><th></th><th>同步执行</th><th>异步执行</th></tr></thead><tbody><tr><td>串行队列</td><td>当前线程，一个一个执行( 不会新建线程)</td><td>其他线程，一个一个执行, 每次使用 createDispatch 方法就会新建一条线程, 多条线程间会并行执行</td></tr><tr><td>并发队列</td><td>当前线程，一个一个执行( 不会新建线程)</td><td>开很多线程，一起执行( iOS7-SDK 时代一般是5、6条， iOS8-SDK 以后可以50、60条)</td></tr></tbody></table><p><a href="https://www.zhihu.com/question/33515481">并发与并行的区别？</a></p><p>GCD使用步骤：</p><ol><li>定制任务<br>确定想做的事情，在 GCD 里指的是 Block</li><li>将任务添加到队列中<br>GCD会自动将队列中的任务取出，放到对应的线程中执行<br>任务的取出遵循队列的FIFO原则：先进先出，后进后出</li></ol><h3 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h3><p>iOS 中, 队列主要分为:</p><ul><li><p>全局队列(dispatch_get_main_queue)</p></li><li><p>主队列(dispatch_get_global_queue)</p></li><li><p>自定义队列(dispatch_queue_create)</p><p>①串行队列(dispatch_queue_create-DISPATCH_QUEUE_SERIAL)</p><p>②并发队列(dispatch_queue_create-DISPATCH_QUEUE_CONCURRENT)</p></li></ul><h5 id="1、主队列-串行队列"><a href="#1、主队列-串行队列" class="headerlink" title="1、主队列(串行队列)"></a>1、主队列(串行队列)</h5><p>它用于刷新 UI，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_main_queue;</span><br></pre></td></tr></table></figure><h5 id="2、全局并行队列"><a href="#2、全局并行队列" class="headerlink" title="2、全局并行队列"></a>2、全局并行队列</h5><p>只要是并行任务一般都加入到这个队列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br></pre></td></tr></table></figure><h5 id="3、自定义队列"><a href="#3、自定义队列" class="headerlink" title="3、自定义队列"></a>3、自定义队列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//串行队列</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.gcd.serialQueue&quot;, NULL);</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.gcd.serialQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"></span><br><span class="line">//并发(行)队列</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.gcd.conQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><ul><li>分为同步任务和异步任务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//串行</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;serial_queue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">//并发</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;serial_queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">//同步</span><br><span class="line">dispatch_sync(queue, ^&#123;</span><br><span class="line">  NSLog(@&quot;%@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//异步</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">   NSLog(@&quot;%@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h4><p>NSOperation 是苹果公司对 GCD 的封装，完全面向对象，<code>NSOperation</code> 和 <code>NSOperationQueue</code> 分别对应 GCD 的任务和队列 。操作步骤也很好理解：</p><ul><li><p>①将要执行的任务封装到一个 NSOperation 对象中。</p></li><li><p>②将此任务添加到一个 NSOperationQueue 对象中。</p></li></ul><p>NSOperation 只是一个抽象类，所以不能封装任务。但它有 2 个子类用于封装任务。分别是：<code>NSInvocationOperation</code> 和 <code>NSBlockOperation</code> 。创建一个 Operation 后，需要调用 start 方法来启动任务，它会 默认在当前队列同步执行。当然你也可以在中途取消一个任务，只需要调用其 <code>cancel</code>方法即可。</p><figure class="highlight plaintext"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//1.创建NSInvocationOperation对象</span><br><span class="line">NSInvocationOperation *operation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class="line"></span><br><span class="line">//2.开始执行</span><br><span class="line">[operation start];</span><br><span class="line"></span><br><span class="line">//1.创建NSBlockOperation对象</span><br><span class="line">NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">//2.开始任务</span><br><span class="line">[operation start];</span><br></pre></td></tr></table></figure><h5 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h5><p>NSOperationQueue是对GCD的objectivec封装，相对于GCD具有更多先进的特性，如可以添加NSOperation依赖，取消NSOperation等。</p><p>NSOperationQueue是并发队列，且不遵循先进先出FIFO排序原则。</p><h3 id="两种队列-NSOperation"><a href="#两种队列-NSOperation" class="headerlink" title="两种队列(NSOperation)"></a>两种队列(NSOperation)</h3><p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  //主队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init]; //自定义队列</span><br><span class="line"></span><br><span class="line">//添加一个NSOperation</span><br><span class="line">[queue addOperation:operation]</span><br><span class="line"></span><br><span class="line">//添加一组NSOperation</span><br><span class="line">[queue addOperations:operations waitUntilFinished:NO</span><br><span class="line"></span><br><span class="line">//添加一个block形式的Operation</span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">    //执行一个Block的操作</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[queue setMaxConcurrentOperationCount:1];</span><br><span class="line"></span><br><span class="line">//单个NSOperation取消</span><br><span class="line">[operation cancel]</span><br><span class="line"></span><br><span class="line">//取消NSOperationQueue中的所有操作</span><br><span class="line">[queue cancelAllOperations]</span><br><span class="line"></span><br><span class="line">// 暂停queue</span><br><span class="line">[queue setSuspended:YES];</span><br></pre></td></tr></table></figure><p>NSOperation 有一个非常实用的功能，那就是添加依赖。比如有 3 个任务：A: 从服务器上下载一张图片，B：给这张图片加个水印，C：把图片返回给服务器。这时就可以用到依赖了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//1.任务一：下载图片</span><br><span class="line">NSBlockOperation *operation1 = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">    NSLog(@&quot;下载图片 - %@&quot;, [NSThread currentThread]);</span><br><span class="line">    [NSThread sleepForTimeInterval:1.0];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">//2.任务二：打水印</span><br><span class="line">NSBlockOperation *operation2 = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">    NSLog(@&quot;打水印   - %@&quot;, [NSThread currentThread]);</span><br><span class="line">    [NSThread sleepForTimeInterval:1.0];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">//3.任务三：上传图片</span><br><span class="line">NSBlockOperation *operation3 = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">    NSLog(@&quot;上传图片 - %@&quot;, [NSThread currentThread]);</span><br><span class="line">    [NSThread sleepForTimeInterval:1.0];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">//4.设置依赖</span><br><span class="line">[operation2 addDependency:operation1];      //任务二依赖任务一</span><br><span class="line">[operation3 addDependency:operation2];      //任务三依赖任务二</span><br><span class="line"></span><br><span class="line">//5.创建队列并加入任务</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class="line">[queue addOperations:@[operation3, operation2, operation1] waitUntilFinished:NO];</span><br></pre></td></tr></table></figure><p><a href="http://jumpingfrog0.github.io/2017/2017-04-20-iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/">http://jumpingfrog0.github.io/2017/2017-04-20-iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</a></p><p><a href="https://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/">https://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/</a></p><p><a href="http://www.cnblogs.com/kenshincui/p/3983982.html">iOS开发系列–并行开发其实很容易</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS中Class相关方法区别</title>
      <link href="/2018/03/23/iOS%E4%B8%ADClass%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/03/23/iOS%E4%B8%ADClass%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h5 id="一、isKindOfClass、isMemberOfClass和isSubclassOfClass区别"><a href="#一、isKindOfClass、isMemberOfClass和isSubclassOfClass区别" class="headerlink" title="一、isKindOfClass、isMemberOfClass和isSubclassOfClass区别"></a>一、<code>isKindOfClass</code>、<code>isMemberOfClass</code>和<code>isSubclassOfClass</code>区别</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先申明 四个类 A-&gt;B-&gt;C-&gt;D ，继承关系 A继承B,B继承C，C继承D。即D是最顶层的父类，A是最基层的子类。</span><br><span class="line">A *a = [[A alloc]init];</span><br><span class="line"><span class="number">2.</span>isKindOfClass(对象方法)</span><br><span class="line">[a  isKindOfClass:[A <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[a  isKindOfClass:[B <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[a  isKindOfClass:[C <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[a  isKindOfClass:[D <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>isMemberOfClass(对象方法)</span><br><span class="line">[a  isMemberOfClass:[A <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[a  isMemberOfClass:[B <span class="keyword">class</span>]]  <span class="comment">//return NO</span></span><br><span class="line">[a  isMemberOfClass:[C <span class="keyword">class</span>]]  <span class="comment">//return NO</span></span><br><span class="line">[a  isMemberOfClass:[D <span class="keyword">class</span>]]  <span class="comment">//return NO</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>isSubclassOfClass(类方法)</span><br><span class="line">[A  isSubclassOfClass:[A <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[A  isSubclassOfClass:[B <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[A  isSubclassOfClass:[C <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br><span class="line">[A  isSubclassOfClass:[D <span class="keyword">class</span>]]  <span class="comment">//return YES</span></span><br></pre></td></tr></table></figure><p>总结:isKindOfClass:确定一个对象是否是一个类的成员,或者是派生自该类的成员.(判断是否是这个类或者这个类的子类的实例)</p><pre><code> isMemberOfClass:确定一个对象是否是当前类的成员.(判断是否是这个类的实例)</code></pre><h5 id="二、object-getClass-obj-与-obj-class-区别"><a href="#二、object-getClass-obj-与-obj-class-区别" class="headerlink" title="二、object_getClass(obj)与[obj class]区别"></a>二、<code>object_getClass(obj)</code>与<code>[obj class]</code>区别</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> testClassdifference()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//obj为实例变量</span></span><br><span class="line">    <span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> new];</span><br><span class="line">    Class cls = object_getClass(obj);</span><br><span class="line">    Class cls2 = [obj <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;实例对象：%p-%p&quot;</span> , cls,cls2); <span class="comment">//实例对象：0x107173ea8-0x107173ea8</span></span><br><span class="line">    <span class="comment">//结论：当obj为实例变量时，object_getClass(obj)与[obj class]输出结果一直，均获得isa指针，即指向类对象的指针。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//classObj为类对象</span></span><br><span class="line">    Class classObj = [obj <span class="keyword">class</span>];</span><br><span class="line">    Class cls3 = object_getClass(classObj);</span><br><span class="line">    Class cls4 = [classObj <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;类对象：%p-%p&quot;</span>,cls3,cls4);<span class="comment">//类对象：0x107173e58-0x107173ea8</span></span><br><span class="line">    <span class="comment">//结论：当obj为类对象时，object_getClass(obj)返回类对象中的isa指针，即指向元类对象的指针；[obj class]返回的则是其本身。</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//metaClassObj为元类对象</span></span><br><span class="line">    Class metaClassObj = object_getClass(classObj);</span><br><span class="line">    Class cls5 = object_getClass(metaClassObj);</span><br><span class="line">    Class cls6 = [metaClassObj <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;元类对象：%p-%p&quot;</span>,cls5,cls6);<span class="comment">//元类对象：0x107173e58-0x107173e58</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结论：当obj为Metaclass（元类）对象时，object_getClass(obj)返回元类对象中的isa指针，因为元类对象的isa指针指向根类，所有返回的是根类对象的地址指针；[obj class]返回的则是其本身。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//rootClassObj为元类对象</span></span><br><span class="line">    Class rootClassObj = object_getClass(metaClassObj);</span><br><span class="line">    Class cls7 = object_getClass(rootClassObj);</span><br><span class="line">    Class cls8 = [rootClassObj <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Root元类对象：%p-%p&quot;</span>,cls7,cls8);<span class="comment">//Root元类对象：0x107173e58-0x107173e58</span></span><br><span class="line">    <span class="comment">//结论：当obj为Rootclass（元类）对象时，object_getClass(obj)返回根类对象中的isa指针，因为跟类对象的isa指针指向Rootclass‘s metaclass(根元类)，即返回的是根元类的地址指针；[obj class]返回的则是其本身。因为根类的isa指针其实是指向本身的，所有根元类其实就是根类，所有输出的结果是一样的。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息：</span></span><br><span class="line">iOSInterview[<span class="number">8880</span>:<span class="number">1076288</span>] 实例对象：<span class="number">0x107173ea8</span><span class="number">-0x107173ea8</span></span><br><span class="line">iOSInterview[<span class="number">8880</span>:<span class="number">1076288</span>] 类对象：<span class="number">0x107173e58</span><span class="number">-0x107173ea8</span></span><br><span class="line">iOSInterview[<span class="number">8880</span>:<span class="number">1076288</span>] 元类对象：<span class="number">0x107173e58</span><span class="number">-0x107173e58</span></span><br><span class="line">iOSInterview[<span class="number">8880</span>:<span class="number">1076288</span>] Root元类对象：<span class="number">0x107173e58</span><span class="number">-0x107173e58</span></span><br></pre></td></tr></table></figure><p>  总：<code>object_getClass</code>(obj)返回的是obj中的isa指针；<br>  <code>[obj class]</code>则分两种情况：</p><ul><li><p>一是当obj为实例对象时，<code>[obj class]中class</code>是实例方法：- (Class)class，返回的obj对象中的isa指针,也即其本身；</p></li><li><p>二是当obj为类对象（包括元类和根类以及根元类）时，调用的是类方法：+ (Class)class，返回的结果为其本身</p><p>​</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KVO原理及实现</title>
      <link href="/2018/03/22/KVO%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/03/22/KVO%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>KVO的实现原理简述：<br>​当一个类的属性被观察的时候，系统会通过runtime动态的创建一个该类的派生类<strong>NSKVONotifying_A</strong>，并且会在这个类中重写基类被观察的属性的setter方法，而且系统将这个类的isa指针(<code>object_getClass(obj)</code>)指向了派生类，从而实现了给监听的属性赋值时调用的是派生类的setter方法。重写的setter方法会在调用原setter方法前后，通知观察对象值得改变。</p><p>Person.h</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)    <span class="built_in">NSString</span> *userName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)  <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)  <span class="built_in">CGFloat</span> height;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动触发KVO</span></span><br><span class="line">-(<span class="type">void</span>)manualTriggerKVO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>Person.m</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  如果重写，这两个方法，kvo就失效了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//- (void)willChangeValueForKey:(NSString *)key&#123;</span></span><br><span class="line"><span class="comment">//    NSLog(@&quot;willChangeValueForKey&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//- (void)didChangeValueForKey:(NSString *)key&#123;</span></span><br><span class="line"><span class="comment">//    NSLog(@&quot;didChangeValueForKey&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">-(<span class="type">void</span>)manualTriggerKVO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//“手动触发userName的KVO”，必写。</span></span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@&quot;userName&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “手动触发userName的KVO”，必写。</span></span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@&quot;userName&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//options属性改变change的值，这个是观察者要实现的方法。</span></span><br><span class="line">- (<span class="type">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="type">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="type">id</span>&gt; *)change context:(<span class="type">void</span> *)context&#123;</span><br><span class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@&quot;age&quot;</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@:%@&quot;</span>,<span class="keyword">self</span>.class,change);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view from its nib.</span></span><br><span class="line">    Person* one = [Person new];</span><br><span class="line">    Person* two = [Person new];</span><br><span class="line">    Person* three = [Person new];</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;注册观察者之前\n&quot;</span>);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;one&quot;</span>,one);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;two&quot;</span>,two);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;three&quot;</span>,three);</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;one&quot;</span>,one, <span class="keyword">@selector</span>(setUserName:));</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;two&quot;</span>,two, <span class="keyword">@selector</span>(setUserName:));</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;three&quot;</span>,three, <span class="keyword">@selector</span>(setUserName:));</span><br><span class="line"></span><br><span class="line">    [one addObserver:one forKeyPath:<span class="string">@&quot;age&quot;</span></span><br><span class="line">             options:<span class="built_in">NSKeyValueObservingOptionNew</span></span><br><span class="line">             context:<span class="literal">nil</span>];</span><br><span class="line">    [two addObserver:two forKeyPath:<span class="string">@&quot;height&quot;</span></span><br><span class="line">             options:<span class="built_in">NSKeyValueObservingOptionNew</span></span><br><span class="line">             context:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;注册观察者之后\n&quot;</span>);</span><br><span class="line">    Class cls=  object_getClass(one);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;\n\t父类：%@&quot;</span>,cls.superclass);</span><br><span class="line"></span><br><span class="line">    PrintDescription(<span class="string">@&quot;one&quot;</span>,one);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;two&quot;</span>,two);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;three&quot;</span>,three);</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;one&quot;</span>,one, <span class="keyword">@selector</span>(setAge:));</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;two&quot;</span>,two, <span class="keyword">@selector</span>(setAge:));</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;three&quot;</span>,three, <span class="keyword">@selector</span>(setAge:));</span><br><span class="line"></span><br><span class="line">    one.age=<span class="number">18</span>;</span><br><span class="line">    two.age=<span class="number">25</span>;</span><br><span class="line">    three.age=<span class="number">43</span>;</span><br><span class="line">    printf(<span class="string">&quot;赋值观察者之后\n&quot;</span>);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;one&quot;</span>,one);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;two&quot;</span>,two);</span><br><span class="line">    PrintDescription(<span class="string">@&quot;three&quot;</span>,three);</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;one&quot;</span>,one, <span class="keyword">@selector</span>(setAge:));</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;two&quot;</span>,two, <span class="keyword">@selector</span>(setAge:));</span><br><span class="line">    PrintMethodImp(<span class="string">@&quot;three&quot;</span>,three, <span class="keyword">@selector</span>(setAge:));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark--打印函数</span></span><br><span class="line"><span class="comment">/** 获取类的方法列表*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSArray</span> *classMethodList(Class aclass) &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span>* array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Method* methodList = class_copyMethodList(aclass, &amp;count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        SEL sel = method_getName(*(methodList+i));</span><br><span class="line">        [array addObject:<span class="built_in">NSStringFromSelector</span>(sel)];</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 打印对象的信息*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> *PrintDescription(<span class="built_in">NSString</span> *name,<span class="type">id</span> obj) &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;\t%@:%@\n\t表面的类: %@\n\t真实类型: %@\n\t方法列表: %@\n\t方法列表2: %@\n&quot;</span>,</span><br><span class="line">                        name,</span><br><span class="line">                        obj,</span><br><span class="line">                        [obj <span class="keyword">class</span>],</span><br><span class="line">                        object_getClass(obj),</span><br><span class="line">                        [classMethodList(object_getClass(obj)) componentsJoinedByString:<span class="string">@&quot;,&quot;</span>],</span><br><span class="line">                        [classMethodList([obj <span class="keyword">class</span>]) componentsJoinedByString:<span class="string">@&quot;,&quot;</span>]</span><br><span class="line">                        ];</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;%s\n&quot;</span>, [string UTF8String]);</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 打印方法方法实现指针*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">void</span> PrintMethodImp(<span class="built_in">NSString</span> *name,<span class="type">id</span> cls,SEL  sel)</span><br><span class="line">&#123;</span><br><span class="line">    IMP imp1 =class_getMethodImplementation([cls <span class="keyword">class</span>],sel);</span><br><span class="line">    IMP imp11 =class_getMethodImplementation(object_getClass(cls),sel);</span><br><span class="line">    <span class="built_in">NSString</span> *selName=<span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">    printf(<span class="string">&quot;%s方法名%s：Class=%p subClass:%p\n&quot;</span>,[name  UTF8String],[selName  UTF8String],imp1,imp11);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">注册观察者之前</span><br><span class="line">one:&lt;Person: 0x60000002a8a0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: Person</span><br><span class="line">方法列表: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">two:&lt;Person: 0x6000000296c0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: Person</span><br><span class="line">方法列表: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">three:&lt;Person: 0x60000002fae0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: Person</span><br><span class="line">方法列表: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">one方法名setUserName:：Class=0x10f528710 subClass:0x10f528710</span><br><span class="line">two方法名setUserName:：Class=0x10f528710 subClass:0x10f528710</span><br><span class="line">three方法名setUserName:：Class=0x10f528710 subClass:0x10f528710</span><br><span class="line">注册观察者之后</span><br><span class="line">2018-03-26 11:00:57.025622+0800 iOSInterview[3214:356624]</span><br><span class="line">父类：Person</span><br><span class="line">one:&lt;Person: 0x60000002a8a0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: NSKVONotifying_Person</span><br><span class="line">方法列表: setHeight:,setAge:,setUserName:,class,dealloc,_isKVOA</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">two:&lt;Person: 0x6000000296c0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: NSKVONotifying_Person</span><br><span class="line">方法列表: setHeight:,setAge:,setUserName:,class,dealloc,_isKVOA</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">three:&lt;Person: 0x60000002fae0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: Person</span><br><span class="line">方法列表: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">one方法名setAge:：Class=0x10f528770 subClass:0x10f886106</span><br><span class="line">two方法名setAge:：Class=0x10f528770 subClass:0x10f886106</span><br><span class="line">three方法名setAge:：Class=0x10f528770 subClass:0x10f528770</span><br><span class="line">2018-03-26 11:00:57.026266+0800 iOSInterview[3214:356624] Person:&#123;</span><br><span class="line">    kind = 1;</span><br><span class="line">    new = 18;</span><br><span class="line">&#125;</span><br><span class="line">赋值观察者之后</span><br><span class="line">one:&lt;Person: 0x60000002a8a0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: NSKVONotifying_Person</span><br><span class="line">方法列表: setHeight:,setAge:,setUserName:,class,dealloc,_isKVOA</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">two:&lt;Person: 0x6000000296c0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: NSKVONotifying_Person</span><br><span class="line">方法列表: setHeight:,setAge:,setUserName:,class,dealloc,_isKVOA</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">three:&lt;Person: 0x60000002fae0&gt;</span><br><span class="line">表面的类: Person</span><br><span class="line">真实类型: Person</span><br><span class="line">方法列表: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line">方法列表2: setUserName:,userName,.cxx_destruct,printInfo,observeValueForKeyPath:ofObject:change:context:,height,setHeight:,setAge:,age</span><br><span class="line"></span><br><span class="line">one方法名setAge:：Class=0x10f528770 subClass:0x10f886106</span><br><span class="line">two方法名setAge:：Class=0x10f528770 subClass:0x10f886106</span><br><span class="line">three方法名setAge:：Class=0x10f528770 subClass:0x10f528770</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1、在未添加观察者之前，运行时的类和对象本身的类是一样的。添加KVO后生成NSKVONotifying_Person类，打印NSKVONotifying_Person父类(superclass)为Person，表明<strong>NSKVONotifying_A</strong>为<strong>A</strong>的派生类。</p><p>2、打印方法列表，one,two<code>[obj class]</code>与<code>object_getClass(obj)</code>的方法列表不同，而没有监听属性的three一切正常。可以看到注册KVO后isa指针(<code>object_getClass(obj</code>)对象为NSKVONotifying_Person，并重写了了setHeight，setAge等setter方法,从而利用<code>willChangeValueForKey</code>与<code>didChangevlueForKey</code> 来激活键值通知机制。</p><p>Apple 使用了 isa 混写（isa-swizzling）来实现 KVO 。当观察对象A时，KVO机制动态创建一个新的名为：<strong>NSKVONotifying_A</strong> 的新类，该类继承自对象A的本类，且 KVO 为 <strong>NSKVONotifying_A</strong> 重写观察属性的 setter 方法，setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象属性值的更改情况。</p><p>（备注： isa 混写（isa-swizzling）isa：is a kind of ； swizzling：混合，搅合；）</p><p>KVO 的键值观察通知依赖于 NSObject 的两个方法:<code>willChangeValueForKey</code>:和 <code>didChangevlueForKey</code>:，在存取数值的前后分别调用。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS逆向工程</title>
      <link href="/2018/03/22/iOS%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
      <url>/2018/03/22/iOS%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="http://iosre.com/">http://iosre.com/</a></p><p><a href="https://www.informationsecuritybuzz.com/articles/best-ios-reverse-engineering-tools/">最好的iOS逆向工程工具</a></p><p><a href="https://github.com/Hack-with-Github/Awesome-Hacking">https://github.com/Hack-with-Github/Awesome-Hacking</a></p><ul><li>逆向：关于逆向的图书、培训、实战、工具等<br><a href="https://github.com/tylerhalfpop/awesome-reversing">https://github.com/tylerhalfpop/awesome-reversing</a></li><li><a href="https://github.com/ashishb/osx-and-ios-security-awesome">https://github.com/ashishb/osx-and-ios-security-awesome</a></li><li><a href="https://niyaoyao.github.io/2017/05/09/Learning-Reverse-From-Today-D4/">https://niyaoyao.github.io/2017/05/09/Learning-Reverse-From-Today-D4/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS版本新特性(持续更新)</title>
      <link href="/2018/03/22/iOS%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2018/03/22/iOS%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>iOS7~最新版SDK 版本新特性</p><p><a href="https://onevcat.com/">https://onevcat.com</a></p><p><a href="https://onevcat.com/2013/06/developer-should-know-about-ios7/">开发者所需要知道的iOS7 SDK新特性</a><br><a href="https://onevcat.com/2014/07/developer-should-know-about-ios8/">开发者所需要知道的 iOS8 SDK 新特性</a><br><a href="https://onevcat.com/2015/06/ios9-sdk/">开发者所需要知道的 iOS 9 SDK 新特性</a><br><a href="https://onevcat.com/2016/06/ios-10-sdk/">开发者所需要知道的 iOS 10 SDK 新特性</a></p><p><strong>iOS 10</strong><br>SiriKit：仅限于几类应用（语音和视频通话、发送消息、发送或接收付款、搜索照片、约车、管理健身）<br>全新框架UserNotification.framework：统一了LocalNotification和PushNotification的处理方式<br>iMessage App<br>Xcode 8：View Debugging和Memory Debugging<br>Swift 3<br>NSAllowsArbitraryLoadsInWebContent<br>新的openURL:options:completionHandler:<br>方法替代openURL:</p><p>UICollectionViewDataSourcePrefetching</p><p>IDFA的变化：用户关闭广告追踪，返回00000000-0000-0000-0000-000000000000</p><p><strong>iOS 9</strong><br>iPad设备多任务：分屏、画中画等<br>watchOS 2<br>UI Test<br>Swift 2<br>App Thinning: asset Catalog，App会自行选择下载适合用户设备的一套资源<br>Bitcode：后续编译器更新时，代码会由Appstore自动编译优化<br>个人开发者可以将APP部署到自己的真机上调试了<br>3D Touch<br>内容搜索：spotlight、markup web content、NSUserActivity</p><p>ATS：从iOS 9开始默认开启对HTTPS的支持<br>Contacts.framework和ContactsUI.framework<br>NSURLConnection正式deprecated，替换为NSURLSession</p><p><strong>iOS 8</strong><br>App Extensions<br>可以使用Touch ID<br>验证身份<br>HealthKit<br>HomeKit<br>Handoff<br>Size Class<br>CoreLocation：引入了室内定位和重大位置改变服务<br>UIAlertController代替UIAlertView和UIActionSheet<br>注册Notification的方式发生变化<br>UIPresentationController<br>引入WKWebView</p><p><strong>iOS 7</strong><br>UI重新设计<br>TextKit<br>64位支持<br>新的后台任务<br>UIActivityViewController<br>边缘侧滑手势<br>CoreLocation引入区域监控（iBeacon）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON转模型工具(Mac)</title>
      <link href="/2018/03/19/Mac%E5%AD%97%E5%85%B8%E8%BD%AC%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/03/19/Mac%E5%AD%97%E5%85%B8%E8%BD%AC%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>​        工欲善其事，必先利其器，要想不加班、少加班，进行高效率工作，开发辅助工具是必不可少的。JSONToModel就是这样一款将JSON字符转换成model代码的开源工具。虽然网上有很多类似工具，但有个共同特点就是没有代码高亮，不美观，有的不支持网络请求将直接JSON数据生成模型代码。   </p><p>​ 其实整个工程主要技术要点在于如何使用Textkit进行代码高亮，模型生成功能就百来行代码，更像一个附加功能，但基本能满足正常开发需求。</p><h4 id="功能及技术点："><a href="#功能及技术点：" class="headerlink" title="功能及技术点："></a>功能及技术点：</h4><h5 id="一、字典转模型代码"><a href="#一、字典转模型代码" class="headerlink" title="一、字典转模型代码"></a>一、字典转模型代码</h5><ul><li>对粘贴JSON字符进行空格过滤处理，减少出现JSON数据不合法情况</li><li>支持网络请求JSON数据进行模型转换</li></ul><h5 id="二、代码高亮"><a href="#二、代码高亮" class="headerlink" title="二、代码高亮"></a>二、代码高亮</h5><ul><li><p>使用正则匹配关键词进行代码高亮</p></li><li><p>使用<a href="https://highlightjs.org/">highlight.js</a>js库进行代码高亮</p><p>正则匹配与js库2种方式进行进行代码高亮，JavaScript有很多优秀的代码高亮库，以后用到代码高亮功能可以直接用js库来处理，在高亮效率，支持语言数量上都是一个不错的选择。</p><p>​</p><p>具体实现移步代码：<a href="https://github.com/huluo666/JSONToModel">JSONToModel</a> </p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4></li></ul><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20180319_143233.png" alt="UC20180319_143058.png"></p><h4 id="BugFIX："><a href="#BugFIX：" class="headerlink" title="BugFIX："></a>BugFIX：</h4><p>使用TextKit进行代码高亮时，在iOS上正常，但在Mac OSX上会出现光标错位情况</p><p><a href="https://stackoverflow.com/questions/35522394/nstextstorage-syntax-markdown">https://stackoverflow.com/questions/35522394/nstextstorage-syntax-markdown</a></p><p><a href="http://christiantietze.de/posts/2017/11/syntax-highlight-nstextstorage-insertion-point-change/">Why the Selection Changes When You Do Syntax Highlighting in a NSTextView and What You Can Do About It</a></p><h4 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks:"></a>Thanks:</h4><p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a></p><p><a href="https://github.com/CoderMJLee/MJExtension">MJExtension</a></p><p><a href="https://github.com/yichizhang/NSTextView-LineNumberView">NSTextView-LineNumberView</a></p><p><a href="https://highlightjs.org/">highlightjs</a></p><h4 id="下版本功能："><a href="#下版本功能：" class="headerlink" title="下版本功能："></a>下版本功能：</h4><p>1、支持Swift模型代码生成</p><p>2、支持GET参数请求，支持POST请求</p><p>3、敬请期待</p><p>**Github:**<a href="https://github.com/huluo666/JSONToModel">https://github.com/huluo666/JSONToModel</a></p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://github.com/objcio/issue-5-textkit">https://github.com/objcio/issue-5-textkit</a></p><p><a href="https://github.com/objcio/S01E91-rendering-markdown-with-syntax-highlighting">https://github.com/objcio/S01E91-rendering-markdown-with-syntax-highlighting</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS转JSON</title>
      <link href="/2018/03/19/CSS%E8%BD%ACJSON/"/>
      <url>/2018/03/19/CSS%E8%BD%ACJSON/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="UTF-8"><title></title><link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"><script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"></script><script src="http://bililite.com/inc/jquery.parsecss.js"></script></head><body><style>.comments {width:100%;/*自动适应父布局宽度*/overflow:auto;word-break:break-all;}</style><div class="container-fluid"><br><center><title2>CSS转JSON</title2></center><a href="http://huluo666.cn/2017/08/02/%E4%BD%BF%E7%94%A8%20CSSJSON%20Converts%20CSS%20to%20JSON/">iOS使用js库实现css转换json</a><br>发现使用CSSToJSON这个js库转换后会出现转换空值问题，所以使用parsecss.js这个jquery插件来转换<br>用途：<br>CSS里面包含字体，颜色值... 将其转换为JSON供App使用<br><a href="https://cdn.bootcss.com/highlight.js/9.12.0/styles/xcode.min.css">Test CSS Code</a><br></div><div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --><textarea rows="10" cols="100" id="csscode" class="comments"></textarea></div><div class="container-fluid"><center><button type="button" class="btn btn-primary" id="parsecss">ParseCSS</button></center></div><div class="container-fluid"> <br> <pre><code id="jsoncode"></code></pre> </div><script>$(document).ready(function(){function convertCSSToJSON(cssStr) {$.parsecss(cssStr, function(css) {var jsonStr = JSON.stringify(css, null, 2); // spacing level = 2console.log("jsonStr"+jsonStr);$("#jsoncode").text(jsonStr);});}$('#parsecss').click(function(){varcssStr = $('#csscode').val(); // 欲处理的文本  console.log("parsed"+cssStr);convertCSSToJSON(cssStr);});$('#styles').text($('style').map(function(){return this.innerHTML}).get().join(''));});</script></body></html>]]></content>
      
      
      <categories>
          
          <category> devtools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动开发-Weex与React Native</title>
      <link href="/2018/03/19/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91-Weex%E4%B8%8EReact%20Native/"/>
      <url>/2018/03/19/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91-Weex%E4%B8%8EReact%20Native/</url>
      
        <content type="html"><![CDATA[<h3 id="weex"><a href="#weex" class="headerlink" title="weex"></a>weex</h3><p>官方文档 <a href="https://weex.incubator.apache.org/cn/guide/">https://weex.incubator.apache.org/cn/guide/</a></p><p><a href="https://github.com/joggerplus/awesome-weex">https://github.com/joggerplus/awesome-weex</a></p><p><a href="https://github.com/topics/weex">https://github.com/topics/weex</a></p><h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React-Native"></a>React-Native</h3><p>React-Native中文网 <a href="https://reactnative.cn/">https://reactnative.cn/</a></p><p><a href="https://github.com/jondot/awesome-react-native">https://github.com/jondot/awesome-react-native</a></p><p><a href="https://github.com/crazycodeboy/react-native-awesome">https://github.com/crazycodeboy/react-native-awesome</a></p><p><a href="https://github.com/wabg/awesome-react-native">https://github.com/wabg/awesome-react-native</a></p><p><a href="https://github.com/reactnativecn/react-native-guide">https://github.com/reactnativecn/react-native-guide</a></p><p><a href="https://github.com/prscX/awesome-react-native-native-modules">https://github.com/prscX/awesome-react-native-native-modules</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用在线工具</title>
      <link href="/2018/03/16/%E5%B8%B8%E7%94%A8%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/03/16/%E5%B8%B8%E7%94%A8%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>RGB-Hex 转换 预览颜色</p><p><a href="https://www.webpagefx.com/web-design/hex-to-rgb/">https://www.webpagefx.com/web-design/hex-to-rgb/</a></p><p><a href="https://www.json.cn/">json.cn</a>  JSON格式化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NSTextView使用TextKit进行语法高亮</title>
      <link href="/2018/03/14/NSTextView%E4%BD%BF%E7%94%A8TextKit%E8%BF%9B%E8%A1%8C%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE/"/>
      <url>/2018/03/14/NSTextView%E4%BD%BF%E7%94%A8TextKit%E8%BF%9B%E8%A1%8C%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<p>NStextView使用textkit用法与iOS 基本相同，使用参考obj.io相关文章<br><a href="https://www.objc.io/issues/5-ios7/getting-to-know-textkit/">https://www.objc.io/issues/5-ios7/getting-to-know-textkit/</a><br><a href="https://github.com/objcio/issue-5-textkit">https://github.com/objcio/issue-5-textkit</a><br>Rendering Markdown with Syntax Highlighting<br><a href="https://github.com/objcio/S01E91-rendering-markdown-with-syntax-highlighting">https://github.com/objcio/S01E91-rendering-markdown-with-syntax-highlighting</a></p><p><strong>Mac下使用Textkit存在的一些问题</strong></p><p>在对文字进行高亮时，如果用户在句中或句头进行编辑，鼠标位置会发生改变<br>解决参考方案<br><a href="https://stackoverflow.com/questions/35522394/nstextstorage-syntax-markdown">https://stackoverflow.com/questions/35522394/nstextstorage-syntax-markdown</a></p><p><a href="http://christiantietze.de/posts/2017/11/syntax-highlight-nstextstorage-insertion-point-change/">Why the Selection Changes When You Do Syntax Highlighting in a NSTextView and What You Can Do About It</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>显示&#92;n&#92;t等转义符格式文本内容</title>
      <link href="/2018/03/07/showEscape/"/>
      <url>/2018/03/07/showEscape/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-cn"><head><meta charset="utf-8"><meta name="author" content="http://www.softwhy.com/" /><title>显示文本内容格式</title><script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"></script><link href="https://cdn.bootcss.com/Dropify/0.2.2/css/dropify.min.css" rel="stylesheet"><script src="https://cdn.bootcss.com/Dropify/0.2.2/js/dropify.min.js"></script><script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"></script><link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"></head><body><script>window.onload = function () {var input = document.getElementById("dropifyfile");input.onchange = function () {var file = this.files[0];if (!!file) {//读取本地文件，以UTF-8编码方式输出var reader = new FileReader();reader.readAsText(file,"utf-8");reader.onload = function () {var string=JSON.stringify(this.result);console.log(string);$("#mycode").text(string);}}}}</script><div class="container-fluid"><br>拖放文本文件到下方区域，显示含有转义符文本内容<br>用途：<br>显示文本中的格式符如\n,\t，一般编辑器不可见<br>将格式化的JSON字符串保存到plist，JSON等文件中，然后取出能够还原能保持原有代码格式<br></div><!--dropify插件  --><div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --><input type="file" class="dropify" id="dropifyfile" data-max-file-size="10M"/></div><div class="container-fluid"> <br> <pre><code id="mycode"></code></pre> </div><script>$(document).ready(function(){// Translated$('.dropify').dropify({messages: {default: '点击或拖拽文件到这里',replace: '点击或拖拽文件到这里来替换文件',remove:  '移除文件',error:   '对不起，你上传的文件太大了'}});// Used eventsvar drEvent = $('#input-file-events').dropify();drEvent.on('dropify.beforeClear', function(event, element){return confirm("Do you really want to delete \"" + element.file.name + "\" ?");});drEvent.on('dropify.afterClear', function(event, element){alert('File deleted');});drEvent.on('dropify.errors', function(event, element){console.log('Has Errors');});var drDestroy = $('#input-file-to-destroy').dropify();drDestroy = drDestroy.data('dropify')$('#toggleDropify').on('click', function(e){e.preventDefault();if (drDestroy.isDropified()) {drDestroy.destroy();} else {drDestroy.init();}})});</script>   </body></html>]]></content>
      
      
      <categories>
          
          <category> devtools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xcode扩展开发之node.js/python读取本地文件</title>
      <link href="/2018/03/07/Xcode%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bnode.js:python%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
      <url>/2018/03/07/Xcode%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bnode.js:python%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近在开发iOS开发辅助工具，其中包含Xcode扩展属性自动生成功能，属性生成模板代码以本地JSON文件的形式存在，也就是要把含有<code>\n</code>,<code>\t</code>的代码文本保存到JSON文件中，这样就保持原本的代码格式，用时直接插入即可。当然少量代码手工添加\n等格式符号也行，当大量代码显然不合适。</p><p>如何打印如下代码格式</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)name &#123;\n    <span class="keyword">if</span> (!_name) &#123;\n        _name = [[<span class="built_in">NSString</span> alloc] init];\n    &#125;\n    <span class="keyword">return</span> _name;\n&#125;\n\n<span class="keyword">@end</span>\n<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>方式一、iOS方式</p><p>使用数组方式打印，数组还包含\n,\t等格式符</p><p>步骤1、读取模板文件内容   2、分割字符串</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * templatePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:templteName</span><br><span class="line">                                                    ofType:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSString</span> * templateContent= [<span class="built_in">NSString</span> stringWithContentsOfFile:templatePath</span><br><span class="line">                                              encoding:<span class="built_in">NSUTF8StringEncoding</span></span><br><span class="line">                                                 error:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *array=[autoCode componentsSeparatedByString:<span class="string">@&quot;任意分割字符&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;模板=%@&quot;</span>,array);</span><br></pre></td></tr></table></figure><p>但iOS启动慢，每次修改文件都要重新启动，为了高效率咱们使用</p><p>方式二、node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fileContent;</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;~/iOSDev/XcodePlugIn/XcodePlugIn/ViewController.m&quot;</span>, <span class="keyword">function</span>(<span class="params">err,data</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(err)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">fileContent=data.<span class="title function_">toString</span>();</span><br><span class="line"><span class="keyword">var</span> string = fileContent;</span><br><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line">array = string.<span class="title function_">split</span>(<span class="string">&quot;Documents&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.zybuluo.com/langlibaitiao/note/719829">node.js读取本地文件</a></p><p>方式三、python</p><p>python就更简单了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">afile = open(&#x27;/Users/pconline/iOSDev/XcodePlugIn/XcodePlugIn/ViewController.m&#x27;, &#x27;r&#x27;) # 打开文件</span><br><span class="line">data=afile.read()</span><br><span class="line">print(repr(data))</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">print(data.encode(&quot;string_escape&quot;).encode(&quot;utf-8&quot;))</span><br><span class="line">print(data.encode(&quot;unicode_escape&quot;).decode(&quot;utf-8&quot;))</span><br></pre></td></tr></table></figure><p>使用 <a href="https://docs.python.org/3/library/functions.html#repr"><code>repr</code></a><br><a href="https://stackoverflow.com/questions/21672334/javascript-how-to-show-escape-characters-in-a-string">https://stackoverflow.com/questions/21672334/javascript-how-to-show-escape-characters-in-a-string</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript正则匹配示例</title>
      <link href="/2018/03/05/JavaScript%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E7%A4%BA%E4%BE%8B/"/>
      <url>/2018/03/05/JavaScript%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>匹配文章id使用原生跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;http://bbs.pcauto.com.cn/topic-15113553.html&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> substr = str.<span class="title function_">match</span>(<span class="regexp">/pcauto.com.cn\/topic-(\d*).html/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(substr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;匹配id=&#x27;</span>+substr[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>OC实现</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:<span class="string">@&quot;pcauto.com.cn/topic-(\\d*).html&quot;</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配第一个</span></span><br><span class="line"><span class="built_in">NSTextCheckingResult</span> *result = [regex firstMatchInString:searchText options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [searchText length])];</span><br><span class="line"><span class="built_in">NSRange</span> matchRange = [result rangeAtIndex:<span class="number">1</span>];</span><br><span class="line"><span class="built_in">NSString</span> *matchString = [searchText substringWithRange:matchRange];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;searchText=%@&quot;</span>,matchString);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配所有</span></span><br><span class="line"><span class="built_in">NSArray</span>* matches = [regex matchesInString:searchText options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [searchText length])];</span><br><span class="line"><span class="keyword">if</span> (matches.count != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;matches=%@&quot;</span>,matches);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *match <span class="keyword">in</span> matches) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;match=%@&quot;</span>, <span class="built_in">NSStringFromRange</span>([match rangeAtIndex:<span class="number">2</span>]));</span><br><span class="line">        <span class="built_in">NSRange</span> matchRange = [match rangeAtIndex:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *matchString = [searchText substringWithRange:matchRange];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;matchString=%@&quot;</span>, matchString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AFNetworking3x使用</title>
      <link href="/2018/03/02/AFNetWorking3.x%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/03/02/AFNetWorking3.x%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLRequestUseProtocolCachePolicy</span>： 对特定的 URL 请求使用网络协议中实现的缓存逻辑。这是默认的策略。</span><br><span class="line"><span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>：数据需要从原始地址加载。不使用现有缓存。</span><br><span class="line"><span class="built_in">NSURLRequestReloadIgnoringLocalAndRemoteCacheData</span>：不仅忽略本地缓存，同时也忽略代理服务器或其他中间介质目前已有的、协议允许的缓存。</span><br><span class="line"><span class="built_in">NSURLRequestReturnCacheDataElseLoad</span>：无论缓存是否过期，先使用本地缓存数据。如果缓存中没有请求所对应的数据，那么从原始地址加载数据。</span><br><span class="line"><span class="built_in">NSURLRequestReturnCacheDataDontLoad</span>：无论缓存是否过期，先使用本地缓存数据。如果缓存中没有请求所对应的数据，那么放弃从原始地址加载数据，请求视为失败（即：“离线”模式）。</span><br><span class="line"><span class="built_in">NSURLRequestReloadRevalidatingCacheData</span>：从原始地址确认缓存数据的合法性后，缓存数据就可以使用，否则从原始地址加载</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/ll845876425/article/details/51086110">iOS 使用AFNetWorking监听APP网络状态变化（可用于更改缓存策略、提示网络等）</a></p><p><a href="https://bettermrli.com/2016/08/10/%E7%BD%91%E7%BB%9C/AFNetworking%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/">AFNetworking简单封装</a></p><p><a href="http://flyweights.top/2015/09/23/AFNetworking%E6%93%8D%E4%BD%9C%E9%98%9F%E5%88%97%E8%AF%B7%E6%B1%82/">http://flyweights.top/2015/09/23/AFNetworking%E6%93%8D%E4%BD%9C%E9%98%9F%E5%88%97%E8%AF%B7%E6%B1%82/</a></p><p><a href="http://www.jianshu.com/p/8a7594df4659">http://www.jianshu.com/p/8a7594df4659</a></p><p><a href="https://github.com/Meeca/AFNDemo/tree/master/AFNetworkingDemo">https://github.com/Meeca/AFNDemo/tree/master/AFNetworkingDemo</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ---- 查看 request 是否被缓存 --</span><br><span class="line"><span class="built_in">NSCachedURLResponse</span> * response = [cache cachedResponseForRequest:request];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (response != <span class="literal">nil</span>) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 这里可以根据 是否有缓存，来更改缓存策略 --</span></span><br><span class="line">         [request setCachePolicy:<span class="built_in">NSURLRequestReturnCacheDataDontLoad</span>];</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@&quot;有缓存&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> -----</span><br><span class="line"><span class="comment">// 数据从网络加载完成，根据相应的缓存策略，需要本地缓存，</span></span><br><span class="line"></span><br><span class="line">走 - (<span class="built_in">NSCachedURLResponse</span> *)connection:(<span class="built_in">NSURLConnection</span> *)connection willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)cachedResponse</span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">如果你不想过多的操作，可以直接返回 cachedResponse --</span><br><span class="line">除非你不想缓存数据 -- 可以 <span class="keyword">return</span> <span class="literal">nil</span> --</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSCachedURLResponse</span> *)connection:(<span class="built_in">NSURLConnection</span> *)connection willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)cachedResponse</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;cache response uerInfo== %@ \n response == %@  &quot;</span>, [cachedResponse userInfo], [cachedResponse response]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们可以通过 转换 data ，来直接查看 缓存的内容额 --</span></span><br><span class="line">    <span class="built_in">NSString</span> * str = [[<span class="built_in">NSString</span> alloc] initWithData:[cachedResponse data]</span><br><span class="line">                                           encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;data == %@&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 --------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一般情况下，我们并不对该方法进行操作 --</span></span><br><span class="line">    <span class="keyword">return</span> cachedResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 -------------</span></span><br><span class="line">    <span class="comment">// 试着改一下缓存策略 -</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> * userInfo = [[cachedResponse userInfo] mutableCopy];</span><br><span class="line">    <span class="built_in">NSMutableData</span> * data = [[cachedResponse userInfo] mutableCopy];</span><br><span class="line">    <span class="built_in">NSURLCacheStoragePolicy</span> storagePolicy = <span class="built_in">NSURLCacheStorageNotAllowed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NSURLCacheStorageAllowed, 缓存不受限制</span></span><br><span class="line">    <span class="comment">// NSURLCacheStorageAllowedInMemoryOnly, 只允许内存缓存，不允许磁盘缓存 -</span></span><br><span class="line">    <span class="comment">// NSURLCacheStorageNotAllowed 不缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSCachedURLResponse</span> * response = [[<span class="built_in">NSCachedURLResponse</span> alloc]</span><br><span class="line">                                      initWithResponse:[cachedResponse response]</span><br><span class="line">                                      data:data</span><br><span class="line">                                      userInfo:userInfo</span><br><span class="line">                                      storagePolicy:storagePolicy];</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 ----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除非你不想缓存数据 -- 可以 return nil --</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://blog.originate.com/blog/2014/02/20/afimagecache-vs-nsurlcache/">http://blog.originate.com/blog/2014/02/20/afimagecache-vs-nsurlcache/</a></p><p><a href="http://blog.csdn.net/mengxiangone/article/details/48623785">http://blog.csdn.net/mengxiangone/article/details/48623785</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片EXIF信息查看与Exiftool使用</title>
      <link href="/2018/03/02/%E5%9B%BE%E7%89%87EXIF%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B/"/>
      <url>/2018/03/02/%E5%9B%BE%E7%89%87EXIF%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>​今天元宵节，一位版主在论坛发了一篇元宵节祝福帖，一大早就有用户报障说帖子中有张图片看不了，安卓端正常，第一反应是图片格式问题，用Safari打开也看不了，回到公司证实了是一张webp格式图片，最后将其转换成jpg格式发给了用户重新上传替换。</p><p>下图后缀是jpg，实际是webp，在谷歌系浏览器上才显示正常</p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/76572794.jpg" alt="76572794"></p><h3 id="一、什么是EXIF"><a href="#一、什么是EXIF" class="headerlink" title="一、什么是EXIF"></a>一、什么是EXIF</h3><p>​     可交换图像文件格式常被简称为Exif（Exchangeable image file format），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。Exif 可以被附加在 JPEG、TIFF、RIFF 等文件之中，为其增加有关数码相机拍摄信息的内容和缩略图或图像处理软件的一些版本信息。</p><p>了解更多：<a href="https://zh.wikipedia.org/wiki/EXIF">维基百科</a></p><h5 id="EXIF在线查看"><a href="#EXIF在线查看" class="headerlink" title="EXIF在线查看"></a>EXIF在线查看</h5><p><a href="https://exif.tuchong.com/">图虫EXIF查看器alpha版</a></p><p><a href="http://ganquan.info/exif-viewer/">exif-viewer</a></p><p><a href="https://www.get-metadata.com/">get-metadata</a> (支持图片、其它文件)</p><p><a href="http://exif.regex.info/exif.cgi">http://exif.regex.info/exif.cgi</a> 支持URL链接</p><p>以上几个是使用过的对图片EXIF解析支持最好的，网上的一些工具会解析失败。</p><h3 id="二、Exiftool使用"><a href="#二、Exiftool使用" class="headerlink" title="二、Exiftool使用"></a>二、Exiftool使用</h3><h4 id="一）为什么使用Exiftool"><a href="#一）为什么使用Exiftool" class="headerlink" title="一）为什么使用Exiftool"></a>一）为什么使用Exiftool</h4><ul><li><code>exiftool</code>是经过测试发现对图片EXIF信息解析支持是最好的（如果有更好的请补充）</li><li><code>exiftool</code>支持图片EXIF信息查询，修改及批量操作，还支持其它文件的EXIF操作。</li><li>安全隐私问题，因为经常有网上暴露图片隐私问题，使用在线需要上传到服务器。采用<code>exiftool</code>保证了图片的安全和隐私，显然是最适合的。</li></ul><p>​我们知道文件后缀名并不能代表文件的类型格式，比如上图webp格式后缀名是jpg，换言之一张jpg后缀名图片可能不是jpg图片，可能是<code>web</code>，<code>png</code>，<code>text</code>或其它类型文件。那么怎么快速了解它是哪种类型文件并获取它的一些其它信息呢，这时<code>exiftool</code>就派上用场了，试了下其它几个Exif工具，也用Mac&#x2F;iOS原生代码测试了下，发现不能有效的读取jpg后缀的webp图片，而exiftool能很好支持。注意并非每一张图片都包含 exif 信息。像微信朋友圈如果发表的不是原图就没有。</p><h5 id="二）Exiftool安装与使用"><a href="#二）Exiftool安装与使用" class="headerlink" title="二）Exiftool安装与使用"></a>二）Exiftool安装与使用</h5><h5 id="1、exiftool安装"><a href="#1、exiftool安装" class="headerlink" title="1、exiftool安装"></a>1、exiftool安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install exiftool</span></span><br></pre></td></tr></table></figure><p>或直接下载：<a href="https://sno.phy.queensu.ca/~phil/exiftool/">https://sno.phy.queensu.ca/~phil/exiftool/</a></p><h5 id="2、查看EXIF信息"><a href="#2、查看EXIF信息" class="headerlink" title="2、查看EXIF信息"></a>2、查看EXIF信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool photo.jpg  <span class="comment">#默认显示所有的信息 exiftool+图片路径/图片名.jpg</span></span></span><br></pre></td></tr></table></figure><p>输出信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">$ ExifTool /Users/apple/Desktop/photo.jpg</span></span><br><span class="line">ExifTool Version Number         : 10.80</span><br><span class="line">File Name                       : photo.jpg</span><br><span class="line">Directory                       : /Users/pconline/Desktop</span><br><span class="line">File Size                       : 18 kB</span><br><span class="line">File Modification Date/Time     : 2018:03:02 10:22:03+08:00</span><br><span class="line">File Access Date/Time           : 2018:03:02 11:47:58+08:00</span><br><span class="line">File Inode Change Date/Time     : 2018:03:02 11:47:57+08:00</span><br><span class="line">File Permissions                : rw-r--r--</span><br><span class="line">File Type                       : WEBP</span><br><span class="line">File Type Extension             : webp</span><br><span class="line">MIME Type                       : image/webp</span><br><span class="line">VP8 Version                     : 0 (bicubic reconstruction, normal loop)</span><br><span class="line">Image Width                     : 640</span><br><span class="line">Horizontal Scale                : 0</span><br><span class="line">Image Height                    : 400</span><br><span class="line">Vertical Scale                  : 0</span><br><span class="line">Image Size                      : 640x400</span><br><span class="line">Megapixels                      : 0.256</span><br></pre></td></tr></table></figure><h5 id="3、Exiftool常用命令示例"><a href="#3、Exiftool常用命令示例" class="headerlink" title="3、Exiftool常用命令示例"></a>3、Exiftool常用命令示例</h5><p>终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -h <span class="comment">#查看使用详细列表</span></span></span><br></pre></td></tr></table></figure><p>使用帮助，可看到所有命令帮助，也可看到exiftool的支持文件类型和文件元信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">File Types</span><br><span class="line">----------------------+----------------------+---------------------</span><br><span class="line">3G2   r/w   | DVB   r/w   | JPEG  r/w   | ODT   r     | RIFF  r</span><br><span class="line">....</span><br><span class="line">Meta Information</span><br><span class="line">----------------------+----------------------+---------------------</span><br><span class="line">EXIF           r/w/c  |  CIFF           r/w  |  Ricoh RMETA    r</span><br><span class="line">GPS            r/w/c  |  AFCP           r/w  |  Picture Info   r</span><br><span class="line">IPTC           r/w/c  |  Kodak Meta     r/w  |  Adobe APP14    r</span><br><span class="line">XMP            r/w/c  |  FotoStation    r/w  |  MPF            r</span><br><span class="line">MakerNotes     r/w/c  |  PhotoMechanic  r/w  |  Stim           r</span><br><span class="line">Photoshop IRB  r/w/c  |  JPEG 2000      r    |  DPX            r</span><br><span class="line">ICC Profile    r/w/c  |  DICOM          r    |  APE            r</span><br><span class="line">MIE            r/w/c  |  Flash          r    |  Vorbis         r</span><br><span class="line">JFIF           r/w/c  |  FlashPix       r    |  SPIFF          r</span><br><span class="line">Ducky APP12    r/w/c  |  QuickTime      r    |  DjVu           r</span><br><span class="line">PDF            r/w/c  |  Matroska       r    |  M2TS           r</span><br><span class="line">PNG            r/w/c  |  MXF            r    |  PE/COFF        r</span><br><span class="line">Canon VRD      r/w/c  |  PrintIM        r    |  AVCHD          r</span><br><span class="line">Nikon Capture  r/w/c  |  FLAC           r    |  ZIP            r</span><br><span class="line">GeoTIFF        r/w/c  |  ID3            r    |  (and more)</span><br></pre></td></tr></table></figure><h5 id="4、查询相关命令"><a href="#4、查询相关命令" class="headerlink" title="4、查询相关命令"></a>4、查询相关命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">cd</span> /Users/apple/Desktop</span></span><br><span class="line">exiftool photo.jpg #查看所有信息</span><br><span class="line">exiftool -a -u -g1 photo.jpg #查看所有元信息，包括重复和未知标签，并按小组排列</span><br><span class="line">exiftool -s -ImageSize -ExposureTime photo.jpg #查看图片尺寸</span><br><span class="line">exiftool -common dir  #查看dir目录文件信息（不仅仅是图片）</span><br><span class="line">exiftool -l  c.jpg d.jpg  #从两个图像文件打印所有信息。</span><br><span class="line">exiftool -l -canon c.jpg d.jpg#从两个图像文件打印标准的佳能信息。</span><br></pre></td></tr></table></figure><h5 id="5、写入编辑命令"><a href="#5、写入编辑命令" class="headerlink" title="5、写入编辑命令"></a>5、写入编辑命令</h5><p>更改创建和修改时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -gps:all= photo.jpg  <span class="comment">#有些相机会记录拍照时的GPS定位信息。如果你不希望别人看到使用该命令删除gps信息</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -all= photo.jpg  <span class="comment">#删除所有信息</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -all= --exif:all photo.jpg  <span class="comment">#删除EXIF以外的所有信息</span></span></span><br></pre></td></tr></table></figure><p>写入标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -artist=标签名称 photo.jpg     <span class="comment">#写入艺术家标签</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -artist=标签名称 a.jpg b.jpg c.jpg   <span class="comment">#写多个文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -artist=标签名称  /exiftoolTest      <span class="comment">#写在一个目录的所有文件 exiftoolTest为文件夹</span></span></span><br></pre></td></tr></table></figure><p>其它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">exiftool -Comment =&#x27;这是一个新的评论&#x27;dst.jpg</span><br><span class="line">    向JPG图片写入新评论（取代任何现有评论）。</span><br><span class="line"></span><br><span class="line">exiftool -comment = -o newdir -ext jpg。</span><br><span class="line">    删除当前目录中所有JPG图像的评论，</span><br><span class="line">    将修改后的图像写入新目录。</span><br><span class="line"></span><br><span class="line">exiftool -keywords = EXIF -keywords =编辑器dst.jpg</span><br><span class="line">    用两个新的关键字（“EXIF”和。）替换现有的关键字列表</span><br><span class="line">    “编辑”）。</span><br><span class="line"></span><br><span class="line">exiftool -Keywords + =单词-o newfile.jpg src.jpg</span><br><span class="line">    将源图像复制到新文件，然后添加关键字（“单词”）</span><br><span class="line">    当前关键字列表。</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">exiftool -credit- = xxx dir</span><br><span class="line">    从一个目录中的所有文件中删除信用信息，信用值是“xxx”。</span><br><span class="line"></span><br><span class="line">exiftool -all = dst.jpg</span><br><span class="line">    从图像中删除所有元信息。注意：你不应该</span><br><span class="line">    对RAW图像（DNG除外）进行处理，因为它是专有的RAW图像</span><br><span class="line">    格式通常包含制造注释中的信息</span><br><span class="line">    转换图像所必需的。</span><br><span class="line"></span><br><span class="line">exiftool -all = -comment =&#x27;寂寞&#x27;dst.jpg</span><br><span class="line">    删除图像中的所有元信息并添加评论</span><br><span class="line">    （注意顺序很重要：“-comment =&#x27;lonely&#x27;-all =”</span><br><span class="line">    也会删除新评论。）</span><br><span class="line"></span><br><span class="line">exiftool -all = --jfif：全部dst.jpg</span><br><span class="line">    从图像中删除除JFIF组以外的所有元信息。</span><br><span class="line"></span><br><span class="line">exiftool -Photoshop：全部= dst.jpg</span><br><span class="line">    从图像中删除Photoshop元信息（注意</span><br><span class="line">    Photoshop信息还包括IPTC）。</span><br><span class="line"></span><br><span class="line">exiftool -r -XMP-crss：all = DIR</span><br><span class="line">    递归删除a中的图像中的所有XMP-crss信息</span><br><span class="line">    目录。</span><br><span class="line"></span><br><span class="line">exiftool&#x27;-ThumbnailImage &lt;= thumb.jpg&#x27;dst.jpg</span><br><span class="line">    从指定的文件中设置缩略图（注意：引号是</span><br><span class="line">    以防止外壳重定向）。</span><br><span class="line"></span><br><span class="line">exiftool&#x27;-JpgFromRaw &lt;=％d％f_JFR.JPG&#x27;-ext NEF -r。</span><br><span class="line">    递归地写入以“_JFR.JPG”结尾的文件名的JPEG图像</span><br><span class="line">    添加到扩展名为“.NEF”的类似文件的JpgFromRaw标记中</span><br><span class="line">    当前目录。 （这是“-JpgFromRaw”的倒数</span><br><span class="line">    上面的“READING EXAMPLES”部分的命令）。</span><br><span class="line"></span><br><span class="line">exiftool -DateTimeOriginal - =&#x27;0：0：0 1：30：0&#x27;dir</span><br><span class="line">    调整目录“dir”中所有图像的原始日期/时间</span><br><span class="line">    减去1小时30分钟。 （这相当于</span><br><span class="line">    “-DateTimeOriginal- = 1.5”。请参阅Image :: ExifTool :: Shift.pl</span><br><span class="line">    细节。）</span><br><span class="line"></span><br><span class="line">exiftool -createdate + = 3 -modifydate + = 3 a.jpg b.jpg</span><br><span class="line">    向两个CreateDate和ModifyDate时间戳添加3个小时</span><br><span class="line">    图片。</span><br><span class="line"></span><br><span class="line">exiftool -AllDates + = 1：30 -if&#x27;$ make eq“Canon”&#x27;dir</span><br><span class="line">    移动DateTimeOriginal，CreateDate和ModifyDate的值</span><br><span class="line">    将所有佳能影像转换1小时30分钟</span><br><span class="line">    目录。 （AllDates标签作为这些的快捷方式提供</span><br><span class="line">    三个标签，允许他们通过一个标签访问。）</span><br><span class="line"></span><br><span class="line">exiftool -xmp：city = Kingston image1.jpg image2.nef</span><br><span class="line">    将标签写入两个图像的XMP组。 （没有“xmp：”</span><br><span class="line">    自从“City”存在以后，该标签将被写入IPTC组</span><br><span class="line">    在这两种情况下，IPTC默认是首选。）</span><br><span class="line"></span><br><span class="line">exiftool -LightSource - =&#x27;未知（0）&#x27;dst.tiff</span><br><span class="line">    只有在值为0时才删除“LightSource”标签。</span><br><span class="line"></span><br><span class="line">exiftool -whitebalance- = auto -WhiteBalance = tung dst.jpg</span><br><span class="line">    只有之前为“自动”时，才将“WhiteBalance”设置为“Tungsten”。</span><br><span class="line"></span><br><span class="line">exiftool -comment- = -comment =&#x27;新评论&#x27;a.jpg</span><br><span class="line">    只有当图片还没有时才写新评论。</span><br><span class="line"></span><br><span class="line">exiftool -o％d％f.xmp目录</span><br><span class="line">    为“dir”中的所有图像创建XMP元信息数据文件。</span><br><span class="line"></span><br><span class="line">exiftool -o test.xmp -owner = Phil -title =&#x27;XMP File&#x27;</span><br><span class="line">    仅从命令中定义的标签创建XMP数据文件</span><br><span class="line">    线。</span><br></pre></td></tr></table></figure><p>更多命令查看<code>exiftool -h</code></p><p><a href="http://owl.phy.queensu.ca/~phil/exiftool/examples.html">http://owl.phy.queensu.ca/~phil/exiftool/examples.html</a></p><h5 id="6、使用ExifTool批量处理EXIF信息"><a href="#6、使用ExifTool批量处理EXIF信息" class="headerlink" title="6、使用ExifTool批量处理EXIF信息"></a>6、使用ExifTool批量处理EXIF信息</h5><p>如果要处理的文件太多，一张一张处理效率太低，ExifTool支持批量操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -artist=标签名称  /dirName    <span class="comment">#批量写入dirName目录艺术家标签</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -r -all= /dirName    <span class="comment">#批量删除dirName及其子目录所有文件EXIF信息，-r表示递归处理子目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">exiftool -gps:all= /dirName   <span class="comment">#批量删除dirName及其子目录所有文件gps信息</span></span></span><br></pre></td></tr></table></figure><p>其它相关：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mdls  photo.jpg <span class="comment">#这个命令显示指定文件的metadata的属性,当不能准确的获取exif信息</span></span></span><br></pre></td></tr></table></figure><p>iOS端获取metadata</p><p><a href="https://stackoverflow.com/questions/9766394/get-exif-data-from-uiimage-uiimagepickercontroller">https://stackoverflow.com/questions/9766394/get-exif-data-from-uiimage-uiimagepickercontroller</a></p><p><a href="https://stackoverflow.com/questions/16830180/how-to-get-exif-data-from-downloaded-image">https://stackoverflow.com/questions/16830180/how-to-get-exif-data-from-downloaded-image</a></p><p>测试发现，如果是网络webp图片,如果后缀是jpg或png不能准确获取Exif信息，系统相册没问题。</p><p>参考：</p><p><a href="http://owl.phy.queensu.ca/~phil/exiftool/examples.html">http://owl.phy.queensu.ca/~phil/exiftool/examples.html</a></p><p><a href="https://zh.wikipedia.org/wiki/EXIF">https://zh.wikipedia.org/wiki/EXIF</a></p><p><a href="https://baike.baidu.com/item/EXIF/422825">https://baike.baidu.com/item/EXIF/422825</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS点对点直播WebRTC研究</title>
      <link href="/2018/02/28/iOS%E7%82%B9%E5%AF%B9%E7%82%B9%E7%9B%B4%E6%92%ADWebRTC%E7%A0%94%E7%A9%B6/"/>
      <url>/2018/02/28/iOS%E7%82%B9%E5%AF%B9%E7%82%B9%E7%9B%B4%E6%92%ADWebRTC%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/c49da1d93df4">iOS下音视频通信-基于WebRTC</a></p><p><a href="http://lib.csdn.net/liveplay/node/701">http://lib.csdn.net/liveplay/node/701</a></p><p><a href="https://github.com/tuyaohui/WebRTC_iOS">https://github.com/tuyaohui/WebRTC_iOS</a></p><p><a href="http://chenhu1001.github.io/2016/07/02/iOS%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E9%9F%B3%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89/">iOS直播技术分享-音视频采集（一）</a></p><p><a href="http://www.jianshu.com/p/ddbe5d90332f">iOS音视频开源框架WebRTC入门-外网通信</a></p><p><a href="https://github.com/DyncLang/DevLiveBook">https://github.com/DyncLang/DevLiveBook</a></p><p><a href="http://www.jianshu.com/p/1b4c79b45055">WebRTC-编译以及运行IOS的Demo</a></p><p><a href="https://developer.qiniu.com/pili/manual/1668/even-the-design-documents">https://developer.qiniu.com/pili/manual/1668/even-the-design-documents</a></p><p><a href="http://hawkingouyang.com/2016/09/11/8_iOS-VideoChat-on-GitHub-and-more/">http://hawkingouyang.com/2016/09/11/8_iOS-VideoChat-on-GitHub-and-more/</a></p><p><a href="https://github.com/tuyaohui/WebRTC_iOS">https://github.com/tuyaohui/WebRTC_iOS</a></p><p><a href="https://github.com/BossKing/BKWebRTC">https://github.com/BossKing/BKWebRTC</a></p><p><a href="https://github.com/xquezme/WebRTC">https://github.com/xquezme/WebRTC</a></p><p><a href="https://github.com/fengli12321/Socket.io-FLSocketIM-iOS">https://github.com/fengli12321/Socket.io-FLSocketIM-iOS</a></p><p><a href="http://www.jianshu.com/p/686c4bf6df3f">基于socket.io即时通讯IM实现，webRTC实现视频通话</a></p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p><a href="https://github.com/shanet/WebRTC-Example">https://github.com/shanet/WebRTC-Example</a></p><h5 id="直播服务厂商"><a href="#直播服务厂商" class="headerlink" title="直播服务厂商"></a>直播服务厂商</h5><p><a href="https://www.anyrtc.io/home">https://www.anyrtc.io/home</a></p><h5 id="即时通信"><a href="#即时通信" class="headerlink" title="即时通信"></a>即时通信</h5><p><a href="http://www.jianshu.com/p/821b777555d3">iOS websocket接入</a></p><p><a href="http://www.jianshu.com/p/bcefda55bce4">微信,QQ这类IM app怎么做——谈谈Websocket</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UIlabel文本计算</title>
      <link href="/2018/02/28/UILabel%E8%AE%A1%E7%AE%97Size/"/>
      <url>/2018/02/28/UILabel%E8%AE%A1%E7%AE%97Size/</url>
      
        <content type="html"><![CDATA[<p>一、boundingRectWithSize计算</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UILabel分类方法</span></span><br><span class="line">- (<span class="built_in">CGSize</span>)sizeWithFont:(<span class="built_in">UIFont</span> *)font maxSize:(<span class="built_in">CGSize</span>)maxSize</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGSize</span> retSize =<span class="built_in">CGSizeZero</span>;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(boundingRectWithSize:options:attributes:context:)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *attributeDic = @&#123;<span class="built_in">NSFontAttributeName</span>:font&#125;;</span><br><span class="line">        <span class="built_in">NSStringDrawingOptions</span> options = <span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span> | <span class="built_in">NSStringDrawingTruncatesLastVisibleLine</span>;</span><br><span class="line">        retSize = [<span class="keyword">self</span> boundingRectWithSize:<span class="built_in">CGSizeMake</span>(maxSize.width, maxSize.height)</span><br><span class="line">                                     options:options</span><br><span class="line">                                  attributes:attributeDic</span><br><span class="line">                                     context:<span class="literal">nil</span>].size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CGSizeMake</span>(ceil(retSize.width),</span><br><span class="line">                      ceil(retSize.height));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、sizeThatFits方式计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//UILabel分类方法</span><br><span class="line">- (CGSize)preferredSizeWithMaxWidth:(CGFloat)maxWidth</span><br><span class="line">&#123;</span><br><span class="line">    CGSize size = [self sizeThatFits:CGSizeMake(maxWidth, MLFLOAT_MAX)];</span><br><span class="line">    size.width = fmin(size.width, maxWidth); //在numberOfLine=1返回值可能会比maxWidth大</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是富文本的话，比如包含表情等，使用boundingRectWithSize计算误差就比较大了，所以建议使用sizeThatFits方式计算。</p><p>如果在UITableviewCell中需要计算cell高度，不方便获取label实例，我们可以使用一个单例Label来计算高度，减少label实例化带来的性能消耗。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark --获取Label高度用--</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">UILabel</span> * kProtypeLabel() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">UILabel</span> *_protypeLabel = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _protypeLabel = [[<span class="built_in">UILabel</span> alloc]init];</span><br><span class="line">        _protypeLabel.font=[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16.0</span>f];</span><br><span class="line">        _protypeLabel.numberOfLines = <span class="number">0</span>;</span><br><span class="line">        _protypeLabel.lineBreakMode=<span class="built_in">NSLineBreakByCharWrapping</span>;</span><br><span class="line">        <span class="comment">//_protypeLabel.textInsets = UIEdgeInsetsMake(5, 5, 5,5);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _protypeLabel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取size</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark --计算富文本高度</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KMaxWidth 200</span></span><br><span class="line">+(<span class="built_in">CGSize</span>)labelSizeWithText:(<span class="built_in">NSString</span> *)text;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UILabel</span> *label = kProtypeLabel();</span><br><span class="line">    label.text=text;</span><br><span class="line">    <span class="keyword">return</span> [label preferredSizeWithMaxWidth:KMaxWidth]; <span class="comment">//上下间距</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac开发获取home目录</title>
      <link href="/2018/02/08/Mac%E5%BC%80%E5%8F%91%E8%8E%B7%E5%8F%96home%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/02/08/Mac%E5%BC%80%E5%8F%91%E8%8E%B7%E5%8F%96home%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>获取home目录</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *RealHomeDirectory() &#123;</span><br><span class="line">    <span class="keyword">struct</span> passwd *pw = getpwuid(getuid());</span><br><span class="line">    assert(pw);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithUTF8String:pw-&gt;pw_dir];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in">NSString</span> *home=[[[<span class="built_in">NSProcessInfo</span> processInfo] environment] objectForKey:<span class="string">@&quot;HOME&quot;</span>];</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/9553390/how-do-i-get-the-users-home-directory-in-objectivec-in-a-sandboxed-app">https://stackoverflow.com/questions/9553390/how-do-i-get-the-users-home-directory-in-objectivec-in-a-sandboxed-app</a></p><p><a href="https://stackoverflow.com/questions/3020187/getting-home-directory-in-mac-os-x-using-c-language">https://stackoverflow.com/questions/3020187/getting-home-directory-in-mac-os-x-using-c-language</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS/Mac开发常用网站</title>
      <link href="/2018/02/07/iOS:Mac%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
      <url>/2018/02/07/iOS:Mac%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><strong>Awesome-iOS</strong></p><p><strong>Awesome</strong>-极好的，很好，棒极了的意思。</p><p><strong>awesome 系列</strong> 一般是用来收集学习、工具、书籍类相关的项目</p><p>所以学习一门语言直接搜索 <code>Awesome + 你要学的语言</code>就会搜到很多优秀的资源</p><p>Awesome-ios-iOS  资源收集汇总，iOS 资源大全，内容包括：框架、组件、测试、Apple Store、SDK、XCode、网站、书籍等</p><p><a href="https://github.com/vsouza/awesome-ios">https://github.com/vsouza/awesome-ios</a></p><p><a href="https://github.com/jobbole/awesome-ios-cn">https://github.com/jobbole/awesome-ios-cn</a></p><p><a href="https://github.com/matteocrippa/awesome-swift">https://github.com/matteocrippa/awesome-swift</a></p><p><a href="https://github.com/Wolg/awesome-swift">https://github.com/Wolg/awesome-swift</a></p><p><a href="https://github.com/cjwirth/awesome-ios-ui">https://github.com/cjwirth/awesome-ios-ui</a></p><p><a href="https://github.com/ameizi/awesome-ios-animation">https://github.com/ameizi/awesome-ios-animation</a></p><p><a href="https://github.com/aozhimin/awesome-iOS-resource">https://github.com/aozhimin/awesome-iOS-resource</a></p><p><a href="https://github.com/iamdaiyuan/ios_top_1000">https://github.com/iamdaiyuan/ios_top_1000</a></p><p><a href="https://gitlab.com/yogeshc/awesome-ios">https://gitlab.com/yogeshc/awesome-ios</a></p><p><a href="https://ios.libhunt.com/">https://ios.libhunt.com/</a></p><p><a href="https://github.com/joeljfischer/awesome-apple">https://github.com/joeljfischer/awesome-apple</a></p><p><a href="https://github.com/ameizi/awesome-ios-chart">https://github.com/ameizi/awesome-ios-chart</a> 图表</p><p><a href="https://github.com/Jiar/awesome-iOS-blog-article">https://github.com/Jiar/awesome-iOS-blog-article</a></p><p>收集</p><p><a href="https://github.com/Aufree/trip-to-iOS">https://github.com/Aufree/trip-to-iOS</a></p><p><a href="https://github.com/JRJian/hotchpotch_of_iOS_bookmark">https://github.com/JRJian/hotchpotch_of_iOS_bookmark</a></p><p><a href="https://github.com/tangqiaoboy/iOSBlogCN">https://github.com/tangqiaoboy/iOSBlogCN</a></p><p><a href="http://www.gogeeks.cn/job/11/IOS%E5%B7%A5%E7%A8%8B%E5%B8%88">http://www.gogeeks.cn/job/11/IOS%E5%B7%A5%E7%A8%8B%E5%B8%88</a></p><h5 id="苹果官网Demo-Guide"><a href="#苹果官网Demo-Guide" class="headerlink" title="苹果官网Demo Guide"></a>苹果官网Demo Guide</h5><p><a href="https://developer.apple.com/search/?q=Service">https://developer.apple.com/search/?q=Service</a></p><h5 id="MacOX-Cocoa"><a href="#MacOX-Cocoa" class="headerlink" title="MacOX Cocoa"></a>MacOX Cocoa</h5><p><a href="https://github.com/isaced/awesome-cocoa-weekly">https://github.com/isaced/awesome-cocoa-weekly</a></p><p><a href="https://github.com/seyfeddin/awesome-macos">https://github.com/seyfeddin/awesome-macos</a></p><p><a href="https://github.com/jeffreyjackson/mac-apps">https://github.com/jeffreyjackson/mac-apps</a></p><p><a href="https://github.com/xamarin/mac-samples">https://github.com/xamarin/mac-samples</a></p><h5 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h5><p><a href="https://github.com/ipader/SwiftGuide">https://github.com/ipader/SwiftGuide</a></p><p><a href="https://github.com/matteocrippa/awesome-swift">https://github.com/matteocrippa/awesome-swift</a></p><p><a href="https://github.com/justin-j/awesome-ios-cocoa-swift">https://github.com/justin-j/awesome-ios-cocoa-swift</a></p><h5 id="Command-line-命令行"><a href="#Command-line-命令行" class="headerlink" title="Command-line 命令行"></a>Command-line 命令行</h5><p><a href="https://github.com/herrbischoff/awesome-macos-command-line">https://github.com/herrbischoff/awesome-macos-command-line</a></p><p><a href="https://github.com/shaojiankui/awesome-macos-command">https://github.com/shaojiankui/awesome-macos-command</a></p><h5 id="常逛站点"><a href="#常逛站点" class="headerlink" title="常逛站点"></a>常逛站点</h5><p><a href="https://www.ctolib.com/">https://www.ctolib.com/</a></p><p><a href="http://www.cocoachina.com/">http://www.cocoachina.com/</a></p><p><a href="http://www.iosappx.com/">http://www.iosappx.com/</a></p><p><a href="https://www.cocoacontrols.com/">https://www.cocoacontrols.com/</a></p><p><a href="https://link.jianshu.com/?t=http://iosdevweekly.com">iOS Dev Weekly</a> (每周一期，内容多为这一星期里值得关注的 GitHub 项目、文章、工具等)</p><p><a href="https://link.jianshu.com/?t=http://www.lynda.com/search?q=ios">Lynda</a></p><p><a href="https://www.appcoda.com/">https://www.appcoda.com/</a></p><p><a href="https://link.jianshu.com/?t=http://nshipster.com">NSHipster</a></p><p><a href="https://www.raywenderlich.com/tutorials">https://www.raywenderlich.com/tutorials</a></p><p><a href="https://www.objc.io/">https://www.objc.io/</a></p><p><a href="https://swift.zeef.com/">https://swift.zeef.com</a><br>收集了很多关于 Swift 的学习资料,工具等</p><h5 id="iOS-开发工具"><a href="#iOS-开发工具" class="headerlink" title="iOS 开发工具"></a>iOS 开发工具</h5><p><a href="https://github.com/LeoMobileDeveloper/awesome-ios-develop-tools">https://github.com/LeoMobileDeveloper/awesome-ios-develop-tools</a></p><p><a href="https://iosdev.tools/">https://iosdev.tools/</a></p><h5 id="视频课"><a href="#视频课" class="headerlink" title="视频课"></a>视频课</h5><p><a href="https://www.udemy.com/">https://www.udemy.com/</a></p><p>设备占有率</p><p><a href="https://mtj.baidu.com/data/mobile/device">https://mtj.baidu.com/data/mobile/device</a></p><p>iPhone 分辨率尺寸</p><p><a href="http://ios-resolution.com/">http://ios-resolution.com/</a></p><p><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></p><p><a href="http://screensiz.es/">http://screensiz.es/</a></p><p><a href="http://www.zuimeiui.com/size.html">http://www.zuimeiui.com/size.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端开发常用网站</title>
      <link href="/2018/02/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
      <url>/2018/02/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.awesomes.cn/%E3%80%90%E8%8D%90%E3%80%91">https://www.awesomes.cn/【荐】</a><br><a href="https://www.awesomes.cn/rank?sort=trend">https://www.awesomes.cn/rank?sort=trend</a><br><a href="https://github.com/JingwenTian/awesome-frontend">https://github.com/JingwenTian/awesome-frontend</a><br><a href="https://github.com/fengmiaosen/web-awesome">https://github.com/fengmiaosen/web-awesome</a><br><a href="https://github.com/jobbole/awesome-javascript-cn">https://github.com/jobbole/awesome-javascript-cn</a></p><p>前端网址导航<br><a href="http://www.alloyteam.com/nav/">http://www.alloyteam.com/nav/</a><br><a href="http://www.daqianduan.com/nav">http://www.daqianduan.com/nav</a><br><a href="http://yechuang.top/">http://yechuang.top/</a><br><a href="http://longmiao.wang/web/">http://longmiao.wang/web/</a><br><a href="https://csskr.com/">https://csskr.com/</a></p><p><a href="https://www.zhihu.com/question/28478379">前端工程师一般都喜欢去哪些网站逛？</a>【知乎】<br><a href="https://www.zhihu.com/question/42186243/answer/145333085">有哪些非常好的前端网站或个人博客？</a><br><a href="https://www.zhihu.com/question/46939006/answer/104211095">国内有什么好的前端学习网站推荐？</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript HTTP网络请求</title>
      <link href="/2018/02/06/JavaScriptHTTP%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/02/06/JavaScriptHTTP%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>​     作为一名移动开发者，很多时候需要对网络数据进行处理，而Xcode每次修改都需要重新编译，这大大降低了我们开发的敏捷性。python对网络数据的处理是很简单的，但iOS开发对python的支持不是很够，只能用第三方框架，而且API数量和使用方便性很低。对于JavaScript，iOS7之后苹果就推出了JavaScriptCore.framework这个框架,这个框架为大家在与JS交互上提供了很大帮助,可以在html界面上调用OC方法并传参,也可以在OC上调用JS方法并传参，可以很方便的实现OC&#x2F;swift与js交互。</p><p>JavaScript中的网络分为两大类：AJAX（浏览器）和HTTP客户端（服务器），下面是对这2种请求的分析比较</p><h4 id="一、AJAX-HTTP库比较（译文摘要）"><a href="#一、AJAX-HTTP库比较（译文摘要）" class="headerlink" title="一、AJAX &#x2F; HTTP库比较（译文摘要）"></a>一、AJAX &#x2F; HTTP库比较（译文摘要）</h4><p>原文链接：<a href="https://www.javascriptstuff.com/ajax-libraries/">https://www.javascriptstuff.com/ajax-libraries/</a></p><p>JavaScript中的网络分为两类：<code>AJAX</code>（浏览器）和<code>HTTP</code>客户端（服务器）。</p><p>有时你只需要其中的一个，有时需要两个（例如在一个同构&#x2F;通用的应用程序）。</p><p>无论哪种方式，你都希望拥有<strong>简洁的语法</strong>。大多数开发人员发现<code>XMLHttpRequest</code>API太冗长了。</p><p>很多开发人员使用<code>jQuery</code>，但是如果您只需要<code>AJAX</code>功能，加载整个库看起来可能很浪费。</p><p>我整理了一个列表来帮助你为你的项目选择一个<strong>最合适</strong>的JavaScript网络请求库。之后，我会举几个具体的场景来推荐相应库。</p><table><thead><tr><th></th><th>Support</th><th>Features</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>Chrome &amp;Firefox1</td><td>All Browsers</td><td>Node</td><td>Concise Syntax</td><td>Promises</td><td>Native2</td><td>Single Purpose3</td><td>Formal Specification</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></td><td>✓</td><td>✓</td><td></td><td></td><td></td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><a href="https://nodejs.org/api/http.html">Node HTTP</a></td><td></td><td></td><td>✓</td><td></td><td></td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch">fetch()</a></td><td>✓</td><td></td><td></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><a href="https://github.com/github/fetch">Fetch polyfill</a></td><td>✓</td><td>✓</td><td></td><td>✓</td><td>✓</td><td></td><td>✓</td><td>✓</td></tr><tr><td><a href="https://github.com/bitinn/node-fetch">node-fetch</a></td><td></td><td></td><td>✓</td><td>✓</td><td>✓</td><td></td><td>✓</td><td>✓</td></tr><tr><td><a href="https://github.com/matthew-andrews/isomorphic-fetch">isomorphic-fetch</a></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td><td>✓</td><td>✓</td></tr><tr><td><a href="https://github.com/visionmedia/superagent">superagent</a></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td><td></td><td>✓</td><td></td></tr><tr><td><a href="https://github.com/mzabriskie/axios">axios</a></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td><td>✓</td><td></td></tr><tr><td><a href="https://github.com/request/request">request</a></td><td></td><td></td><td>✓</td><td>✓</td><td></td><td></td><td>✓</td><td></td></tr><tr><td><a href="https://jquery.com/">jQuery</a></td><td>✓</td><td>✓</td><td></td><td>✓</td><td></td><td></td><td></td><td></td></tr><tr><td><a href="https://github.com/ded/reqwest">reqwest</a></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td><td>✓</td><td></td></tr></tbody></table><p>更多查看原文：<a href="https://www.javascriptstuff.com/ajax-libraries/">https://www.javascriptstuff.com/ajax-libraries/</a></p><p>jQuery中的ajax与原生js中的ajax对比？</p><p>jquery是基于原生ajax的一个js封装库，不同浏览器对ajax的实现可能不同，jQuery解决了兼容问题。当然封装后语法更简单，使用更方便。</p><p>jQuery网络请求</p><p><strong>1、ajax()方式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">id</span>) &#123;  </span><br><span class="line">          <span class="keyword">var</span> params = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张山&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1112222&quot;</span>&#125;);</span><br><span class="line">          $.<span class="title function_">ajax</span>(&#123;  </span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,  </span><br><span class="line">              <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span>,  </span><br><span class="line">              <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,  </span><br><span class="line">              <span class="attr">data</span>: params,  </span><br><span class="line">              <span class="attr">cache</span>: <span class="literal">false</span>,  </span><br><span class="line">              <span class="attr">timeout</span>: <span class="number">10</span> * <span class="number">1000</span>,  </span><br><span class="line">              <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;  </span><br><span class="line">                   <span class="title function_">alert</span>(<span class="string">&quot;数据+ data&quot;</span>);</span><br><span class="line">              &#125;,  </span><br><span class="line">              <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) &#123;  </span><br><span class="line"></span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;);  </span><br><span class="line">      &#125;;  </span><br></pre></td></tr></table></figure><p><strong>2.$.get()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> params = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id</span><br><span class="line">    &#125;;</span><br><span class="line">    $.<span class="title function_">get</span>(url, params,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;数据+ data&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3.$.post()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> params = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id</span><br><span class="line">    &#125;;</span><br><span class="line">    $.<span class="title function_">post</span>(url, params,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;数据+ data&quot;</span>);</span><br><span class="line">&#125;, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4.$.jQuery.getJSON()</strong></p><p>函数没有type参数，返回的是json类型的，不需要转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&quot;test.js&quot;</span>, <span class="keyword">function</span>(<span class="params">json</span>)&#123;  </span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;JSON Data: &quot;</span> + json);  </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//在文档加载后激活函数：</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">get</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>,<span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;数据：&quot;</span> + data + <span class="string">&quot;\n状态：&quot;</span> + status);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>向页面发送 HTTP GET 请求，然后获得返回的结果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用本地文件然后浏览器打开调试会出现<code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</code>错误</p><p><a href="https://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin">https://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 常用库</title>
      <link href="/2018/02/06/JavaScript%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
      <url>/2018/02/06/JavaScript%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.awesomes.cn/repos/Applications">https://www.awesomes.cn/repos/Applications</a></p><p>提示框</p><p><a href="https://lipis.github.io/bootstrap-sweetalert/">https://lipis.github.io/bootstrap-sweetalert/</a></p><p><a href="http://www.layui.com/">http://www.layui.com/</a></p><p><a href="https://github.com/sotayamashita/awesome-css">https://github.com/sotayamashita/awesome-css</a></p><p><a href="https://www.iyuxy.com/w/">https://www.iyuxy.com/w/</a></p><p><a href="http://w3schools.wang/report/top-UI-open-source-framework-summary.html">18个 公认的 世界顶级 UI开源框架 汇总</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发html解析</title>
      <link href="/2018/02/05/iOS%E5%BC%80%E5%8F%91html%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/02/05/iOS%E5%BC%80%E5%8F%91html%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.isaced.com/post-236.html">收集几个objectivec的HTML解析库</a></p><p><a href="https://github.com/graetzer/GDataXML-HTML">https://github.com/graetzer/GDataXML-HTML</a></p><p><a href="https://github.com/topfunky/hpple">https://github.com/topfunky/hpple</a></p><p><a href="https://github.com/zootreeves/objectivec-HMTL-Parser">https://github.com/zootreeves/objectivec-HMTL-Parser</a></p><p><a href="https://www.jianshu.com/p/6614365a25ef">https://www.jianshu.com/p/6614365a25ef</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS 小技巧</title>
      <link href="/2018/02/02/macOS%20%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/02/02/macOS%20%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>macOS 小技巧</p><h4 id="1、xxxApp已损坏，打不开，你应该将它移到废纸篓"><a href="#1、xxxApp已损坏，打不开，你应该将它移到废纸篓" class="headerlink" title="1、xxxApp已损坏，打不开，你应该将它移到废纸篓"></a>1、xxxApp已损坏，打不开，你应该将它移到废纸篓</h4><p>更新到最新系统 macOS Sierra 后发现<code>系统偏好设置-&gt;安全性与隐私</code>中默认已经隐藏了运行安装任何来源App的选项</p><p>在终端中输入命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable  #全局</span><br></pre></td></tr></table></figure><p>针对某一APP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xattr -rd com.apple.quarantine /Applications/应用.app</span><br></pre></td></tr></table></figure><h4 id="2、弹出Emoji表情"><a href="#2、弹出Emoji表情" class="headerlink" title="2、弹出Emoji表情"></a>2、弹出Emoji表情</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shift+Control+E </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac开发调试工具</title>
      <link href="/2018/02/01/%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/02/01/%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="1、whistle"><a href="#1、whistle" class="headerlink" title="1、whistle"></a>1、whistle</h4><p><a href="https://github.com/avwo/whistle">https://github.com/avwo/whistle</a></p><ul><li><p>安装 sudo npm install -g whistle</p></li><li><p>启动whistle: <code>w2 start</code></p></li><li><p>停止whistle: <code>w2 stop</code></p></li></ul><p> 基于Node实现的跨平台调试代理工具，不仅可以作为普通的HTTP代理服务，其更重要的功能是用来抓包、重放或构造HTTP、HTTPS、WebSocket及普通的Socket(TCP)请求，并可以通过类似hosts的简单配置方式操作请求或响应，且支持域名、路径、正则表达式、通配符、通配路径等多种<a href="https://avwo.github.io/whistle/pattern.html">匹配模式</a>，也可以通过插件的形式<a href="https://avwo.github.io/whistle/plugins.html">扩展功能</a>，基本上可以满足你对调试代理的所有需求。</p><h4 id="2、spy-debugger"><a href="#2、spy-debugger" class="headerlink" title="2、spy-debugger"></a>2、spy-debugger</h4><p><a href="https://github.com/wuchangming/spy-debugger">https://github.com/wuchangming/spy-debugger</a></p><ul><li>安装 <code>sudo npm install spy-debugger -g</code></li><li>启动: <code>spy-debugge</code></li><li>停止： 命令行中 <code>ctrl + c</code></li></ul><p>一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP&#x2F;HTTPS，无需USB连接设备。  </p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h4><p>1、页面调试＋抓包<br>2、<a href="https://github.com/wuchangming/spy-debugger#%E4%B8%89%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B">操作简单</a>，无需USB连接设备<br>3、<strong>支持HTTPS</strong>。<br>4、<code>spy-debugger</code>内部集成了<a href="http://people.apache.org/~pmuellr/weinre/docs/latest/"><code>weinre</code></a>、<a href="https://github.com/wuchangming/node-mitmproxy"><code>node-mitmproxy</code></a>、<a href="https://github.com/alibaba/anyproxy"><code>AnyProxy</code></a>。<br>5、自动忽略原生App发起的https请求，只拦截webview发起的https请求。对使用了SSL pinning技术的原生App不造成任何影响。<br>6、可以配合其它代理工具一起使用(默认使用AnyProxy) <a href="https://github.com/wuchangming/spy-debugger#%E8%AE%BE%E7%BD%AE%E5%A4%96%E9%83%A8%E4%BB%A3%E7%90%86%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8anyproxy">(设置外部代理)</a></p><p><a href="https://elemefe.github.io/restc/intro/###">https://elemefe.github.io/restc/intro/###</a></p><h4 id="3、MIHTool"><a href="#3、MIHTool" class="headerlink" title="3、MIHTool"></a>3、MIHTool</h4><p><a href="http://www.mihtool.com/">http://www.mihtool.com/</a></p><p>MIHTool 是前端工程师在iOS设备上调试和优化页面的得力助手.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2018/02/01/JM2018_03_01_101/"/>
      <url>/2018/02/01/JM2018_03_01_101/</url>
      
        <content type="html"><![CDATA[<html><head><title>简历预览</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="robots" content="nofollow" /><link rel="stylesheet" type="text/css" href="https://img00.zhaopin.cn/2012/css/reset.min.css" media="all" /><link rel="stylesheet" type="text/css" href="https://i.zhaopin.com/Content/css/resume_preview.css" media="all" /></head><body><div class="resumeBody"><div class="summary"><h1>胡罗</h1>男<span class="ver-line">|</span>未婚<span class="ver-line">|</span>1989年9月生<span class="ver-line">|</span>            户口：湖南-邵阳<span class="ver-line">|</span>              现居住于:广东 广州-天河区<br />5年工作经验            <span class="ver-line">|</span>无党派人士<p>15360551286</p><p>              E-mail：<a href="mailto:hulu****@126.com">hulu666@126.com</a></p></div><dl class="details"><dt><h5>求职意向</h5></dt><dd><ul><li><strong>工作性质：</strong>全职</li><li><strong>期望职业：</strong>高级软件工程师、软件工程师、软件研发工程师、互联网软件工程师、手机软件开发工程师、</li><li><strong>期望行业：</strong>外包服务、娱乐/体育/休闲、IT服务(系统/数据/维护)、计算机软件、互联网/电子商务</li><li><strong>工作地区：</strong>广州</li><li><strong>期望月薪：</strong>面议</li><li><strong>目前状况：</strong>我目前在职，正考虑换个新环境（如有合适的工作机会，到岗时间一个月左右）</li></ul></dd><dt><h5>专业技能</h5></dt><dd><p style="width:574px; overflow:hidden;word-break: break-all; word-wrap:break-word;">1.熟练掌握objectivec/Swift等开发语言，熟悉iOS/Mac开发<br/>2.熟练应用MVC/MVVM、单例、观察者、代理等设计模式<br/>3.熟练对sqlite数据库操作,对FMDB进行ORM一键CURD操作，掌握数据持久化机制<br/>4.熟练使用像AFNetworking，PureLayout，MJ，YYKit等系列第三方库<br/>5.熟悉socket通信及IM相关技术开发<br/>6.熟悉流媒体音视频开发<br/>7.对地图、分享、推送、即时通讯、视频直播等第三方能快速阅读文档开发<br/>8.熟悉JavaScript,html,python,热衷于Mac程序、Xcode插件等辅助工具开发</p></dd><dt><h5>工作经历</h5></dt><dd><div class="work-experience"><p>2015/12 -- 2018/04</p><h6>太平洋网络<span class="ver-line">|</span>ios开发工程师</h6><p><span>                          行业类别： 互联网/电子商务</span><span><span class="ver-line">|</span>企业性质：上市公司</span><span><span class="ver-line">|</span>规模：1000-9999人</span><span><span class="ver-line">|</span>职位月薪：10001-15000元/月</span></p><p><strong>工作描述：</strong><br />iOS开发高级工程师，先后在太平洋汽车网与时尚网担任iOS开发工作，负责iOS 端项目管理、项目开发，代码优化，性能调优等工作，在此期间负责开发或维护了报价宝典，太平洋汽车网，太平洋车友会，摩登课堂，悦选，樱桃帮等APP。<br/></p></div><div class="work-experience"><p>2014/08 -- 2015/11</p><h6>思埠集团<span class="ver-line">|</span>软件研发工程师</h6><p><span>                          行业类别： 快速消费品（食品/饮料/烟酒/日化）</span><span><span class="ver-line">|</span>企业性质：合资</span><span><span class="ver-line">|</span>规模：500-999人</span><span><span class="ver-line">|</span>职位月薪：保密</span></p><p><strong>工作描述：</strong><br />担任公司iOS组长一职，在此期间带领组员开发和维护了手机思埠、私信、微商联盟、思埠快购、思埠订单助手等App，负责集团App的开发及维护工作，对iOS开发进行技术预研，帮助公司和团队成员一同成长。</p></div><div class="work-experience"><p>2013/10 -- 2014/08</p><h6>上海未星网络科技有限公司<span class="ver-line">|</span>iOS软件工程师</h6><p><span>                          行业类别： 计算机软件</span><span><span class="ver-line">|</span>企业性质：其它</span><span><span class="ver-line">|</span>规模：20-99人</span><span><span class="ver-line">|</span>职位月薪：保密</span></p><p><strong>工作描述：</strong><br />1.负责公司绝大部分iOS平台下App的维护以及新项目的开发<br/>2.参与项目需求分析、产品模块的概要和详细设计；<br/>3.改善软件的性能，提高用户体验；<br/>4.根据公司的要求书写相应的技术文档。</p></div></dd><dt><h5>项目经验</h5></dt><dd><div class="project-experience"><p>2016/10 -- 2018/04</p><h6>太平洋汽车网、太平洋车友会</h6><div /><p><strong>责任描述：</strong><br />负责太平洋汽车网BBS论坛模块的管理与开发维护工作，负责太平洋车友会整个的开发维护工作<br/>由于汽车网人少紧缺，故障不断，特别是汽车网论坛模块，收到大量用户报障反馈，领导高度重视，成立论坛模块专项小组，我又由时尚网调回到汽车网，经过APP端与服务端的努力APP故障大量减少，Crash率由最高的9‰降到0.3‰以下，用户投诉大量减少。<br/>其它：参加第一届太平洋网络研发中心技术创新大赛获得最佳创意奖，二等奖。<br/><br/></p><p><strong>项目简介：</strong><br />太平洋汽车网官方精品应用，集汽车资讯、买车优惠、车友互动于一身，助你花少钱选好车.每月近30万论坛发帖量，5000万用户的口碑推荐.选车用车，一个太平洋汽车网就够了.（官网www.pcauto.com.cn）</p></div><div class="project-experience"><p>2016/02 -- 2016/08</p><h6>摩登课堂</h6><div /><p><strong>责任描述：</strong><br />摩登课堂是时尚网全新打造的APP产品，作为新款APP由于工作量较大，故将我调至时尚网负责开发摩登课堂与樱桃帮的开发维护工作</p><p><strong>项目简介：</strong><br />摩登课堂，是PCGROUP集团太平洋时尚网全新打造的APP产品——一个有趣实用的时尚视频教学轻互动平台。这里集聚时尚圈众多知名美妆、护肤大咖老师，百名大牌明星达人，为想变美的网友们推荐实用有趣的化妆穿搭塑形视频教学与前沿潮流资讯，是您贴心的在线形象顾问！（官网http://www.pclady.com.cn/）</p></div><div class="project-experience"><p>2015/12 -- 2016/02</p><h6>汽车报价宝典</h6><div /><p><strong>责任描述：</strong><br />负责服务端接口文档编写，iOS端项目排期，开发等工作</p><p><strong>项目简介：</strong><br />汽车报价宝典是太平洋汽车网专业团队打造的购车专用APP，旨在为买车用户提供报价和团购活动.您可随时随地查找和对比各款车型的价格、配置，还能实时查看当地优惠促销，买车省钱省心.（http://app.pcauto.com.cn/bjkclient/）</p></div><div class="project-experience"><p>2015/09 -- 2015/11</p><h6>思埠订单助手（橙商）</h6><div /><p><strong>责任描述：</strong><br />主要参与项目新功能的添加以及新需求的修改，Bug修改维护，代码优化等工作，编写App文档。</p><p><strong>项目简介：</strong><br />橙商App：是一款为微商打造的手机应用，集交易采购、销售以及社交与一体，多功能共存的手机应用。是微商拓展销售渠道，增强微商之间的交流，增加微商粉丝量的必备神器。</p></div><div class="project-experience"><p>2015/08 -- 2015/10</p><h6>思埠快购全球购</h6><div /><p><strong>责任描述：</strong><br />将私信项目中IM技术运用到快购，为快购附近的人，客服反馈等添加聊天功能</p><p><strong>项目简介：</strong><br />思埠快购全球购，描绘的是一个拥有宏大发展前景的蓝图，为广大消费者提供海量的国外商品，足不出户即可轻松购买涵盖欧、美、日、韩、加拿大等多个国家的多种海外知名品牌产品；并且同时致力打造一个零门槛创业平台，为广大群众提供创业机会，轻松在掌上就能完成自己的创业梦，帮助万千想要成就人生的追梦者开启一个全新的未来。（官网http://kuaigou.sibu.cn/）</p></div><div class="project-experience"><p>2015/03 -- 2015/10</p><h6>微商联盟</h6><div /><p><strong>责任描述：</strong><br />担任组长一职，负责框架搭建，任务的分配，技术指导，项目中的难点的技术攻关。</p><p><strong>项目简介：</strong><br />诚信微商联盟验证是由权威机构——“中华全国工商业联合会美容化妆品业商会”唯一指定的微商实体身份信息验证服务，确保被验证的微商实体身份真实。账号通过验证后，可被收录至微商信誉档案库，并获得权威验证标示及信誉档案证明，可公开接受全国用户查询，提升微商信誉。（官网https://weishang.org）</p></div><div class="project-experience"><p>2014/10 -- 2014/12</p><h6>私信</h6><div /><p><strong>责任描述：</strong><br />担任组长一职，主要为公司相关App嵌入IM做技术储备，负责IM模块socket 收发信息封装，文字，语音，视频等功能。后因服务端张总(支付宝大牛)离去而停止开发。团队转为开发微商联盟，手机思埠3.0 （官网http://www.sixin.cn/）</p><p><strong>项目简介：</strong><br />“私信”是于2014年11月推出的一款基于地理位置的移动社交产品。<br/>通过私信，您可以认识身边的人。还可以和朋友交换各自的地理位置，用有趣的表情聊天等等。</p></div><div class="project-experience"><p>2014/10 -- 2014/10</p><h6>中国鲜花网</h6><div /><p><strong>责任描述：</strong><br />鲜花网为公司CEO名下网站,个人利用业余时间，独立快速的开发了中国鲜花网App并成功上架</p><p><strong>项目简介：</strong><br />中国鲜花网是全球鲜花速递界信誉致上的购物商城。百万种鲜花、蛋糕、巧克力、卡通花束、生日礼物、开业花篮等几十大类。（官网http://www.xianhua.com.cn/）</p></div><div class="project-experience"><p>2014/08 -- 2015/11</p><h6>手机思埠</h6><div /><p><strong>责任描述：</strong><br />项目最初由我与同学2人开发，第一版一周内开发完毕上线，主要负责App框架搭建，项目工具类编写，一些常用代码的封装及App代码和性能优化，后担任私信项目组长进行研发，手机思埠3.0后重新带领团队进行开发</p><p><strong>项目简介：</strong><br />手机思埠思埠集团为手机用户打造的移动客户端思埠官方服务平台，方便买家进行移动购物，具有商品搜索、浏览、购买、支付、物流查询、在线沟通等功能；同时也支持卖家进行网上开店，具有发布商品信息、处理订单、进行价格管理、物流管理、客户管理、服务商登记等功能，更加方便用户开店创业，为其拓展事业提供新渠道。（官网http://app.sibu.cn/）</p></div><div class="project-experience"><p>2013/10 -- 2014/02</p><h6>零钱网、快送宝</h6><div><p><strong>软件环境：</strong>Xcode</p><p><strong>硬件环境：</strong>Imac</p><p><strong>开发工具：</strong>Xcode 4.5</p></div><p><strong>责任描述：</strong><br />1.App开发维护<br/>2.新增功能开发</p><p><strong>项目简介：</strong><br />零钱网<br/>1、用户可以在软件内随时随地求职，非常方便 <br/>2、还可以推荐好友面试，使得好友也能随时随地找工作<br/> 3、推荐成功后还可以获得返利，实现双赢<br/> 4、还可以把推荐信息，职位信息，返利信息分享到各种平台，让大家一起共享资源，共享快乐！<br/><br/>快送宝<br/>快送宝APP，这是一款为苏州快送宝网络技术有限公司定制的一款在线订餐类App，专注于为城市家庭用户提供在线订餐服务和线下即时配送物流，消费者可以通过App方便的从周边知名特色餐厅在线订餐，并由专业物流团队配送到家。<br/></p></div></dd><dt><h5>教育经历</h5></dt><dd><div class="education-background"><p>2010/10 -- 2014/06</p><h6>湖南科技学院<span class="ver-line">|</span>电子信息工程<span class="ver-line">|</span>本科<span class="ver-line">|</span>统招</h6></div></dd><dt><h5>语言能力</h5></dt><dd><div class="language-skill">英语<span>                            ：读写能力熟练<span class="ver-line">|</span> 听说能力良好</span></div></dd><dt><h5>专业技能</h5></dt><dd><div class="professional-skill">iOS开发工程师<span class="ver-line">|</span>良好<span class="ver-line">|</span>26</div></dd><dt><h5>个人博客</h5></dt><dd><p>博客 http://huluo666.cn/<br/>简书 https://www.jianshu.com/u/4109243691be</p></dd></dl><input id="neturlparam" type="hidden" value="AppId=1&Id=622748769&Timestamp=1520391686&Callback=&signature=D604BAC7DE696745CAF4E77A392FCDC4" /></div></body></html>]]></content>
      
      
      <categories>
          
          <category> resume </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS/Cocoa调用python</title>
      <link href="/2018/01/29/%20iOS:Cocoa%E8%B0%83%E7%94%A8python/"/>
      <url>/2018/01/29/%20iOS:Cocoa%E8%B0%83%E7%94%A8python/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/ce26bfc7474f">C++与Python的混合编程-C++调用Python</a><br><a href="https://github.com/hailongiPhone/python-into-iOS">https://github.com/hailongiPhone/python-into-iOS</a><br><a href="https://github.com/PerfectlySoft/Perfect-Python">https://github.com/PerfectlySoft/Perfect-Python</a><br><a href="https://gist.github.com/andyvanee/3754412">https://gist.github.com/andyvanee/3754412</a><br><a href="https://github.com/cobbal/python-for-iphone">https://github.com/cobbal/python-for-iphone</a><br><a href="http://www.cnblogs.com/Hisin/archive/2012/02/27/2370590.html">http://www.cnblogs.com/Hisin/archive/2012/02/27/2370590.html</a></p><p>答题<br><a href="https://www.ctolib.com/BarryZhan-answer-helper.html">https://www.ctolib.com/BarryZhan-answer-helper.html</a><br><a href="https://www.ctolib.com/smileboywtu-MillionHeroAssistant.html">https://www.ctolib.com/smileboywtu-MillionHeroAssistant.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python获取百度结果数</title>
      <link href="/2018/01/21/python%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6%E7%BB%93%E6%9E%9C%E6%95%B0/"/>
      <url>/2018/01/21/python%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6%E7%BB%93%E6%9E%9C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_html</span>(<span class="params">keywords</span>):</span><br><span class="line"><span class="comment"># 抓取参数 https://www.baidu.com/s?wd=testRequest</span></span><br><span class="line">key = &#123;<span class="string">&#x27;wd&#x27;</span>: keywords&#125;</span><br><span class="line"><span class="comment"># 请求Header</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;(Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 抓取数据内容</span></span><br><span class="line">web_content = requests.get(<span class="string">&quot;https://www.baidu.com/s?&quot;</span>,params=key, headers=headers, timeout=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span> web_content.text</span><br><span class="line">content=download_html(<span class="string">&#x27;ios&#x27;</span>)</span><br><span class="line">regexName = unicode(<span class="string">&quot;百度为您找到相关结果约(.+?)个&quot;</span>, <span class="string">&quot;utf8&quot;</span>) <span class="comment">#中文需要转码</span></span><br><span class="line">num = re.search(regexName,content).group(<span class="number">1</span>)</span><br><span class="line">num_int = <span class="built_in">int</span>(num.replace(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(num_int)</span><br></pre></td></tr></table></figure><p><code>user-agent</code> 大全 <a href="http://www.fynas.com/ua">http://www.fynas.com/ua</a></p><p>注意：使用正则匹配中文需求对中文正则表达式进行转码否则，无法正常匹配</p><p>比如Python源码的头文件中声明的编码方式为UTF-8，那么中文需要转成对应的UTF-8编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></span><br><span class="line"></span><br><span class="line">regexName = unicode(<span class="string">&quot;百度为您找到相关结果约(.+?)个&quot;</span>, <span class="string">&quot;utf8&quot;</span>) <span class="comment">#中文需要转码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要写博客</title>
      <link href="/2018/01/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/01/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>写博客到现在的时间已经2年多了，回看一下，发现自己写的还真不少，但想想作为一个快4年的开发者来说，前2年的积累的确实有点少，至少从笔记上来说，写博客的原因有很多，简单来说有以下几点。</p><ul><li>将自己好不容易理解记住的东西写下来，给自己备查；</li><li>记下一些研究课题，一些参考资源</li><li>个人知识库的一个补充</li></ul><p>​      虽然博客质量不是很高，但坚持下来，收获还不小，写博客能让自己更好的思考，遇到类似问题能很快的查找解决，不用浪费时间去查找资料。把遇到的问题记录下来，日后可以不断补充升华。</p><p>​写东西还需要理由吗？想写就写，想发就发，如此而已。当然这仅对个人而言，如果是比较有名的人物，还得不断提高文章的质量。人总是有很多想法，也总是容易忘记，用文字把她记下，日后翻阅也许有一些新的体会和收获。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cell分割线顶格</title>
      <link href="/2018/01/15/tableview%E5%90%84%E7%A7%8D%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
      <url>/2018/01/15/tableview%E5%90%84%E7%A7%8D%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>Cell分割线顶格</p><p><a href="https://stackoverflow.com/questions/25770119/ios-8-uitableview-separator-inset-0-not-working">https://stackoverflow.com/questions/25770119/ios-8-uitableview-separator-inset-0-not-working</a></p><p><a href="http://www.jianshu.com/p/2e77d478f333">UITableView分割线Separator这件小事</a></p><p><a href="https://segmentfault.com/q/1010000004502905/a-1020000004505368">https://segmentfault.com/q/1010000004502905/a-1020000004505368</a></p><p><a href="http://www.jianshu.com/p/e7cf5967cccb">http://www.jianshu.com/p/e7cf5967cccb</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式转换</title>
      <link href="/2018/01/15/regexConvertTool/"/>
      <url>/2018/01/15/regexConvertTool/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"> <title>正则表达式转换</title><link rel="stylesheet" href="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css">  <script src="http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js"></script><script src="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js"></script><link rel="stylesheet" type="text/css" href=""><style type="text/css">/* textarea 自适应父容器大小 */  .comments {  width: 100%; /*自动适应父布局宽度*/  overflow: auto;  word-break: break-all;min-height: 50px; max-height: 200px;margin-left: 0px; /*auto*/margin-right: 0px; margin-top: 10px;; margin-bottom: 10px;; padding: 0px;outline: 0; border: 1px solid #a0b3d6; font-size: 14px; word-wrap: break-word;}  .tableCell {  width: 100%; /*自动适应父布局宽度*/  overflow: auto;  word-break: break-all;min-height: 30px; max-height: 200px;margin-left:  0px; /*auto*/margin-right: 0px; margin-top: 10px;; margin-bottom: 10px;; }  </style></head><body><div class="container"><p class="text"><!-- 正则表达式转义符 --></p><div class="row" ><div class="col-xs-5" style="background-color: #dedef8;"><textarea cols="80" rows="10" id="codeEditor" class="comments" placeholder="请输入您要转换的正则表达式">(f|ht){1}(tp|tps):\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&=]*)?</textarea>  </div><div class="col-xs-2"  style="height:200px"><p class="tableCell"> <center><button type="button" class="btn btn-primary" id="button_id">添加转义符</button></center> <p></p> <center><button type="button" class="btn btn-info" id="button_id2">移除转义符</button></center> <p></p> <center><button type="button" class="btn btn-default" id="button_id3">重 置</button></center></p></div><div class="col-xs-5" style="background-color: #dedef8;"><textarea cols="80" rows="10" id="templateCode" class="comments" placeholder="转换结果"></textarea>  </div></div></div><!-- JS函数 --><script>//添加转义符$("#button_id").click(function(){varcontent =$('#codeEditor').val(); //欲处理的文本  var content2=escapeRegExp(content);$("#templateCode").text(content2);});//移除转义符$("#button_id2").click(function(){varcontent =$('#codeEditor').val(); // 欲处理的文本  var content2=unEscapeRegExp(content);$("#templateCode").text(content2);});$("#button_id3").click(function(){$("#templateCode").text("");});//移除转义符function unEscapeRegExptest(str) {     return str.replace(/([.?*+^$[\]\\(){}-])/g, "\\$1");}function unEscapeRegExp(str) {if (!str) return "";if (str.length == 0) return "";str =  str.replace(/(\\\/)/g,'/');// \/str =  str.replace(/(\\\^)/g,'^');// \^str =  str.replace(/(\\\$)/g,'$');// \$str =  str.replace(/(\\\()/g,'(');// \( str =  str.replace(/(\\\))/g,')');// \)str =  str.replace(/(\\\[)/g,'[');// \[str =  str.replace(/(\\\])/g,']');// \] str =  str.replace(/(\\\{)/g,'{');// \{str =  str.replace(/(\\\})/g,'}');// \}str =  str.replace(/(\\\.)/g,'.');// \.str =  str.replace(/(\\\?)/g,'?');// \?str =  str.replace(/(\\\+)/g,'+');// \+str =  str.replace(/(\\\*)/g,'*');// \*str =  str.replace(/(\\\|)/g,'|');// \|return str;}function escapeRegExp(str) {var pattern = str; var regexString;try {var regex=new RegExp(pattern);regexString = String(regex).slice(1, -1);} catch(e) {regexString="正则表达式错误,请仔细检查";console.log("Error"+e);}return regexString;}</script></body></html>]]></content>
      
      
      <categories>
          
          <category> devtools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串常用操作</title>
      <link href="/2018/01/11/iOS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/01/11/iOS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="ios-去除字符串首尾空格、换行"><a href="#ios-去除字符串首尾空格、换行" class="headerlink" title="ios 去除字符串首尾空格、换行"></a>ios 去除字符串首尾空格、换行</h4><p>1）如果您只需要从字符串中删除给定的字符（比如空格字符），请使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *yourString = @&quot;   .@^this text has spaces before and after*&amp; &quot;;</span><br><span class="line">[yourString stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;]</span><br></pre></td></tr></table></figure><p>2）如果你真的需要删除一组字符（即不仅是空格字符，而是任何空格字符，如空格，制表符，牢不可破的空间等），你可以拆分你的字符串使用<code>whitespaceCharacterSet</code>，然后再加入单词在一个串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray* words = [yourString componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];</span><br><span class="line">NSString* nospacestring = [words componentsJoinedByString:@&quot;&quot;];</span><br></pre></td></tr></table></figure><p>清除首尾空格(注意：NSCharacterSet<code>只会操作字符串的首尾</code>)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)controlCharacterSet;  <span class="comment">//控制符</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)whitespaceCharacterSet; <span class="comment">//空格</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)whitespaceAndNewlineCharacterSet; <span class="comment">//空格和换行</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)decimalDigitCharacterSet; <span class="comment">//小数</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)letterCharacterSet; <span class="comment">//文字</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)lowercaseLetterCharacterSet; <span class="comment">//字母数字</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)uppercaseLetterCharacterSet; <span class="comment">//可分解</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)nonBaseCharacterSet;</span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)alphanumericCharacterSet; <span class="comment">//所有数字和字母(大小写)</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)decomposableCharacterSet;<span class="comment">////0-9的数字</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)illegalCharacterSet; <span class="comment">//非法</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)punctuationCharacterSet; <span class="comment">//标点符号</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)capitalizedLetterCharacterSet; <span class="comment">//大写</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)symbolCharacterSet; <span class="comment">//符号</span></span><br><span class="line">+ (<span class="built_in">NSCharacterSet</span> *)newlineCharacterSet <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_5, <span class="number">2</span>_0); <span class="comment">//换行符</span></span><br></pre></td></tr></table></figure><p>字符串操作</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;   .@^this text has spaces before and after*&amp; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去除字符串中的空格*/</span></span><br><span class="line"><span class="built_in">NSString</span> *trimmedString = [string stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceCharacterSet]];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去除字符串中的空格和换行*/</span></span><br><span class="line">trimmedString = [trimmedString stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去除字符串中的标点*/</span></span><br><span class="line">trimmedString = [trimmedString stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> punctuationCharacterSet]];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去除字符串中的符号*/</span></span><br><span class="line">trimmedString = [trimmedString stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> symbolCharacterSet]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*去除字符串中的所有空格符号*/</span></span><br><span class="line">-(<span class="built_in">NSString</span>*)removeAllWhiteSpace:(<span class="built_in">NSString</span>*)original</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSCharacterSet</span> *whitespaces = [<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet];</span><br><span class="line">    <span class="built_in">NSArray</span> *parts = [original componentsSeparatedByCharactersInSet:whitespaces];</span><br><span class="line">    <span class="built_in">NSString</span>* rval = [parts componentsJoinedByString:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> rval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/7628470/remove-all-whitespaces-from-nsstring">Remove all whitespaces from NSString</a></p><p><a href="https://www.zybuluo.com/chinese-ppmt/note/609656">https://www.zybuluo.com/chinese-ppmt/note/609656</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tinypng图片压缩脚本</title>
      <link href="/2018/01/08/%20Tinypng%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/01/08/%20Tinypng%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>本想写个Finder插件，鼠标右键弹出tinypng压缩菜单，直接点击压缩，在App程序上执行没问题，但Finder扩展上报错了，查了很多资料发现这是苹果的一个bug，哪怕开了沙盒，扩展也无法读写本地文件，几年了也没修复，所以放弃这种做法，脚本还是能用的。</p><p><a href="https://tinypng.com/">https://tinypng.com/</a></p><h5 id="1、tinify安装"><a href="#1、tinify安装" class="headerlink" title="1、tinify安装"></a>1、tinify安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tinify</span><br></pre></td></tr></table></figure><h5 id="2、将脚本与压缩图片放在同一目录执行脚本"><a href="#2、将脚本与压缩图片放在同一目录执行脚本" class="headerlink" title="2、将脚本与压缩图片放在同一目录执行脚本"></a>2、将脚本与压缩图片放在同一目录执行脚本</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xxxx/tinypng.py</span><br><span class="line">./tinypng.py</span><br></pre></td></tr></table></figure><p>tinypng.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -- coding: UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">tinify.key = <span class="string">&quot;92xubC2QKkKYUoeaD4yax-gAbER06fbh&quot;</span> <span class="comment">#自己去申请tinify的开发者key，网址：https://tinypng.com/developers</span></span><br><span class="line"><span class="comment">#获取当前目录</span></span><br><span class="line"><span class="comment">#currentDir =&quot;/Users/pconline/iOSDev/AllDevFile/python/test&quot; # source path</span></span><br><span class="line">currentDir = os.getcwd()</span><br><span class="line">toFilePath = currentDir+<span class="string">&quot;/tinyPng&quot;</span>         <span class="comment"># 输出路径</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;currentDir=%s&quot;</span> %currentDir</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;toFilePath=%s&quot;</span> %toFilePath</span><br><span class="line"><span class="comment">#currentDir =&quot;/Users/pconline/iOSDev/AllDevFile/python/test&quot; # source path</span></span><br><span class="line"><span class="comment">#压缩的图片类型</span></span><br><span class="line">supportImgType = [<span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;.png&#x27;</span>];</span><br><span class="line"><span class="comment">#遍历目录下的图片，并批量压缩图片</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(currentDir):</span><br><span class="line">    itemPath=os.path.join(currentDir,item)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(itemPath):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;文件名==&quot;</span>+item</span><br><span class="line">        fileName, fileSuffix = os.path.splitext(item)</span><br><span class="line">        <span class="keyword">if</span> fileSuffix <span class="keyword">in</span> supportImgType:</span><br><span class="line">            <span class="comment">#如果tinypng目录不存在就创建</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(toFilePath):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.mkdir(toFilePath)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Doing:&#x27;</span>+item) <span class="comment">#当前正在压缩的图片名称</span></span><br><span class="line">            toFullName = toFilePath + <span class="string">&#x27;/&#x27;</span> + item</span><br><span class="line">            source = tinify.from_file(itemPath)</span><br><span class="line">            source.to_file(toFullName)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Finnish:&#x27;</span>+item) <span class="comment">#压缩完成的图片名称</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js创建对象和方法</title>
      <link href="/2018/01/03/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2018/01/03/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>一.直接创建</p><p>通过键值对的形式将对象中的属性和方法连接起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、先创建对象，然后添加属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">数组字面量法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> hotel=&#123;&#125;</span><br><span class="line">    hotel.<span class="property">name</span>=<span class="string">&#x27;Quay&#x27;</span>;</span><br><span class="line">    hotel.<span class="property">rooms</span>=<span class="number">40</span>;</span><br><span class="line">    hotel.<span class="property">booked</span>=<span class="number">25</span>;</span><br><span class="line">    hotel.<span class="property">checkAvilablity</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">rooms</span>-<span class="variable language_">this</span>.<span class="property">booked</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">alert</span>(hotel.<span class="property">name</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对象构造函数法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> hotel=<span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    hotel.<span class="property">name</span>=<span class="string">&#x27;Quay&#x27;</span>;</span><br><span class="line">    hotel.<span class="property">rooms</span>=<span class="number">40</span>;</span><br><span class="line">    hotel.<span class="property">booked</span>=<span class="number">25</span>;</span><br><span class="line">    hotel.<span class="property">checkAvilablity</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">rooms</span>-<span class="variable language_">this</span>.<span class="property">booked</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">alert</span>(hotel.<span class="property">name</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、创建对象的同时创建属性和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">字面量法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var hotel=&#123;</span><br><span class="line">        name:&#x27;Quay&#x27;,</span><br><span class="line">        rooms:40,</span><br><span class="line">        booked:25,</span><br><span class="line">        checkAvilablity:function()&#123;</span><br><span class="line">        return this.rooms-this.booked</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">alert(hotel.name)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">构造函数法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function Hotel(name,rooms,booked)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.rooms=rooms;</span><br><span class="line">    this.booked=booked;</span><br><span class="line">    this.checkAvilablity=function()&#123;</span><br><span class="line">        return this.rooms-this.booked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var quayhotel=new Hotel(&#x27;Quay&#x27;,40,25);</span><br><span class="line">alert(quayhotel.name);</span><br><span class="line">var parkhotel =new Hotel(&#x27;Park&#x27;,120,77);</span><br><span class="line">alert(parkhotel.name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>二.使用工厂模式创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个空对象</span></span><br><span class="line">    <span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    per.<span class="property">name</span> = name;</span><br><span class="line">    per.<span class="property">age</span> = age;</span><br><span class="line">    per.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把创建好的对象返回出去</span></span><br><span class="line">    <span class="keyword">return</span> per;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="title function_">createPerson</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>通过创建一个空对象，在空对象中加入相关属性和属性值，最后记得返回出创建的对象</p><p>三.使用构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreatePerson</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>四.通过原型创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreatePerson</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>  = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>  = age;</span><br><span class="line">    <span class="title class_">CreatePerson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span>  = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法就是为了改进对于相同的属性</p><p><a href="https://www.jianshu.com/p/01f90948cfe7">https://www.jianshu.com/p/01f90948cfe7</a></p><p>创建函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> myFunction=<span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;return a+b&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端搜索命令行工具</title>
      <link href="/2017/12/29/Mac%E7%BB%88%E7%AB%AF%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/12/29/Mac%E7%BB%88%E7%AB%AF%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><code>mdfind</code>命令就是<code>Spotlight</code>功能的终端界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name &quot;Photo 1.PNG&quot;  //搜索文件名Photo 1.PNG</span><br><span class="line">mdfind -onlyin ~/Library plist //搜索指定文件夹</span><br></pre></td></tr></table></figure><h3 id="The-Silver-Searcher"><a href="#The-Silver-Searcher" class="headerlink" title="The Silver Searcher"></a>The Silver Searcher</h3><p><a href="https://github.com/ggreer/the_silver_searcher">https://github.com/ggreer/the_silver_searcher</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install the_silver_searcher //安装</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Usage: ag [FILE-TYPE] [OPTIONS] PATTERN [PATH]</span><br><span class="line">   ag [文件类型]  [选择] [正则] []</span><br></pre></td></tr></table></figure><p>常用命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用参数</span><br><span class="line">-i 忽略大小写</span><br><span class="line">-l 只列出文件名</span><br><span class="line">-g 文件名匹配</span><br><span class="line">--php 只搜索php文件</span><br><span class="line">--ignore-dir 忽略目录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ag  动画   //搜索当前路径带文件名或文件内容带“动画”文件</span><br><span class="line">ag -g 动画   //搜索当前路径文件名带“动画”文件</span><br><span class="line">ag &quot;动画&quot; &#x27;./&#x27;        //搜索该目录下以及其子目录下的所有含有&quot;image&quot;的文件</span><br><span class="line">ag --markdown  动画  //搜索指定类型</span><br><span class="line">ag --ignore-dir sitedata --php hx /www/baidu.com</span><br></pre></td></tr></table></figure><p>  -c –count              Only print the number of matches in each file.</p><p>匹配文件关键词个数</p><p> -g PATTERN              Print filenames matching PATTERN</p><p>匹配文件</p><p>-l –files-with-matches Only print filenames that contain matches</p><p>只输出匹配内容&#x2F;&#x2F;取相反结果 用大写-L</p><p>  -o –only-matching      Prints only the matching part of the lines</p><p>输出匹配所在行</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS内联函数</title>
      <link href="/2017/12/29/iOS%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
      <url>/2017/12/29/iOS%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>解决函数调用效率</p><ul><li><p>函数之间调用，是内存地址之间的调用，当函数调用完毕之后还会返回原来函数执行的地址。函数调用有时间开销，内联函数就是为了解决这一问题。</p><p>​</p></li></ul><p>使用</p><p><strong>AFNetWorking</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> * AFContentTypeForPathExtension(<span class="built_in">NSString</span> *extension) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *UTI = (__bridge_transfer <span class="built_in">NSString</span> *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (__bridge <span class="built_in">CFStringRef</span>)extension, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *contentType = (__bridge_transfer <span class="built_in">NSString</span> *)UTTypeCopyPreferredTagWithClass((__bridge <span class="built_in">CFStringRef</span>)UTI, kUTTagClassMIMEType);</span><br><span class="line">    <span class="keyword">if</span> (!contentType) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">@&quot;application/octet-stream&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static inline CGSize Label_CGSizePixel(CGSize size) &#123;</span><br><span class="line">    static CGFloat scale = 0.0f;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        scale = [UIScreen mainScreen].scale;</span><br><span class="line">    &#125;);</span><br><span class="line">    return CGSizeMake(round(size.width * scale) / scale,</span><br><span class="line">                      round(size.height * scale) / scale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CG_INLINE void POST_NOTIFICATION(NSString *name, id object, NSDictionary *userInfo)&#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:name object:object userInfo:userInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  define CG_INLINE static inline</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line">FOUNDATION_EXPORT <span class="keyword">inline</span> <span class="built_in">NSString</span> * myInlineFunction(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="type">void</span> method(<span class="type">int</span> a,<span class="type">char</span> *b) &#123;</span><br><span class="line">    <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">extern</span> Type Example(<span class="type">void</span>);</span><br><span class="line"><span class="keyword">inline</span> Type Example(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//..........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift 学习—Swift与OC对比</title>
      <link href="/2017/12/28/Swift%20%E5%AD%A6%E4%B9%A0%E2%80%94Swift%E4%B8%8EOC%E5%AF%B9%E6%AF%94/"/>
      <url>/2017/12/28/Swift%20%E5%AD%A6%E4%B9%A0%E2%80%94Swift%E4%B8%8EOC%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/08fb33a346c6">iOS:OC开发中的写法与Swift中写法的对比</a></p><p><a href="https://www.jianshu.com/p/4a99b5405e11">Swift 和 OC 对比</a></p><p>函数OC</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不带参数</span></span><br><span class="line">- (<span class="type">void</span>)say&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带有一个参数</span></span><br><span class="line">- (<span class="type">void</span>)sayWithName:(<span class="built_in">NSString</span> *)name&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;hello %@&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带有多个参数</span></span><br><span class="line">- (<span class="type">void</span>)sayWithName:(<span class="built_in">NSString</span> *)name age:(<span class="built_in">NSInteger</span>)age&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;hello %@ , I&#x27;m %tu years old&quot;</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)info&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;name = CDH, age = 20&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值,并且带有返回值</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)infoWithName:(<span class="built_in">NSString</span> *)name age:(<span class="built_in">NSInteger</span>)age&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:</span><br><span class="line">    <span class="string">@&quot;name = %@,</span></span><br><span class="line"><span class="string">    age = %tu&quot;</span>, name, age];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参无返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">say</span>() -&gt; <span class="type">Void</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">say()</span><br><span class="line"><span class="comment">//输出结果: hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">say1</span>() &#123;  <span class="comment">//如果没有返回值可以不写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">say1()</span><br><span class="line"><span class="comment">//输出结果: hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有参无返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sayWithName</span>(<span class="params">name</span>:<span class="type">String</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello <span class="subst">\(name)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">sayWithName(<span class="string">&quot;CDH&quot;</span>)</span><br><span class="line"><span class="comment">//输出结果: hello CDH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带有多个参数</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sayWithName</span>(<span class="params">name</span>:<span class="type">String</span>, <span class="params">age</span>:<span class="type">Int</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello <span class="subst">\(name)</span> , I&#x27;m <span class="subst">\(age)</span> years old &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">sayWithName(<span class="string">&quot;CDH&quot;</span>, age: <span class="number">20</span>)</span><br><span class="line"><span class="comment">//输出结果: hello CDH , I&#x27;m 20 years old</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无参有返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">info</span>() -&gt; <span class="type">String</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;name = cdh, age = 20&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(info())</span><br><span class="line"><span class="comment">//输出结果: name = cdh, age = 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有参有返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">info</span>(<span class="params">name</span>:<span class="type">String</span>, <span class="params">age</span>:<span class="type">Int</span>) -&gt; <span class="type">String</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;name = <span class="subst">\(name)</span>, age = <span class="subst">\(age)</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(info(<span class="string">&quot;cdh&quot;</span>, age:<span class="number">20</span>))</span><br><span class="line"><span class="comment">//输出结果: name = cdh, age = 20</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入视频,音乐</title>
      <link href="/2017/12/28/hexo%E6%8F%92%E5%85%A5%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
      <url>/2017/12/28/hexo%E6%8F%92%E5%85%A5%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>iOS 视频播放测试</p><p>视频1</p><iframe    height=200 width="80%"   src="http://player.youku.com/embed/XNjcyMDU4Njg0"      frameborder=0>  </iframe>  <p>视频2</p><iframe    height=200 width="80%"   src="http://player.youku.com/embed/XMzI2Nzk1MDU0NA=="      frameborder=0>  </iframe>  <p>视频3</p><iframe     height=200 width="100%"   src="http://player.youku.com/embed/XMzI2OTMxOTYxMg=="      frameborder=0 allowfullscreen>  </iframe>  ]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL解析</title>
      <link href="/2017/12/28/iOS%20NSURL%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/12/28/iOS%20NSURL%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@&quot;absoluteURL--%@&quot;,requestURL.absoluteURL);//绝对NSurl</span><br><span class="line">NSLog(@&quot;absoluteString--%@&quot;,requestURL.absoluteString);//绝对url字符串</span><br><span class="line">NSLog(@&quot;scheme--%@&quot;,requestURL.scheme);//协议</span><br><span class="line">NSLog(@&quot;user--%@&quot;,requestURL.user);//用户名</span><br><span class="line">NSLog(@&quot;password--%@&quot;,requestURL.password);//密码</span><br><span class="line">NSLog(@&quot;baseUrl--%@&quot;,requestURL.baseURL);//根目录、只有在通过跟目录生成的url中才会体现</span><br><span class="line">NSLog(@&quot;resourceSpecifier--%@&quot;,requestURL.resourceSpecifier);//资源说明符</span><br><span class="line">NSLog(@&quot;relativeString--%@&quot;,requestURL.relativeString);//相对路径（带参数）、如果没有baseUrl。则全部显示</span><br><span class="line">NSLog(@&quot;relativePath--%@&quot;,requestURL.relativePath);//相对路径、不带参数</span><br><span class="line">NSLog(@&quot;host--%@&quot;,requestURL.host);//主机域名</span><br><span class="line">NSLog(@&quot;port--%@&quot;,requestURL.port);//端口</span><br><span class="line">NSLog(@&quot;query--%@&quot;,requestURL.query);//参数</span><br><span class="line">NSLog(@&quot;fragment--%@&quot;,requestURL.fragment);//锚点、可以在网站打开时候直接移动至此</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>pcautobrowser:&#x2F;&#x2F;information-article&#x2F;11141215</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">absoluteURL--<span class="attr">pcautobrowser</span>:<span class="comment">//information-article/11141215</span></span><br><span class="line">absoluteString--<span class="attr">pcautobrowser</span>:<span class="comment">//information-article/11141215</span></span><br><span class="line">scheme--pcautobrowser</span><br><span class="line">user--(<span class="literal">null</span>)</span><br><span class="line">password--(<span class="literal">null</span>)</span><br><span class="line">baseUrl--(<span class="literal">null</span>)</span><br><span class="line">resourceSpecifier--<span class="comment">//information-article/11141215</span></span><br><span class="line">relativeString--<span class="attr">pcautobrowser</span>:<span class="comment">//information-article/11141215</span></span><br><span class="line">relativePath--/<span class="number">11141215</span></span><br><span class="line">host--information-article</span><br><span class="line">port--(<span class="literal">null</span>)</span><br><span class="line">query--(<span class="literal">null</span>)</span><br><span class="line">fragment--(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><blockquote><p>pcautobrowser:&#x2F;&#x2F;model&#x2F;76313?serialId&#x3D;9550&amp;serialName&#x3D;A3&amp;modelName&#x3D;201Sportback</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">absoluteURL--pcautobrowser<span class="punctuation">:</span><span class="comment">//model/76313?serialId=9550&amp;serialName=A3&amp;modelName=201Sportback</span></span><br><span class="line">absoluteString--pcautobrowser<span class="punctuation">:</span><span class="comment">//model/76313?serialId=9550&amp;serialName=A3&amp;modelName=201Sportback</span></span><br><span class="line">scheme--pcautobrowser</span><br><span class="line">user--(<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line">password--(<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line">baseUrl--(<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line">resourceSpecifier--<span class="comment">//model/76313?serialId=9550&amp;serialName=A3&amp;modelName=201Sportback</span></span><br><span class="line">relativeString--pcautobrowser<span class="punctuation">:</span><span class="comment">//model/76313?serialId=9550&amp;serialName=A3&amp;modelName=201Sportback</span></span><br><span class="line">relativePath--/<span class="number">76313</span></span><br><span class="line">host--model</span><br><span class="line">port--(<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line">query--serialId=<span class="number">9550</span>&amp;serialName=A3&amp;modelName=<span class="number">201</span>Sportback</span><br><span class="line">fragment--(<span class="literal"><span class="keyword">null</span></span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/evgenyneu/ios-javascriptcore-demo">https://github.com/evgenyneu/ios-javascriptcore-demo</a></p><p><a href="http://www.zhangxinxu.com/wordpress/2010/04/javascript%E5%AE%9E%E7%8E%B0http%E5%9C%B0%E5%9D%80%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E5%B9%B6%E6%B7%BB%E5%8A%A0url%E9%93%BE%E6%8E%A5/">JavaScript实现http地址自动检测并添加URL链接</a></p><p><a href="https://stackoverflow.com/questions/3692947/get-parts-of-a-nsurl-in-objectivec">Get parts of a NSURL in objectivec</a></p><p><a href="https://stackoverflow.com/questions/8756683/best-way-to-parse-url-string-to-get-values-for-keys">Best way to parse URL string to get values for keys?</a></p><p><a href="https://stackoverflow.com/questions/718429/creating-url-query-parameters-from-nsdictionary-objects-in-objectivec">Creating URL query parameters from NSDictionary objects in ObjectiveC</a></p><p><a href="https://stackoverflow.com/questions/4271916/url-minus-query-string-in-objectivec">Url minus query string in objectivec</a></p><p><a href="https://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links">https://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links</a></p><p><a href="https://stackoverflow.com/questions/1500260/detect-urls-in-text-with-javascript">https://stackoverflow.com/questions/1500260/detect-urls-in-text-with-javascript</a></p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON数据压缩</title>
      <link href="/2017/12/27/JSON%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
      <url>/2017/12/27/JSON%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/lz-string/1.4.4/base64-string.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sample json object</span></span><br><span class="line"><span class="keyword">var</span> jsonobj = &#123;<span class="string">&#x27;sample&#x27;</span>: <span class="string">&#x27;This is supposed to be ling string&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="string">&#x27;another long string which is going to be compressed&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compress string before storing in localStorage</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;mystring&#x27;</span>, <span class="title class_">LZString</span>.<span class="title function_">compress</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonobj)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// decompress localStorage item stored</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="title class_">LZString</span>.<span class="title function_">decompress</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;mystring&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse it to JSON object</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(string);</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/20773945/storing-compressed-json-data-in-local-storage">https://stackoverflow.com/questions/20773945/storing-compressed-json-data-in-local-storage</a></p><p><a href="https://stackoverflow.com/questions/294297/javascript-implementation-of-gzip">https://stackoverflow.com/questions/294297/javascript-implementation-of-gzip</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS代码执行时间</title>
      <link href="/2017/12/27/iOS%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
      <url>/2017/12/27/iOS%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>在测试代码效率是往往会用到</p><p>StackOverflow <a href="https://stackoverflow.com/questions/2129794/how-to-log-a-methods-execution-time-exactly-in-milliseconds">How to log a method’s execution time exactly in milliseconds?</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单位换算</span></span><br><span class="line"><span class="number">1</span>分(min)=<span class="number">60</span>秒(s)</span><br><span class="line"><span class="number">1</span>秒(s)=<span class="number">1000</span>毫秒(ms)</span><br><span class="line"><span class="number">1</span>毫秒(ms)=<span class="number">1000</span>微秒(μs)</span><br><span class="line"><span class="number">1</span>微秒(μs)=<span class="number">1000</span>纳秒(ns)</span><br></pre></td></tr></table></figure><p>一、CFAbsoluteTime （纳秒级的精确度 ）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFAbsoluteTime</span> startTime =<span class="built_in">CFAbsoluteTimeGetCurrent</span>();</span><br><span class="line"><span class="comment">//在这写入要计算时间的代码</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">CFAbsoluteTime</span> executionTime = (<span class="built_in">CFAbsoluteTimeGetCurrent</span>() - startTime);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;executionTime %f ms&quot;</span>, executionTime *<span class="number">1000.0</span>);</span><br><span class="line"><span class="comment">//打印出来代码执行时间 单位ms(executionTime 7.062972 ms)</span></span><br></pre></td></tr></table></figure><p>block方式</p><figure class="highlight plaintext"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TIME_BLOCK(^&#123;</span><br><span class="line">    //执行需要测试的代码</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat TIME_BLOCK(void (^block)(void))&#123;</span><br><span class="line">    NSTimeInterval startTime = CACurrentMediaTime();</span><br><span class="line">    block ();</span><br><span class="line">    CFTimeInterval elapsedTime = CACurrentMediaTime() - startTime;</span><br><span class="line">    NSLog(@&quot;executionTime = %f ms&quot;,  elapsedTime *1000.0);</span><br><span class="line">    return (CGFloat)elapsedTime / NSEC_PER_SEC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//key 标识符</span><br><span class="line">CGFloat TIME_BLOCKWithkey (NSString *key,void (^block)(void)) &#123;</span><br><span class="line">    NSTimeInterval startTime = CACurrentMediaTime();</span><br><span class="line">    block ();</span><br><span class="line">    CFTimeInterval elapsedTime = CACurrentMediaTime() - startTime;</span><br><span class="line">    NSLog(@&quot;%@ executionTime = %f ms&quot;,key,elapsedTime *1000.0);</span><br><span class="line">    return (CGFloat)elapsedTime / NSEC_PER_SEC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、NSDate</p><figure class="highlight plaintext"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSDate *methodStart = [NSDate date];</span><br><span class="line">/* ... Do whatever you need to do ... */</span><br><span class="line">NSDate *methodFinish = [NSDate date];</span><br><span class="line">NSTimeInterval executionTime = [methodFinish timeIntervalSinceDate:methodStart];</span><br><span class="line">NSLog(@&quot;executionTime = %f ms&quot;,  executionTime *1000.0);</span><br><span class="line">//打印出来为代码执行时间 单位ms(7.090032 ms)</span><br></pre></td></tr></table></figure><p>简写宏</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">宏定义</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TICK   NSDate *startTime = [NSDate date]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TOCK   NSLog(@<span class="string">&quot;Time: %f&quot;</span>, -[startTime timeIntervalSinceNow])</span></span><br><span class="line"></span><br><span class="line">TICK</span><br><span class="line"><span class="comment">/* ... Do Some Work Here ... */</span></span><br><span class="line">TOCK</span><br></pre></td></tr></table></figure><p>三、<code>CACurrentMediaTime()</code>返回的精度-微秒级别</p><p> CACurrentMediaTime方法获取到的时间，是手机从开机一直到当前所经过的秒数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSTimeInterval startTime = CACurrentMediaTime();</span><br><span class="line"></span><br><span class="line">// your code goes here</span><br><span class="line">CFTimeInterval elapsedTime = CACurrentMediaTime() - startTime;</span><br><span class="line">NSLog(@&quot;executionTime = %f ms&quot;,  elapsedTime *1000.0);</span><br><span class="line">//打印出来为代码执行时间 单位ms(7.299827 ms)</span><br></pre></td></tr></table></figure><ul><li>NSDate 属于Foundation</li><li>CFAbsoluteTimeGetCurrent() 属于 CoreFoundatio</li><li>CACurrentMediaTime() 属于 QuartzCore</li></ul><p>第二种：（将运行代码放入下面的Block中，返回时间）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;mach/mach.h&gt;</span><br><span class="line">#import &lt;mach/mach_time.h&gt;  // for mach_absolute_time() and friends</span><br><span class="line"></span><br><span class="line">CGFloat TIME_BLOCK (void (^block)(void)) &#123;</span><br><span class="line">    mach_timebase_info_data_t info;</span><br><span class="line">    if (mach_timebase_info(&amp;info) != KERN_SUCCESS) return -1.0;</span><br><span class="line"></span><br><span class="line">    uint64_t start = mach_absolute_time ();</span><br><span class="line">    block ();</span><br><span class="line">    uint64_t end = mach_absolute_time ();</span><br><span class="line">    uint64_t elapsed = end - start;</span><br><span class="line"></span><br><span class="line">    uint64_t nanos = elapsed * info.numer / info.denom;</span><br><span class="line">    return (CGFloat)nanos / NSEC_PER_SEC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//加入key</span><br><span class="line">CGFloat TIMEKey_BLOCK(NSString *key, void (^block)(void)) &#123;</span><br><span class="line">    mach_timebase_info_data_t info;</span><br><span class="line">    if (mach_timebase_info(&amp;info) != KERN_SUCCESS)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1.0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint64_t start = mach_absolute_time();</span><br><span class="line">    block();</span><br><span class="line">    uint64_t end = mach_absolute_time();</span><br><span class="line">    uint64_t elapsed = end - start;</span><br><span class="line"></span><br><span class="line">    uint64_t nanos = elapsed * info.numer / info.denom;</span><br><span class="line">    float cost = (float)nanos / NSEC_PER_SEC;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;key: %@ (%f ms)\n&quot;, key, cost * 1000);</span><br><span class="line">    return cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uint64_t getTickCount(void)</span><br><span class="line">&#123;</span><br><span class="line">    static mach_timebase_info_data_t sTimebaseInfo;</span><br><span class="line">    uint64_t machTime = mach_absolute_time();</span><br><span class="line"></span><br><span class="line">    // Convert to nanoseconds - if this is the first time we&#x27;ve run, get the timebase.</span><br><span class="line">    if (sTimebaseInfo.denom == 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        (void) mach_timebase_info(&amp;sTimebaseInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Convert the mach time to milliseconds</span><br><span class="line">    uint64_t millis = ((machTime / 1000000) * sTimebaseInfo.numer) / sTimebaseInfo.denom;</span><br><span class="line">    return millis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 计算脚本时间</span><br><span class="line"> * @param $last 最后一次的运行clock</span><br><span class="line"> * @param $key  标识</span><br><span class="line"> * @return 当前clock</span><br><span class="line"> */</span><br><span class="line">double timeNow(double last, char* key)&#123;</span><br><span class="line">    clock_t now = clock();</span><br><span class="line">    printf(&quot;time:%fs \t key:%s \n&quot;, (last != 0) ? (double)(now - last) / CLOCKS_PER_SEC : 0, key);</span><br><span class="line">    return now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double t1 = t(0, &quot;&quot;);</span><br><span class="line">//do something</span><br><span class="line">t(t1, &quot;end&quot;);</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/24377367?refer=mrpeak">iOS关于时间的处理</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS参考动画</title>
      <link href="/2017/12/25/iOS%E5%8F%82%E8%80%83%E5%8A%A8%E7%94%BB/"/>
      <url>/2017/12/25/iOS%E5%8F%82%E8%80%83%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>iOS动画总结</p><ul><li><a href="https://github.com/yixiangboy/IOSAnimationDemo">https://github.com/yixiangboy/IOSAnimationDemo</a></li><li><a href="https://github.com/aizexin/AIAnimationDemo">https://github.com/aizexin/AIAnimationDemo</a></li></ul><p>🍎 界面转场动画集</p><ul><li><a href="https://github.com/alanwangmodify/WXSTransition">https://github.com/alanwangmodify/WXSTransition</a></li></ul><p>iOS 支付宝支付动画</p><ul><li><a href="https://github.com/mengxianliang/XLPaymentHUD">https://github.com/mengxianliang/XLPaymentHUD</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS WKWebView的使用</title>
      <link href="/2017/12/22/WKWebView%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/12/22/WKWebView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>1、WKWebView与js交互</p><p>主要有两方面：1、js执行OC代码  2、oc调取写好的js代码</p><ul><li><h5 id="js调用OC："><a href="#js调用OC：" class="headerlink" title="js调用OC："></a>js调用OC：</h5><p>js是不能执行oc代码的，但是可以变相的执行，js可以将要执行的操作封装到网络请求里面，然后oc拦截这个请求，获取url里面的字符串解析即可，这里用到的代理协议。</p><p>主要原理：通过 UIWebVIew 的代理方法截取 web 前端的跳转请求，通过识别与 web 前端约定好的自定义协议头来判断本次请求是否为 JS 调用 Native 的请求，来调用对应的 Native 方法。</p><p>​</p></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIWebview</span></span><br><span class="line">- (<span class="type">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//拦截请求处理协议</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WKWebView</span></span><br><span class="line">- (<span class="type">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="type">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler &#123;</span><br><span class="line">  <span class="comment">//拦截请求处理协议</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="OC调用js："><a href="#OC调用js：" class="headerlink" title="OC调用js："></a>OC调用js：</h5><p>这里用到UIwebview的一个方法。示例代码:获取网页title：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值为 JS 执行结果，如果 JS 执行失败则返回 nil，如果 JS 执行没有返回值，则返回值为空字符串</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark-----UIWebView WKNavigationDelegate -----</span></span><br><span class="line">- (<span class="type">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span>*)webView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span>* str = [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@&quot;pageDidLoad()&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, str);</span><br><span class="line">    <span class="comment">// 获取网页的title</span></span><br><span class="line"><span class="built_in">NSString</span> *title = [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@&quot;document.title&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma mark-----WKWebView WKNavigationDelegate -----</span><br><span class="line">// self.webView.navigationDelegate=self;--WKNavigationDelegate</span><br><span class="line">// javaScriptString 为待执行的 JS 语句</span><br><span class="line">// completionHandler 为执行 JS 完毕后的回调，block 的第一个参数为执行结果，第二个参数为错误</span><br><span class="line">-(void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation</span><br><span class="line">&#123;</span><br><span class="line">[self.webView evaluateJavaScript:@&quot;pageDidLoad()&quot; completionHandler:^(id _Nullable value, NSError* _Nullable error) &#123;</span><br><span class="line">  NSLog(@&quot;%@&quot;, value);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js检查是否安装QQ&amp;&amp;微信</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并配置 WKWebView 的相关参数</span></span><br><span class="line"><span class="built_in">WKWebViewConfiguration</span>* config = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line"><span class="comment">//检查是否安装微信&amp;&amp;QQ</span></span><br><span class="line"><span class="built_in">NSString</span> *installJS = <span class="string">@&quot;var pcaction=&#123;&#125;; pcaction.isInstallWX=function()&#123;return true&#125;;pcaction.isInstallQQ=function()&#123;return false&#125;;&quot;</span>;</span><br><span class="line"><span class="built_in">WKUserScript</span> *installScript = [[<span class="built_in">WKUserScript</span> alloc] initWithSource:installJS injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentStart</span> forMainFrameOnly:<span class="literal">NO</span>];</span><br><span class="line">  [config.userContentController addUserScript:installScript];</span><br><span class="line"><span class="built_in">WKWebView</span> *webView=[[<span class="built_in">WKWebView</span> alloc]initWithFrame:<span class="keyword">self</span>.view.bounds configuration:config];</span><br></pre></td></tr></table></figure><p>滑动白屏，停止后才渲染页面问题？</p><p><a href="https://stackoverflow.com/questions/39549103/wkwebview-not-rendering-correctly-in-ios-10">https://stackoverflow.com/questions/39549103/wkwebview-not-rendering-correctly-in-ios-10</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WKUserContentController:为JS提供了一个发送消息的通道并且可以向页面注入JS的类，WKUserContentController对象可以添加多个scriptMessageHandler；</span><br><span class="line">addScriptMessageHandler:name:有两个参数，第一个参数是userContentController的代理对象，第二个参数是JS里发送postMessage的对象。添加一个脚本消息的处理器</span><br><span class="line">同时需要在html的JS中添加：</span><br><span class="line">window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)</span><br><span class="line">才能起作用。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//OC调用JS的方法列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">alertMobile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//这里已经调用过来了 但是搞不明白为什么alert方法没有响应</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert(&#x27;我是上面的小黄 手机号是:13300001111&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mobile&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;我是上面的小黄 手机号是:13300001111&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert(&#x27;你好 &#x27; + msg + &#x27;, 我也很高兴见到你&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;name&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;你好 &#x27;</span> + msg + <span class="string">&#x27;, 我也很高兴见到你&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">alertSendMsg</span>(<span class="params">num,msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//window.alert(&#x27;这是我的手机号:&#x27; + num + &#x27;,&#x27; + msg + &#x27;!!&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;msg&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;这是我的手机号:&#x27;</span> + num + <span class="string">&#x27;,&#x27;</span> + msg + <span class="string">&#x27;!!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//JS响应方法列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">btnClick1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.<span class="property">showMobile</span>.<span class="title function_">postMessage</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">btnClick2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.<span class="property">showName</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;xiao黄&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">btnClick3</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.<span class="property">showSendMsg</span>.<span class="title function_">postMessage</span>([<span class="string">&#x27;13300001111&#x27;</span>, <span class="string">&#x27;Go Climbing This Weekend !!!&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://www.cocoachina.com/bbs/read.php?tid-1712564-page-2.html">主题 : WKWebView 与js交互问题 已解决</a></p><p><a href="http://www.cocoachina.com/bbs/read.php?tid-1722961.html">主题 : wkwebview怎么注入一个js对象，让h5那边可以轮询检测到</a></p><p><a href="https://stackoverflow.com/questions/26778955/wkwebview-evaluate-javascript-return-value">WKWebView evaluate JavaScript return value</a></p><p><code>WKWebView</code></p><p><a href="https://github.com/My-Old-Driver/WKWebView">https://github.com/My-Old-Driver/WKWebView</a></p><p><a href="https://github.com/devedbox/AXWebViewController">https://github.com/devedbox/AXWebViewController</a></p><p><a href="https://github.com/li6185377/IMYWebView">https://github.com/li6185377/IMYWebView</a></p><p><a href="https://github.com/giveMeHug/SDWebView">https://github.com/giveMeHug/SDWebView</a></p><p><a href="https://github.com/LSure/SureWebViewController">https://github.com/LSure/SureWebViewController</a></p><p><a href="https://github.com/dlwj15/wkwebview">https://github.com/dlwj15/wkwebview</a></p><p><a href="https://github.com/huos3203/WKWebView-JS">https://github.com/huos3203/WKWebView-JS</a></p><p>基于WKWebView和UIWebView实现的仿微信WebView功能的页面加载库</p><p><a href="https://github.com/DoTalkLily/LYWebViewController">https://github.com/DoTalkLily/LYWebViewController</a></p><p><a href="https://github.com/JixinZhang/WKWebProgressViewDemo">https://github.com/JixinZhang/WKWebProgressViewDemo</a></p><p><a href="https://github.com/hdq135/JsWebView">https://github.com/hdq135/JsWebView</a><br>jsbridge 接口对象和webview对象交互用的工具。 JsfFromOCClass 把oc代码转化为js代码，只转化以“js_”开头的代码 JsWebView 配置webview注入js代码，并处理js调用原生接口</p><p>ios android 共用appInterface.jsCallApp方法,无需多平台区别</p><ul><li><a href="https://github.com/sfwan2014/WKWebViewDemo">https://github.com/sfwan2014/WKWebViewDemo</a></li></ul><p>wkwebview</p><p><a href="https://www.zybuluo.com/Sweetfish/note/501575">iOS中JS与OC相互调用的方式</a></p><p><a href="http://boyers.coding.me/2017/07/07/iOS/WKWebView%E6%8E%A7%E4%BB%B6%E5%92%8CJS%E8%84%9A%E6%9C%AC%E4%BC%A0%E5%8F%82%E5%8F%8A%E4%BA%A4%E4%BA%92/">WKWebView控件和JS脚本传参及交互</a></p><p><a href="https://github.com/Xcoder1011/WebView-JS">https://github.com/Xcoder1011/WebView-JS</a></p><p><a href="https://github.com/giveMeHug/SDWebView">https://github.com/giveMeHug/SDWebView</a></p><p><a href="https://github.com/zengweizhen/WKWebView">https://github.com/zengweizhen/WKWebView</a></p><p><a href="https://github.com/hongruqi/WTWebView">https://github.com/hongruqi/WTWebView</a></p><p><a href="http://iliunian.cn/14684585476236.html">http://iliunian.cn/14684585476236.html</a></p><p><a href="http://www.cnblogs.com/coolwxb/p/6125920.html">http://www.cnblogs.com/coolwxb/p/6125920.html</a></p><p><a href="http://blog.csdn.net/hmh007/article/details/53126809">JS与OC互相调用的一百种方法(包括WKWebView和UIWebView)</a></p><p><a href="https://www.jianshu.com/p/86d99192df68">【iOS】WKWebView 使用及注意事项</a></p><p><a href="https://www.jianshu.com/p/39401c9e5ea3">https://www.jianshu.com/p/39401c9e5ea3</a></p><p><a href="https://www.jianshu.com/p/64b4f01ad064">OC与JS代码交互原理(混合开发，包含UIWebView、WKWebView)</a></p><p><a href="https://www.jianshu.com/p/e537e6587274">iOS开发 - WKWebView使用详解</a></p><p><a href="http://peilinghui.com/2017/05/05/%E5%AD%A6%E4%B9%A0iOS%E4%B8%ADJS%E4%B8%8EOC%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F/">http://peilinghui.com/2017/05/05/%E5%AD%A6%E4%B9%A0iOS%E4%B8%ADJS%E4%B8%8EOC%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F/</a></p><p>JS与原生OC互相调用的Demo</p><ul><li><a href="https://github.com/Haley-Wong/JS_OC">https://github.com/Haley-Wong/JS_OC</a></li></ul><p><a href="https://stackoverflow.com/questions/9473582/ios-javascript-bridge">https://stackoverflow.com/questions/9473582/ios-javascript-bridge</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS webrtc相关</title>
      <link href="/2017/12/22/WebRTC%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/"/>
      <url>/2017/12/22/WebRTC%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/dc39c41c2915">iOS Video Toolbox：GPGPU加速YUV图像处理</a></p><p><a href="http://blog.csdn.net/wangruihit/article/details/46550853">webrtc (6) 在Webrtc中集成VideoToolbox</a></p><p>国内主流即时通讯SDK提供商测评报告</p><p><a href="http://www.csdn.net/article/a/2017-11-07/15934563">http://www.csdn.net/article/a/2017-11-07/15934563</a></p><p><a href="http://www.cnblogs.com/elesos/p/7132091.html">ios美颜 调研 GPUImage GPUImageBeautifyFilter BeautifyFaceDemo</a></p><p><a href="https://toutiao.io/posts/2cgte7/preview">iOS 音视频采集与编码</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS判断是present还是push</title>
      <link href="/2017/12/22/iOS%E5%88%A4%E6%96%AD%E6%98%AFpresent%E8%BF%98%E6%98%AFpush/"/>
      <url>/2017/12/22/iOS%E5%88%A4%E6%96%AD%E6%98%AFpresent%E8%BF%98%E6%98%AFpush/</url>
      
        <content type="html"><![CDATA[<p>方式</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)isModal &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.presentingViewController.presentedViewController == <span class="keyword">self</span></span><br><span class="line">      || (<span class="keyword">self</span>.navigationController != <span class="literal">nil</span> &amp;&amp; <span class="keyword">self</span>.navigationController.presentingViewController.presentedViewController == <span class="keyword">self</span>.navigationController)</span><br><span class="line">      || [<span class="keyword">self</span>.tabBarController.presentingViewController isKindOfClass:[<span class="built_in">UITabBarController</span> <span class="keyword">class</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)isModal &#123;</span><br><span class="line">     <span class="keyword">if</span>([<span class="keyword">self</span> presentingViewController])</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">     <span class="keyword">if</span>([[[<span class="keyword">self</span> navigationController] presentingViewController] presentedViewController] == [<span class="keyword">self</span> navigationController])</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">     <span class="keyword">if</span>([[[<span class="keyword">self</span> tabBarController] presentingViewController] isKindOfClass:[<span class="built_in">UITabBarController</span> <span class="keyword">class</span>]])</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/2798653/is-it-possible-to-determine-whether-viewcontroller-is-presented-as-modal">https://stackoverflow.com/questions/2798653/is-it-possible-to-determine-whether-viewcontroller-is-presented-as-modal</a></p><p><strong>Push</strong>或<strong>Pop</strong>动画</p><p><strong>For Push</strong> (on <code>MainViewController</code>)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *VC = [[LoginViewController alloc]init];</span><br><span class="line"><span class="built_in">CATransition</span>* transition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">transition.duration = <span class="number">0.3</span>f;</span><br><span class="line">transition.type = kCATransitionMoveIn;</span><br><span class="line">transition.subtype = kCATransitionFromTop;</span><br><span class="line">[<span class="keyword">self</span>.navigationController.view.layer addAnimation:transition</span><br><span class="line">                                            forKey:kCATransition];</span><br><span class="line">[[[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:VC] pushViewController:VC animated:<span class="literal">NO</span>];</span><br><span class="line"><span class="comment">//[self.navigationController pushViewController:VC animated:NO];</span></span><br></pre></td></tr></table></figure><p><strong>For Pop</strong> (on <code>LoginViewController</code>)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CATransition</span>* transition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">transition.duration = <span class="number">0.3</span>f;</span><br><span class="line">transition.type = kCATransitionReveal;</span><br><span class="line">transition.subtype = kCATransitionFromBottom;</span><br><span class="line">[<span class="keyword">self</span>.navigationController.view.layer addAnimation:transition</span><br><span class="line">                                            forKey:kCATransition];</span><br><span class="line">[<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac开发 注册文件类型-NSDocument</title>
      <link href="/2017/12/16/Mac-%E6%B3%A8%E5%86%8C%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
      <url>/2017/12/16/Mac-%E6%B3%A8%E5%86%8C%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://developer.apple.com/library/content/samplecode/TextEdit/Introduction/Intro.html">https://developer.apple.com/library/content/samplecode/TextEdit/Introduction/Intro.html</a><br><a href="https://developer.apple.com/library/content/samplecode/CustomSave/Introduction/Intro.html">https://developer.apple.com/library/content/samplecode/CustomSave/Introduction/Intro.html</a><br><a href="http://blog.csdn.net/heroguo_jp/article/details/51784418">自定义UTI 注册你的APP所支持的文件类型</a><br><a href="https://www.jianshu.com/p/a3fdd7e260ae">Mac OSX 给现有的应用追加基于文档的功能</a><br><a href="https://developer.apple.com/library/content/samplecode/PackagedDocument/">https://developer.apple.com/library/content/samplecode/PackagedDocument/</a><br><a href="https://juejin.im/post/5a45b2e65188257d7242be62">Mac开发—NSDocument</a><br><a href="https://github.com/mstarke/MacPass">https://github.com/mstarke/MacPass</a><br><a href="https://developer.apple.com/documentation/appkit/nsdocument">https://developer.apple.com/documentation/appkit/nsdocument</a><br><a href="https://stackoverflow.com/questions/16390319/saving-document-extensions-and-preferences-info-plist">https://stackoverflow.com/questions/16390319/saving-document-extensions-and-preferences-info-plist</a><br><a href="http://www.cnblogs.com/blueberryWT/articles/LearnCocoa.html">COCOA学习笔记-1 创建一个类似于XCODE的启动页面</a><br>高亮<br><a href="https://github.com/raspu/Highlightr">https://github.com/raspu/Highlightr</a><br><a href="https://github.com/cppforlife/BetterConsole">https://github.com/cppforlife/BetterConsole</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS时间转换yyyy年份与YYYY的区别</title>
      <link href="/2017/11/28/iOS%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2yyyy%E5%B9%B4%E4%BB%BD%E4%B8%8EYYYY%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/11/28/iOS%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2yyyy%E5%B9%B4%E4%BB%BD%E4%B8%8EYYYY%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>源于开发中时间格式大小写不分出现的一个Bug</p><p><code>大Y</code>是这周的年份，</p><p><code>小y</code>才是标准的年份</p><p><code>@&quot;YYYY-MM-dd&quot;</code>是以周计算的</p><p>比如2016-1-1是周五，这周周日(一个星期的开始是周日)是2015-12-27日，那么这周的年份是2016，所以会加一年，也即27，28…31都会多一年。而2017-1-1正好是周日，不会出现错误，2018-1-1是周一，所以2017-12-31会多一年。以后转换日期格式的时候记得还是用<code>@“yyyy-MM-dd”</code>这种格式吧，避免出现这种情况衍生bug。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OC与Swift混编</title>
      <link href="/2017/11/10/OC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96/"/>
      <url>/2017/11/10/OC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<p><a href="http://huuang.com/?p=103">http://huuang.com/?p=103</a></p><p><a href="http://zcill.com/2016/01/23/%E5%9C%A8OC%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8swift%E5%86%99%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/">在objectivec项目中使用swift写的第三方库</a></p><p><a href="http://mengxiangyue.com/2016/01/11/OC%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Swift/">OC项目中使用Swift</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用开发网址</title>
      <link href="/2017/11/08/%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E7%BD%91%E5%9D%80/"/>
      <url>/2017/11/08/%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>iOS开发<br><a href="http://swift.ctolib.com/">http://swift.ctolib.com/</a><br><a href="http://www.cocoachina.com/">http://www.cocoachina.com/</a></p><p>友情链接</p><ul><li><a href="http://www.itechzero.com/">ITechzero</a></li><li><a href="https://github.com/trending?l=objectivec">GithubTrending</a></li><li><a href="http://www.ctolib.com/">CTOLib</a></li><li><a href="http://www.iosappx.com/">苹果DEVUnion</a></li><li><a href="http://www.jianshu.com/users/97e4c0e7528e">木棠</a></li><li><a href="http://www.jianshu.com/users/a47bd3610273">LeapDing</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模拟Api接口工具</title>
      <link href="/2017/11/07/%E6%A8%A1%E6%8B%9FApi%E6%8E%A5%E5%8F%A3%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/11/07/%E6%A8%A1%E6%8B%9FApi%E6%8E%A5%E5%8F%A3%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能简介"><a href="#一、功能简介" class="headerlink" title="一、功能简介"></a>一、功能简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">快速简单的使用Mockjs对接口数据进行模拟，生成在线API。</span><br></pre></td></tr></table></figure><p>​有些时候当你在进行开发时，你需要的后端接口可能还没有完成对于开发所需要的支持。我们需要一个模拟API提供一些伪造数据来模拟真实环境下的APP使用场景。这就是我们为什么需要模拟REST API的原因，开发者一般会使用如<a href="https://github.com/typicode/json-server">json-server</a>，<a href="http://expressjs.com/">express</a>等来搭建<code>Web Server</code>来实现模拟所需要的数据，当然这种方式功能更加全面，但多少还是有点繁琐耗时的，对于一般的列表类数据，该工具可以很快的模拟你想要的数据并生成一个在线API提供给你进行开发测试。</p><p><strong><code>网页版</code></strong>  <strong><a href="http://huluo666.cn/2017/10/15/mokjsonapi/">mockjsonapi</a></strong> </p><p> **<code>Mac桌面版：</code>**模拟记录编辑保存等，速度更快，网页引用了较多的<code>js</code>，<code>css</code></p><p><strong><code>下载地址：</code></strong> <a href="http://7xr7vj.com1.z0.glb.clouddn.com/MockJSON1.0.0.dmg"><strong>MockJSON1.0.0.dmg</strong></a>  (大小719KB)</p><p>​本工具基于<code>mockjs</code>，<code>jsonblob</code>实现，你只需要掌握mockjs的使用，即可分分钟编写一个JSONApi。</p><p>mockjs的编写规则非常简单，和JSON规则一样。</p><h3 id="二、如何使用"><a href="#二、如何使用" class="headerlink" title="二、如何使用"></a>二、如何使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、编写正确的mock规则               </span><br><span class="line">2、提交规则生成JSON数据和在线API</span><br></pre></td></tr></table></figure><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/tmp268b5eed.png" alt="tmp268b5eed"></p><p>JSONAPI：<a href="https://jsonblob.com/api/jsonBlob/d9bfbd5f-c393-11e7-8887-e16ef680eccf">https://jsonblob.com/api/jsonBlob/d9bfbd5f-c393-11e7-8887-e16ef680eccf</a></p><p><strong><code>快速开始</code></strong></p><p><a href="http://huluo666.cn/2017/11/06/mockjsTemplate/">Mockjs使用示例</a> （常用数据模拟生成，MockAPI释义）</p><p><strong>官网示例</strong> <a href="http://mockjs.com/examples.html">http://mockjs.com/examples.html</a></p><p>​<a href="https://github.com/nuysoft/Mock/wiki">https://github.com/nuysoft/Mock/wiki</a></p><h3 id="三、更多"><a href="#三、更多" class="headerlink" title="三、更多"></a>三、更多</h3><p><a href="http://mockjs.com/">http://mockjs.com/</a></p><p><a href="http://www.json.cn/">http://www.json.cn/</a></p><p><a href="https://jsonblob.com/">https://jsonblob.com/</a></p><p><code>Mac桌面版演示图：</code></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/mockjson.gif" alt="演示"></p>]]></content>
      
      
      <categories>
          
          <category> devtool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mockjs快速使用示例</title>
      <link href="/2017/11/06/mockjsTemplate/"/>
      <url>/2017/11/06/mockjsTemplate/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>Document</title><script src="http://cdn.bootcss.com/jquery/3.1.1/jquery.min.js"></script><script src="http://mockjs.com/dist/mock.js"></script><script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"></script><link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"><!-- 代码高亮插件 --><script src="https://cdn.bootcss.com/highlight.js/9.12.0/highlight.min.js"></script><link href="https://cdn.bootcss.com/highlight.js/9.12.0/styles/github.min.css" rel="stylesheet"><script>hljs.initHighlightingOnLoad();</script><script>//js自动刷新function reloadPage(){hljs.initHighlighting.called = false;hljs.initHighlighting();}</script></head><body><center><h3 id="mockjs">Mockjs使用示例</h3></center><div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 -->Mockjs： <a href="http://mockjs.com/" target="_blank">http://mockjs.com/</a><br>JSON验证：<a href="https://www.json.cn/" target="_blank">https://www.json.cn</a><br>JS清除注释(压缩)： <a href="http://tool.chinaz.com/js.aspx" target="_blank">http://tool.chinaz.com/js.aspx</a><br></div><div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --><pre><code class="javascript" id="templateCode">//Mockjs模板示例-JSON格式&#123;"total": 20,"pageNo": 1,"code": 0,"message": "@cparagraph()","result|1-20": [//随机生成1-20条数据  &#123;"id|+1": 1,//自增id--初始值为1 "title": "@ctitle",//加c表示Chinese 中文标题"subtitle|1-6": "我是副标题 ",//模拟名称"content": "@cparagraph()",//模拟文本"phone"  : "@phone","date": "@date('yyyy-MM-dd')",//模拟时间"image": "@image('200x100', '#894FC4', '#FFF','png','')",//模拟图片-//image( size, background, foreground, format, text )"userName": "@cname",//加c表示中文名字"usersNum": "@integer(0,100)",//数量-Random.integer(min,max)"color": "@color",//模拟色值"city": "@city(true)",   //中国城市"age|1-100": 100,//模拟1~100随机整数,100只是用来确定类型"isMale|1": true,  // 布尔值"url": "@url()",//模拟url"guid": "@guid",//唯一id"time": "@time",//时间"now": "@now",//当前时间"brother|1": ["Alice", "kimi"], // 随机选取 1 个元素"sister|+1": ["Alice", "kimi", "lily"], // array中顺序选取元素作为结果"friends|2": ["Alice", "kimi"], // 重复2次属性值生成一个新数组"string|3": "★"//3表示后面属性值重复次数  &#125;]&#125;</code></pre>  <center><button type="button" class="btn btn-success" id="button_id">生成模拟数据</button></center><div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --> </br> <pre><code class="json" id="mycode">#code#</code></pre> </div><script type="text/javascript">varcontent = $('#templateCode').text(); // 欲处理的文本  var mockTemplate;varuncommentStr= content.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, '$1');try {mockTemplate=JSON.parse(uncommentStr);} catch(e) {console.log("非法JSON"+e);}console.log(uncommentStr);//$("#templateCode").text(JSON.stringify(mockTemplate,null,2));//Mock.mock( rurl, rtype(默认get), template ) 当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，//将根据数据模板 template 生成模拟数据，并作为响应数据返回。Mock.mock('http://mockjs.com/',mockTemplate);//ajax请求$("#button_id").click(function(){$.ajax({url        : "http://mockjs.com/",    //请求的url地址dataType   : "json",   //返回格式为jsonasync      : true, //请求是否异步，默认为异步，这也是ajax重要特性data       : {},    //参数值type       : "GET",   //请求方式beforeSend : function(req) {//请求前的处理console.log("开始请求");},   success: function(data, status, xhr) {console.log("请求成功");$("#mycode").text(JSON.stringify(data,null,2));reloadPage();},complete: function() {//请求完成处理console.log("请求完成");},error: function() {//请求出错处理console.log("请求出错");}});});</script></body></html>]]></content>
      
      
      <categories>
          
          <category> devtools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS富文本高亮</title>
      <link href="/2017/11/04/iOS:Mac%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/"/>
      <url>/2017/11/04/iOS:Mac%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<p>多个predicates</p><p>use <code>NSCompoundPredicate</code> for your multiple predicates, you can refer <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSCompoundPredicate_Class/Reference/Reference.html">NSCompoundPredicate Class Reference</a></p><p><a href="https://stackoverflow.com/questions/29043149/use-nspredicate-to-search-multiple-fields">Use NSPredicate to search multiple fields</a></p><p><a href="https://stackoverflow.com/questions/5032541/nspredicate-endswith-multiple-files">NSPredicate endswith multiple files</a></p><table><thead><tr><th>NSStringEnumerationOptions</th><th>说明</th></tr></thead><tbody><tr><td>NSStringEnumerationByLines</td><td>按行</td></tr><tr><td>NSStringEnumerationByParagraphs</td><td>段落</td></tr><tr><td>NSStringEnumerationByComposedCharacterSequences</td><td>字符顺序</td></tr><tr><td>NSStringEnumerationByWords</td><td>单词，字</td></tr><tr><td>NSStringEnumerationBySentences</td><td>句子</td></tr><tr><td>NSStringEnumerationReverse</td><td>反向遍历</td></tr><tr><td>NSStringEnumerationSubstringNotRequired</td><td>不需要子字符串</td></tr><tr><td>NSStringEnumerationLocalized</td><td></td></tr></tbody></table><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)processEditing</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSRange</span> paragaphRange = [<span class="keyword">self</span>.string paragraphRangeForRange:<span class="keyword">self</span>.editedRange];</span><br><span class="line">    <span class="built_in">NSArray</span> *extensions = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;strong&quot;</span>, <span class="string">@&quot;copy&quot;</span>, <span class="string">@&quot;assign&quot;</span>, <span class="string">@&quot;nonatomic&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicateWords =[<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF IN %@&quot;</span>, extensions];</span><br><span class="line">    <span class="comment">// 创建谓词对象并设定条件的表达式</span></span><br><span class="line">    <span class="comment">//    NSPredicate *predicateNS = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES &#x27;%@&#x27;&quot;,kATPattern];</span></span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicateWD = [<span class="built_in">NSCompoundPredicate</span> orPredicateWithSubpredicates:@[predicateWords]];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span>.string enumerateSubstringsInRange:paragaphRange options:<span class="built_in">NSStringEnumerationByWords</span> usingBlock:^(<span class="built_in">NSString</span> * _Nullable substring, <span class="built_in">NSRange</span> substringRange, <span class="built_in">NSRange</span> enclosingRange, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;substring=%@&quot;</span>,substring);</span><br><span class="line">        <span class="keyword">if</span> ([predicateWD evaluateWithObject:substring])&#123;</span><br><span class="line">            [<span class="keyword">self</span> setAttributes:@&#123;<span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">NSColor</span> redColor]&#125; range:substringRange]; <span class="comment">//当出现关键词如strong单词时字体变红</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个匹配命令</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按顺序获得所有（包括不匹配）字段的 range 数组以重新拼接</span></span><br><span class="line"><span class="built_in">NSString</span> *regex = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@|%@|%@|%@|%@|%@&quot;</span>,kUserPattern, kCopyPattern, kNonatomicPattern, kNSClassPattern,kStrongPattern,kAssignPattern];</span><br><span class="line"><span class="built_in">NSRegularExpression</span> *expression = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:regex options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];</span><br><span class="line">[expression enumerateMatchesInString:<span class="keyword">self</span>.string options:<span class="number">0</span> range:paragaphRange usingBlock:^(<span class="built_in">NSTextCheckingResult</span> *result, <span class="built_in">NSMatchingFlags</span> flags, <span class="type">BOOL</span> *stop) &#123;</span><br><span class="line">    <span class="comment">// Add red highlight color</span></span><br><span class="line">    [<span class="keyword">self</span> addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:RGB(<span class="number">194</span>, <span class="number">53</span>, <span class="number">154</span>) range:result.range];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p><a href="https://github.com/GGGHub/TextKitDemo/blob/master/TextKitDemo/TextKitDemo/LSYTextStorage.m">https://github.com/GGGHub/TextKitDemo/blob/master/TextKitDemo/TextKitDemo/LSYTextStorage.m</a></p><p><a href="https://github.com/Desgard/Shanbei-Homework/blob/master/Shanbei%20Homework/HighlightingTextStorage.m">https://github.com/Desgard/Shanbei-Homework/blob/master/Shanbei%20Homework/HighlightingTextStorage.m</a></p><p><a href="http://ggghub.com/2015/12/02/iOS%E5%AF%8C%E6%96%87%E6%9C%AC%EF%BC%88%E4%B8%89%EF%BC%89%E6%B7%B1%E5%85%A5%E4%BD%BF%E7%94%A8Text%20Kit/">iOS富文本（三）深入使用Text Kit</a></p><p><a href="https://stackoverflow.com/questions/16642934/multiple-nspredicate">Multiple NSPredicate</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery选择器（获取元素）</title>
      <link href="/2017/10/20/jquery%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/"/>
      <url>/2017/10/20/jquery%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>示例html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>test hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>test title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputtextId1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;https://jsonblob.com/api/jsonBlob/xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户点击按钮后，所有 &lt;p&gt; 元素都隐藏：</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 中所有选择器都以美元符号开头：<code>$()</code>。</p><h4 id="一、元素选择器"><a href="#一、元素选择器" class="headerlink" title="一、元素选择器"></a>一、元素选择器</h4><p>jQuery 元素选择器基于元素名选取元素。</p><p>在页面中选取所有 <code>&lt;p&gt;</code> 元素:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;)</span><br></pre></td></tr></table></figure><h4 id="二、id-选择器"><a href="#二、id-选择器" class="headerlink" title="二、id 选择器"></a>二、id 选择器</h4><p>jQuery <code>#id</code> 选择器通过 HTML 元素的 id 属性选取指定的元素,页面中元素的 id 应该是唯一的。</p><p>通过 id 选取元素语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#myDiv&quot;);//获取div元素</span><br></pre></td></tr></table></figure><p>获取<code>textFiled</code>值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var tfValue10= $(&quot;input[id=&#x27;inputtextId1&#x27;]&quot;).val();  </span><br><span class="line">var tfValue11= $(&quot;#inputtextId1&quot;).val();</span><br><span class="line">var tfValue12= $(&quot;input[name=&#x27;inputtextId1&#x27;]&quot;).val();</span><br><span class="line">var tfValue13= $(&quot;input[type=&#x27;text&#x27;]&quot;).val();</span><br><span class="line">var tfValue14= $(&quot;input[type=&#x27;text&#x27;]&quot;).attr(&quot;value&quot;);</span><br></pre></td></tr></table></figure><h4 id="三、-class-选择器"><a href="#三、-class-选择器" class="headerlink" title="三、.class 选择器"></a>三、<code>.class</code> 选择器</h4><p>jQuery 类选择器可以通过指定的 class 查找元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.test&quot;)</span><br></pre></td></tr></table></figure><p>赋值</p><p>输入框赋值方式,Input输入框ID为inputtextId</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#inputtextId&quot;)[0].value=&quot;8888&quot;;</span><br><span class="line">$(&quot;#inputtextId&quot;).val(&quot;88888&quot;);</span><br></pre></td></tr></table></figure><p>参考文档</p><p><a href="http://www.w3school.com.cn/jquery/jquery_selectors.asp">http://www.w3school.com.cn/jquery/jquery_selectors.asp</a></p><p><a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp">http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp</a></p><p><a href="http://www.runoob.com/jquery/jquery-selectors.html">http://www.runoob.com/jquery/jquery-selectors.html</a></p><p><a href="http://www.cnblogs.com/keepfool/archive/2012/06/02/2532203.html">http://www.cnblogs.com/keepfool/archive/2012/06/02/2532203.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线JSONAPI模拟</title>
      <link href="/2017/10/15/mokjsonapi/"/>
      <url>/2017/10/15/mokjsonapi/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html>    <head>        <meta charset="UTF-8">        <!-- 本地js文件    -->        <script type="text/javascript" src="/js/my/mock.js"></script>        <script type="text/javascript" src="/js/my/codemirror.min.js"></script>        <link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css">        <script src="http://cdn.bootcss.com/jquery/3.1.1/jquery.min.js"></script>        <script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>        <!-- codemirror 必须依赖库 -->        <link href="https://cdn.bootcss.com/codemirror/5.28.0/codemirror.min.css" rel="stylesheet">        <!-- 高亮插件 -->        <script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/clike/clike.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/javascript/javascript.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/http/http.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/htmlmixed/htmlmixed.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/swift/swift.js"></script>        <!--注释插件 -->        <script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/comment/comment.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/keymap/sublime.min.js"></script>        <!-- 搜索插件 -->        <script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/search/search.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/search/jump-to-line.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/search/searchcursor.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/dialog/dialog.min.js"></script>        <link href="https://cdn.bootcss.com/codemirror/5.28.0/addon/dialog/dialog.min.css" rel="stylesheet">        <!--格式验证，括号匹配-->        <script src="http://ajax.aspnetcdn.com/ajax/jshint/r07/jshint.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.30.0/addon/hint/javascript-hint.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.30.0/addon/lint/lint.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.30.0/addon/lint/javascript-lint.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.30.0/addon/lint/json-lint.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.30.0/addon/lint/css-lint.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/javascript/javascript.min.js"></script>        <script src="https://cdn.bootcss.com/codemirror/5.30.0/mode/css/css.min.js"></script>        <script src="http://csslint.net/js/csslint.js"></script>        <link href="https://cdn.bootcss.com/codemirror/5.30.0/addon/lint/lint.min.css" rel="stylesheet">        <!-- 编辑器主题 -->        <link type="text/css" rel="stylesheet" href="/css/my/mdn-like.min.css" />        <link rel="stylesheet" type="text/css" href="/css/my/solarized.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/solarized.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/seti.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/base16-light.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/eclipse.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/dracula.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/cobalt.min.css">        <link rel="stylesheet" type="text/css" href="/css/my/duotone-light.min.css">        <style type="text/css">            /*            p {*/            /*            }*/            #codemodelselect {                margin-left: 20px;            }            #copyright {                text-align: center;                margin:10px 0 10px 0;            }            #modelist {                position: absolute;                right: 20px;                /*                top: 0px;*/                z-index: 25;            }            #inputTextFieldDIV {                padding-right:20px;                padding-left: 20px;                margin-right: auto;margin-left: auto;            }            #helpTextDIV {              padding-right:20px;              padding-left: 20px;              margin-right: auto;margin-left: auto;            }        /*编辑框*/        .container-fluid {            padding-right:20px;            padding-left: 20px;            margin-right: auto;margin-left: auto;        }        /*             .CodeMirror {*/        /*                      border: 1px solid #eee;*/        /*                      width: 99%;*/        /*                      height: auto;*/        /*                    }*/      </style>        </head>    <body>        <script>          function getEditorText()          {              var editor = $('.CodeMirror')[1].CodeMirror;              //You can then use it as you wish              var selectval = editor.getValue();              console.log("selectval: "+selectval);              return selectval;          }        function replaceContent(contentCode)        {            var editor = $('.CodeMirror')[0].CodeMirror;            var jsonOBJ=JSON.parse(contentCode);            console.log("stringify0:"+JSON.stringify(jsonOBJ,null,2));            editor.setValue(JSON.stringify(jsonOBJ,null,2));        }        function fillInpInputText(contentCode)        {            $("#inputtextId1")[0].value=contentCode;        }        function getInpInputText()        {             var inputtextIdValue = $("#inputtextId1")[0].value;             return inputtextIdValue;        }        function selectMode() {            var input = document.getElementById("modelist");            var editor = $('.CodeMirror')[0].CodeMirror;            var theme = input.options[input.selectedIndex].value;            console.log("mode:"+theme);            editor.setOption("mode", theme);        }          function printHelloWorld(){            console.log("printHelloWorld");          }        </script>        <script>// 使用 Mock            var editorReusult;            var mockjsObj= {                "total": 20,                "pageNo": 1,                "code": 0,                "message": "@cparagraph()",                "result|1-20": [// 属性 result 的值是一个数组，随机生成1-20条数据                  {                    "id|+1": 1,//自增id-从1开始                    "title": "@ctitle",//加c表示Chinese 中文标题                    "subtitle|1-6": "我是副标题 ",//模拟名称                    "content": "@cparagraph()",//模拟文本                    "date": "@date('yyyy-MM-dd')",//模拟时间                    "image": "@image()",//模拟图片                    "color": "@color",//模拟色值                    "userName": "@cname",//加c表示中文名字                    "image": "@image('200x100', '#894FC4', '#FFF','png','')",//图片-//image( size, background, foreground, format, text )                    "age|1-100": 100,//模拟年龄(1-100)                    "url": "@url()",//模拟url                    "guid": "@guid"//唯一ID                  }                ]              };        function mockreloadPage()        {            /*获取代码编辑器的值*/            var editor = $('.CodeMirror')[0].CodeMirror;            //You can then use it as you wish            var selectval = editor.getValue();            console.log("selectval: "+selectval);            try {                mockjsObj=JSON.parse(selectval);            } catch(e) {                console.log("非法JSON"+e);                return;            }            //回调给OC            var   mockjsStingTest=JSON.stringify(mockjsObj,null,0);            printHelloWorld(mockjsStingTest);            var data = Mock.mock(                                 mockjsObj                             );             // 输出结果             editorReusult.setValue(JSON.stringify(data,null,2));        }        </script>        <div style="margin-left:30px;">            <h4>模拟规则（可修改）</h4>        </div>        <div class="input-group" id="inputTextFieldDIV">            <span class="input-group-addon">模拟API地址</span>            <input type="text" id="inputtextId1" class="form-control" placeholder="https://jsonblob.com/api/jsonBlob/xxx" value="">        </div>        <br>        <div id="codemodelselect">            <span class="label label-info" margin-left:="" 10px="">选择主题:</span>            <select id="select" onchange="selectTheme()">                <option selected>default</option>                <option>eclipse</option>                <option>seti</option>                <option>base16-light</option>                <option>dracula</option>                <option>duotone-light</option>                <option>mdn-like</option>                <option>cobalt</option>                <option>solarized</option>            </select>            <!-- 语言列表 http://codemirror.net/mode/index.html -->            <select id="modelist" onchange="selectMode()">                <option value="text/javascript">Default</option>                <option value="text/x-objectivec">objectivec</option>                <option value="text/x-swift">swift</option>                <option value="message/http">HTTP</option>                <option value="application/json">text/html</option>                <option value="application/json">application/json</option>                <option value="text/javascript">text/javascript</option>            </select>        </div>        <br>        <div class="container-fluid" id="mycode"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 -->            <textarea id="runcode_mock" name="runcode_mock" class="comments">#code#</textarea>        </div>        <script>$("textarea#runcode_mock").val(JSON.stringify(mockjsObj,null,2));</script>        <br>        <center><button type="button" class="btn btn-success" id="button_id">生成模拟数据>></button>        <button type="button" class="btn btn-success" id="button_id2">生成在线API>></button>        </center>        <br>        <div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 -->            <div class="panel panel-success">                <div class="panel-heading">                    <a data-toggle="collapse" data-parent="#accordion"                        href="#collapseTwo">模拟结果----点击展开，再次点击我进行折叠</a>                </div>                <div id="collapseTwo" class="panel-collapse collapse">                    <textarea id="runcode_result" name="runcode_result">#code#</textarea>                </div>            </div>        </div>         <div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 -->          <div class="panel panel-success">            <div class="panel-heading">              <a data-toggle="collapse" data-parent="#accordion"                href="#collapseHelp">使用帮助----点击展开，再次点击我进行折叠</a>            </div>            <div id="collapseHelp" class="panel-collapse collapse">                <div  id="helpTextDIV">                    如何使用<br />                    演示GIF：<a href="http://7xr7vj.com1.z0.glb.clouddn.com/mockjson.gif" target="_blank"> http://7xr7vj.com1.z0.glb.clouddn.com/mockjson.gif</a><br />                    一、编写好mockjs数据模板<br />                    二、点下方“生成（更新）在线API”,按钮生成或更新jsonapi<br />                    mockjs使用教程  <a href="http://mockjs.com/" target="_blank">http://mockjs.com/</a><br />                    JSON校验  <a href="http://mockjs.com/" target="_blank"> https://www.json.cn/</a><br />                    说明：左侧API列表，鼠标右键可弹出添加删除等功能菜单                </div>            </div>          </div>        </div>        <script type="text/javascript">            $(function () { $('#collapseTwo').collapse('show')});        </script>        <script>            function selectMode() {                var input = document.getElementById("modelist");                var editor = $('.CodeMirror')[0].CodeMirror;                var theme = input.options[input.selectedIndex].value;                console.log("mode:"+theme);                editor.setOption("mode", theme);            };        //调用mock方法模拟数据        $("#button_id").click(function(){                              mockreloadPage();//                              printHelloWorld("uuuuuuuuu");                          });            </script>        <script>            var codeMirrorConfig0= {                //Java高亮显示                lineNumbers: true, /* 定义是否显示行号 */                lineWrapping: true, /*自动换行*/                styleActiveLine: true, // 当前行背景高亮                matchBrackets: true, // 括号匹配                gutters: ["CodeMirror-lint-markers"],                lint: true,                readOnly: true,                mode: "javascript",                extraKeys: {                    "Cmd-J": "toMatchingTag",                    "Cmd-/": "toggleComment",                }            };        var codeMirrorConfig = codeMirrorConfig0;        codeMirrorConfig.readOnly = false;        var editor0 = CodeMirror.fromTextArea(document.getElementById("runcode_mock"),codeMirrorConfig0);        var editor = CodeMirror.fromTextArea(document.getElementById("runcode_result"),codeMirrorConfig);        editorReusult=editor;        editor0.on("change",function(instance, changeObj){            console.log("编辑文本事件"+changeObj.origin);                   mockreloadPage();        });        var input = document.getElementById("select");        function selectTheme() {            var theme = input.options[input.selectedIndex].textContent;            editor.setOption("theme", theme);            editor0.setOption("theme", theme);            location.hash = "#" + theme;        }        var choice = (location.hash && location.hash.slice(1)) ||        (document.location.search &&         decodeURIComponent(document.location.search.slice(1)));         if (choice) {             input.value = choice;             editor.setOption("theme", choice);             editor0.setOption("theme", choice);         }        CodeMirror.on(window, "hashchange", function() {                      var theme = location.hash.slice(1);                      if (theme) { input.value = theme; selectTheme(); }                      });            </script>      <script type="text/javascript">          //ajax请求          $("#button_id2").click(function(){            if ($("#inputtextId1").val()=="" ) {              doJSONblobRequest("POST","https://jsonblob.com/api/jsonBlob");            }else {              doJSONblobRequest("PUT",$("#inputtextId1").val());            }          });          function doJSONblobRequest(requestType,requestURL)          {              var result = new Object();              var editor = $('.CodeMirror')[1].CodeMirror;              //You can then use it as you wish              var selectval = editor.getValue();               try {                result=JSON.parse(selectval);              } catch(e) {                alert("JSON数据不合法");                console.log("非法JSON"+e);                return;              }            //回调给OC            var saveData = JSON.stringify(result);            console.log(requestType+saveData);          $.ajax({            url        :  requestURL,    //请求的url地址            dataType   : "json",   //返回格式为json            async      : true, //请求是否异步，默认为异步，这也是ajax重要特性            data       : saveData,    //参数值            type       : requestType,   //请求方式            beforeSend : function() {              //请求前的处理            },            beforeSend : function(req) {                  req.setRequestHeader('Content-Type', 'application/json');  ///加这一行解决问题                },              success: function(data, status, xhr) {              //请求成功时处理//              $("#mycode").text(JSON.stringify(data,null,2));                var  location=xhr.getResponseHeader('Location');                console.log("location="+location);               if(!location){ // "",null,undefined,NaN                  console.log("为空");                }else {                  $("#inputtextId1")[0].value=xhr.getResponseHeader('Location');                }            },            complete: function() {              //请求完成的处理              console.log("请求完成");            },            error: function() {              //请求出错处理              console.log("请求出错");            }          });        }      </script>    </body></html>]]></content>
      
      
      <categories>
          
          <category> devtools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS直播 音视频采集</title>
      <link href="/2017/10/14/iOS%E7%9B%B4%E6%92%AD%20%E9%9F%B3%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86/"/>
      <url>/2017/10/14/iOS%E7%9B%B4%E6%92%AD%20%E9%9F%B3%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>直播文档</p><span id="more"></span><p><a href="http://lib.csdn.net/liveplay/node/701">http://lib.csdn.net/liveplay/node/701</a></p><p><a href="http://www.jianshu.com/p/c49da1d93df4">iOS下音视频通信-基于WebRTC</a></p><p><a href="https://github.com/tuyaohui/WebRTC_iOS">https://github.com/tuyaohui/WebRTC_iOS</a></p><p><a href="http://chenhu1001.github.io/2016/07/02/iOS%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E9%9F%B3%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89/">iOS直播技术分享-音视频采集（一）</a></p><p><a href="http://www.jianshu.com/p/ddbe5d90332f">iOS音视频开源框架WebRTC入门-外网通信</a></p><p><a href="https://github.com/DyncLang/DevLiveBook">https://github.com/DyncLang/DevLiveBook</a></p><p><a href="http://www.jianshu.com/p/1b4c79b45055">WebRTC-编译以及运行IOS的Demo</a></p><p><a href="https://developer.qiniu.com/pili/manual/1668/even-the-design-documents">https://developer.qiniu.com/pili/manual/1668/even-the-design-documents</a></p><p><a href="http://hawkingouyang.com/2016/09/11/8_iOS-VideoChat-on-GitHub-and-more/">http://hawkingouyang.com/2016/09/11/8_iOS-VideoChat-on-GitHub-and-more/</a></p><p><a href="https://github.com/tuyaohui/WebRTC_iOS">https://github.com/tuyaohui/WebRTC_iOS</a></p><p><a href="https://github.com/BossKing/BKWebRTC">https://github.com/BossKing/BKWebRTC</a></p><p><a href="https://github.com/xquezme/WebRTC">https://github.com/xquezme/WebRTC</a></p><p><a href="https://github.com/fengli12321/Socket.io-FLSocketIM-iOS">https://github.com/fengli12321/Socket.io-FLSocketIM-iOS</a></p><p><a href="http://www.jianshu.com/p/686c4bf6df3f">基于socket.io即时通讯IM实现，webRTC实现视频通话</a></p><p><a href="https://github.com/tiantianlan/LiveExplanation">https://github.com/tiantianlan/LiveExplanation</a></p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p><a href="https://github.com/shanet/WebRTC-Example">https://github.com/shanet/WebRTC-Example</a></p><h5 id="直播服务厂商"><a href="#直播服务厂商" class="headerlink" title="直播服务厂商"></a>直播服务厂商</h5><p><a href="https://www.anyrtc.io/home">https://www.anyrtc.io/home</a></p><h5 id="即时通信"><a href="#即时通信" class="headerlink" title="即时通信"></a>即时通信</h5><p><a href="http://www.jianshu.com/p/821b777555d3">iOS websocket接入</a></p><p><a href="http://www.jianshu.com/p/bcefda55bce4">微信,QQ这类IM app怎么做——谈谈Websocket</a></p>]]></content>
      
      
      <categories>
          
          <category> 直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyRTC</title>
      <link href="/2017/10/10/EasyRTC%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/10/10/EasyRTC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>EasyRTC是什么</p><p>EasyRTC是WebRTC标准的一个实现。</p><p>它包括：</p><ul><li><p>服务器端，nodejs实现的</p></li><li><p>Web端javascript api，相当于是对WebRTC API的封装和简化</p></li><li><p>iOS和Android本地API，这个应该是付费版本才有</p><p>​</p></li></ul><p>他们开源了服务器端和Web端的javascript api，见<a href="https://github.com/priologic/easyrtc">GitHub</a>。</p><p>EasyRTC使用</p><p>1、安装nodejs，安装npm （没安装自行谷歌）</p><p>2、安装运行easyrtc需要的js包（js框架），package.json 中的依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/priologic/easyrtc.git</span><br><span class="line">cd   easyrtc/server_example 目录</span><br><span class="line">npm install  //安装package.json中的依赖库</span><br></pre></td></tr></table></figure><p>3、启动easyrtc server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> npm start</span><br><span class="line">或</span><br><span class="line"> node  server.js</span><br><span class="line">//端口预设在 port 8080 LISTEN</span><br></pre></td></tr></table></figure><p>4、浏览器中测试</p><p>打开<a href="http://localhost:8080/">http://localhost:8080</a> </p><p>2、引入必要的依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AudioToolbox.framework</span><br><span class="line">VideoToolbox.framework</span><br><span class="line">QuartzCore.framework</span><br><span class="line">OpenGLES.framework</span><br><span class="line">CoreGraphics.framework</span><br><span class="line">CoreVideo.framework</span><br><span class="line">CoreMedia.framework</span><br><span class="line">CoreAudio.framework</span><br><span class="line">AVFoundation.framework</span><br><span class="line">GLKit.framework</span><br><span class="line">CFNetwork.framework</span><br><span class="line">Security.framework</span><br><span class="line">libsqlite3.tbd</span><br><span class="line">libicucore.tbd</span><br><span class="line">libc.tbd</span><br><span class="line">libc++.dylib </span><br><span class="line">libstdc++.6.0.9.tbd</span><br></pre></td></tr></table></figure><p>错误解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols for architecture x86_64:</span><br><span class="line">  &quot;_OBJC_CLASS_$_RTCEAGLVideoView&quot;, referenced from:</span><br><span class="line">      objc-class-ref in VideoChatViewController.o</span><br><span class="line">  &quot;_OBJC_CLASS_$_RTCSessionDescription&quot;, referenced from:</span><br></pre></td></tr></table></figure><p>重新导入对于库文件</p><ul><li>framework文件没有导入</li><li>静态库编译时往往需要一些库的支持，查看你是否有没有导入的库文件<br>同样是在<code>Build Phases</code>里的<code>Link Binary With Libraries</code>中添加相应的framework。</li></ul><p>1、注意真机关闭<code>bitcode</code></p><p>2、注意添加相关权限</p><p><a href="http://www.jianshu.com/p/83db0b4f0bfe">iOS10 权限崩溃问题</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;    </span><br><span class="line">&lt;string&gt;cameraDesciption&lt;/string&gt;</span><br><span class="line">&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;contactsDesciption&lt;/string&gt;</span><br><span class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;microphoneDesciption&lt;/string&gt;</span><br><span class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;photoLibraryDesciption&lt;/string&gt;</span><br></pre></td></tr></table></figure><p><a href="http://www.zaomaiwang.com/html/9125204.html">WebRTC各种资料集合</a></p><p><a href="http://www.pffair.com/blog/2016/06/29/webrtcshi-jian/">Webrtc实践</a></p><p><a href="http://www.cnblogs.com/fulianga/p/5869208.html">WebRTC iOS平台的基本实现</a></p><p><a href="http://www.jianshu.com/p/c49da1d93df4">iOS下音视频通信-基于WebRTC</a></p><p><a href="http://www.enkichen.com/2017/05/12/webrtc-ios-build/">WebRTC iOS&amp;OSX 库的编译</a></p><p><a href="http://www.kadia-china.com/?p/435753014d47">iOS音视频开源框架WebRTC入门-编译(前序-授人鱼不如授人以渔)</a></p><p><a href="http://www.jianshu.com/p/994f9f6c9874">WebRTC入门：iOS工程</a></p><p><a href="http://www.cnblogs.com/hrhguanli/p/3781385.html">WebRTC学习笔记_Demo收集</a></p><p><a href="https://github.com/AnyRTC/anyRTC-RTMP-OpenSource">https://github.com/AnyRTC/anyRTC-RTMP-OpenSource</a></p><p><a href="https://github.com/qq3200341/FLWebRTCDemo">https://github.com/qq3200341/FLWebRTCDemo</a></p><p><a href="https://github.com/Haley-Wong/WebRTC_iOS">https://github.com/Haley-Wong/WebRTC_iOS</a></p><p><a href="https://github.com/hiroeorz/PeerObjectiveC">https://github.com/hiroeorz/PeerObjectiveC</a></p><p><a href="http://blog.csdn.net/csdnhaoren13/article/details/51023814">http://blog.csdn.net/csdnhaoren13/article/details/51023814</a></p><p><a href="https://www.zhihu.com/question/22301898">WebRTC有前途吗？</a></p><p>服务器</p><p><a href="https://naurudao.blogspot.hk/2016/07/webrtc.html">https://naurudao.blogspot.hk/2016/07/webrtc.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios 美颜</title>
      <link href="/2017/10/10/GPUImage/"/>
      <url>/2017/10/10/GPUImage/</url>
      
        <content type="html"><![CDATA[<p>GPUImage文档</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line">GLProgram.h</span><br><span class="line">GLProgram.m</span><br><span class="line">GPUImage.h</span><br><span class="line">GPUImage3x3ConvolutionFilter.h</span><br><span class="line">GPUImage3x3ConvolutionFilter.m</span><br><span class="line">GPUImage3x3TextureSamplingFilter.h</span><br><span class="line">GPUImage3x3TextureSamplingFilter.m</span><br><span class="line">GPUImageAdaptiveThresholdFilter.h</span><br><span class="line">GPUImageAdaptiveThresholdFilter.m</span><br><span class="line">GPUImageAddBlendFilter.h</span><br><span class="line">GPUImageAddBlendFilter.m</span><br><span class="line">GPUImageAlphaBlendFilter.h</span><br><span class="line">GPUImageAlphaBlendFilter.m</span><br><span class="line">GPUImageAmatorkaFilter.h</span><br><span class="line">GPUImageAmatorkaFilter.m</span><br><span class="line">GPUImageAverageColor.h</span><br><span class="line">GPUImageAverageColor.m</span><br><span class="line">GPUImageAverageLuminanceThresholdFilter.h</span><br><span class="line">GPUImageAverageLuminanceThresholdFilter.m</span><br><span class="line">GPUImageBilateralFilter.h</span><br><span class="line">GPUImageBilateralFilter.m</span><br><span class="line">GPUImageBoxBlurFilter.h</span><br><span class="line">GPUImageBoxBlurFilter.m</span><br><span class="line">GPUImageBrightnessFilter.h  //亮度</span><br><span class="line">GPUImageBrightnessFilter.m</span><br><span class="line">GPUImageBuffer.h</span><br><span class="line">GPUImageBuffer.m</span><br><span class="line">GPUImageBulgeDistortionFilter.h</span><br><span class="line">GPUImageBulgeDistortionFilter.m</span><br><span class="line">GPUImageCGAColorspaceFilter.h</span><br><span class="line">GPUImageCGAColorspaceFilter.m</span><br><span class="line">GPUImageCannyEdgeDetectionFilter.h</span><br><span class="line">GPUImageCannyEdgeDetectionFilter.m</span><br><span class="line">GPUImageChromaKeyBlendFilter.h</span><br><span class="line">GPUImageChromaKeyBlendFilter.m</span><br><span class="line">GPUImageChromaKeyFilter.h</span><br><span class="line">GPUImageChromaKeyFilter.m</span><br><span class="line">GPUImageClosingFilter.h</span><br><span class="line">GPUImageClosingFilter.m</span><br><span class="line">GPUImageColorBlendFilter.h</span><br><span class="line">GPUImageColorBlendFilter.m</span><br><span class="line">GPUImageColorBurnBlendFilter.h</span><br><span class="line">GPUImageColorBurnBlendFilter.m</span><br><span class="line">GPUImageColorDodgeBlendFilter.h</span><br><span class="line">GPUImageColorDodgeBlendFilter.m</span><br><span class="line">GPUImageColorInvertFilter.h</span><br><span class="line">GPUImageColorInvertFilter.m</span><br><span class="line">GPUImageColorMatrixFilter.h</span><br><span class="line">GPUImageColorMatrixFilter.m</span><br><span class="line">GPUImageColorPackingFilter.h</span><br><span class="line">GPUImageColorPackingFilter.m</span><br><span class="line">GPUImageContrastFilter.h</span><br><span class="line">GPUImageContrastFilter.m</span><br><span class="line">GPUImageCropFilter.h</span><br><span class="line">GPUImageCropFilter.m</span><br><span class="line">GPUImageCrosshairGenerator.h</span><br><span class="line">GPUImageCrosshairGenerator.m</span><br><span class="line">GPUImageCrosshatchFilter.h</span><br><span class="line">GPUImageCrosshatchFilter.m</span><br><span class="line">GPUImageDarkenBlendFilter.h</span><br><span class="line">GPUImageDarkenBlendFilter.m</span><br><span class="line">GPUImageDifferenceBlendFilter.h</span><br><span class="line">GPUImageDifferenceBlendFilter.m</span><br><span class="line">GPUImageDilationFilter.h</span><br><span class="line">GPUImageDilationFilter.m</span><br><span class="line">GPUImageDirectionalNonMaximumSuppressionFilter.h</span><br><span class="line">GPUImageDirectionalNonMaximumSuppressionFilter.m</span><br><span class="line">GPUImageDirectionalSobelEdgeDetectionFilter.h</span><br><span class="line">GPUImageDirectionalSobelEdgeDetectionFilter.m</span><br><span class="line">GPUImageDissolveBlendFilter.h</span><br><span class="line">GPUImageDissolveBlendFilter.m</span><br><span class="line">GPUImageDivideBlendFilter.h</span><br><span class="line">GPUImageDivideBlendFilter.m</span><br><span class="line">GPUImageEmbossFilter.h</span><br><span class="line">GPUImageEmbossFilter.m</span><br><span class="line">GPUImageErosionFilter.h</span><br><span class="line">GPUImageErosionFilter.m</span><br><span class="line">GPUImageExclusionBlendFilter.h</span><br><span class="line">GPUImageExclusionBlendFilter.m</span><br><span class="line">GPUImageExposureFilter.h</span><br><span class="line">GPUImageExposureFilter.m</span><br><span class="line">GPUImageFASTCornerDetectionFilter.h</span><br><span class="line">GPUImageFASTCornerDetectionFilter.m</span><br><span class="line">GPUImageFalseColorFilter.h</span><br><span class="line">GPUImageFalseColorFilter.m</span><br><span class="line">GPUImageFilter.h</span><br><span class="line">GPUImageFilter.m</span><br><span class="line">GPUImageFilterGroup.h</span><br><span class="line">GPUImageFilterGroup.m</span><br><span class="line">GPUImageFilterPipeline.h</span><br><span class="line">GPUImageFilterPipeline.m</span><br><span class="line">GPUImageFramebuffer.h</span><br><span class="line">GPUImageFramebuffer.m</span><br><span class="line">GPUImageFramebufferCache.h</span><br><span class="line">GPUImageFramebufferCache.m</span><br><span class="line">GPUImageGammaFilter.h</span><br><span class="line">GPUImageGammaFilter.m</span><br><span class="line">GPUImageGaussianBlurFilter.h</span><br><span class="line">GPUImageGaussianBlurFilter.m</span><br><span class="line">GPUImageGaussianBlurPositionFilter.h</span><br><span class="line">GPUImageGaussianBlurPositionFilter.m</span><br><span class="line">GPUImageGaussianSelectiveBlurFilter.h</span><br><span class="line">GPUImageGaussianSelectiveBlurFilter.m</span><br><span class="line">GPUImageGlassSphereFilter.h</span><br><span class="line">GPUImageGlassSphereFilter.m</span><br><span class="line">GPUImageGrayscaleFilter.h</span><br><span class="line">GPUImageGrayscaleFilter.m</span><br><span class="line">GPUImageHSBFilter.h</span><br><span class="line">GPUImageHSBFilter.m</span><br><span class="line">GPUImageHalftoneFilter.h</span><br><span class="line">GPUImageHalftoneFilter.m</span><br><span class="line">GPUImageHardLightBlendFilter.h</span><br><span class="line">GPUImageHardLightBlendFilter.m</span><br><span class="line">GPUImageHarrisCornerDetectionFilter.h</span><br><span class="line">GPUImageHarrisCornerDetectionFilter.m</span><br><span class="line">GPUImageHazeFilter.h</span><br><span class="line">GPUImageHazeFilter.m</span><br><span class="line">GPUImageHighPassFilter.h</span><br><span class="line">GPUImageHighPassFilter.m</span><br><span class="line">GPUImageHighlightShadowFilter.h</span><br><span class="line">GPUImageHighlightShadowFilter.m</span><br><span class="line">GPUImageHistogramEqualizationFilter.h</span><br><span class="line">GPUImageHistogramEqualizationFilter.m</span><br><span class="line">GPUImageHistogramFilter.h</span><br><span class="line">GPUImageHistogramFilter.m</span><br><span class="line">GPUImageHistogramGenerator.h</span><br><span class="line">GPUImageHistogramGenerator.m</span><br><span class="line">GPUImageHoughTransformLineDetector.h</span><br><span class="line">GPUImageHoughTransformLineDetector.m</span><br><span class="line">GPUImageHueBlendFilter.h</span><br><span class="line">GPUImageHueBlendFilter.m</span><br><span class="line">GPUImageHueFilter.h</span><br><span class="line">GPUImageHueFilter.m</span><br><span class="line">GPUImageJFAVoronoiFilter.h</span><br><span class="line">GPUImageJFAVoronoiFilter.m</span><br><span class="line">GPUImageKuwaharaFilter.h</span><br><span class="line">GPUImageKuwaharaFilter.m</span><br><span class="line">GPUImageKuwaharaRadius3Filter.h</span><br><span class="line">GPUImageKuwaharaRadius3Filter.m</span><br><span class="line">GPUImageLanczosResamplingFilter.h</span><br><span class="line">GPUImageLanczosResamplingFilter.m</span><br><span class="line">GPUImageLaplacianFilter.h</span><br><span class="line">GPUImageLaplacianFilter.m</span><br><span class="line">GPUImageLevelsFilter.h</span><br><span class="line">GPUImageLevelsFilter.m</span><br><span class="line">GPUImageLightenBlendFilter.h</span><br><span class="line">GPUImageLightenBlendFilter.m</span><br><span class="line">GPUImageLineGenerator.h</span><br><span class="line">GPUImageLineGenerator.m</span><br><span class="line">GPUImageLinearBurnBlendFilter.h</span><br><span class="line">GPUImageLinearBurnBlendFilter.m</span><br><span class="line">GPUImageLocalBinaryPatternFilter.h</span><br><span class="line">GPUImageLocalBinaryPatternFilter.m</span><br><span class="line">GPUImageLookupFilter.h</span><br><span class="line">GPUImageLookupFilter.m</span><br><span class="line">GPUImageLowPassFilter.h</span><br><span class="line">GPUImageLowPassFilter.m</span><br><span class="line">GPUImageLuminanceRangeFilter.h</span><br><span class="line">GPUImageLuminanceRangeFilter.m</span><br><span class="line">GPUImageLuminanceThresholdFilter.h</span><br><span class="line">GPUImageLuminanceThresholdFilter.m</span><br><span class="line">GPUImageLuminosity.h</span><br><span class="line">GPUImageLuminosity.m</span><br><span class="line">GPUImageLuminosityBlendFilter.h</span><br><span class="line">GPUImageLuminosityBlendFilter.m</span><br><span class="line">GPUImageMaskFilter.h</span><br><span class="line">GPUImageMaskFilter.m</span><br><span class="line">GPUImageMedianFilter.h</span><br><span class="line">GPUImageMedianFilter.m</span><br><span class="line">GPUImageMissEtikateFilter.h</span><br><span class="line">GPUImageMissEtikateFilter.m</span><br><span class="line">GPUImageMonochromeFilter.h</span><br><span class="line">GPUImageMonochromeFilter.m</span><br><span class="line">GPUImageMosaicFilter.h</span><br><span class="line">GPUImageMosaicFilter.m</span><br><span class="line">GPUImageMotionBlurFilter.h</span><br><span class="line">GPUImageMotionBlurFilter.m</span><br><span class="line">GPUImageMotionDetector.h</span><br><span class="line">GPUImageMotionDetector.m</span><br><span class="line">GPUImageMovie.h</span><br><span class="line">GPUImageMovie.m</span><br><span class="line">GPUImageMovieComposition.h</span><br><span class="line">GPUImageMovieComposition.m</span><br><span class="line">GPUImageMultiplyBlendFilter.h</span><br><span class="line">GPUImageMultiplyBlendFilter.m</span><br><span class="line">GPUImageNobleCornerDetectionFilter.h</span><br><span class="line">GPUImageNobleCornerDetectionFilter.m</span><br><span class="line">GPUImageNonMaximumSuppressionFilter.h</span><br><span class="line">GPUImageNonMaximumSuppressionFilter.m</span><br><span class="line">GPUImageNormalBlendFilter.h</span><br><span class="line">GPUImageNormalBlendFilter.m</span><br><span class="line">GPUImageOpacityFilter.h</span><br><span class="line">GPUImageOpacityFilter.m</span><br><span class="line">GPUImageOpeningFilter.h</span><br><span class="line">GPUImageOpeningFilter.m</span><br><span class="line">GPUImageOutput.h</span><br><span class="line">GPUImageOutput.m</span><br><span class="line">GPUImageOverlayBlendFilter.h</span><br><span class="line">GPUImageOverlayBlendFilter.m</span><br><span class="line">GPUImageParallelCoordinateLineTransformFilter.h</span><br><span class="line">GPUImageParallelCoordinateLineTransformFilter.m</span><br><span class="line">GPUImagePerlinNoiseFilter.h</span><br><span class="line">GPUImagePerlinNoiseFilter.m</span><br><span class="line">GPUImagePinchDistortionFilter.h</span><br><span class="line">GPUImagePinchDistortionFilter.m</span><br><span class="line">GPUImagePixellateFilter.h</span><br><span class="line">GPUImagePixellateFilter.m</span><br><span class="line">GPUImagePixellatePositionFilter.h</span><br><span class="line">GPUImagePixellatePositionFilter.m</span><br><span class="line">GPUImagePoissonBlendFilter.h</span><br><span class="line">GPUImagePoissonBlendFilter.m</span><br><span class="line">GPUImagePolarPixellateFilter.h</span><br><span class="line">GPUImagePolarPixellateFilter.m</span><br><span class="line">GPUImagePolkaDotFilter.h</span><br><span class="line">GPUImagePolkaDotFilter.m</span><br><span class="line">GPUImagePosterizeFilter.h</span><br><span class="line">GPUImagePosterizeFilter.m</span><br><span class="line">GPUImagePrewittEdgeDetectionFilter.h</span><br><span class="line">GPUImagePrewittEdgeDetectionFilter.m</span><br><span class="line">GPUImageRGBClosingFilter.h</span><br><span class="line">GPUImageRGBClosingFilter.m</span><br><span class="line">GPUImageRGBDilationFilter.h</span><br><span class="line">GPUImageRGBDilationFilter.m</span><br><span class="line">GPUImageRGBErosionFilter.h</span><br><span class="line">GPUImageRGBErosionFilter.m</span><br><span class="line">GPUImageRGBFilter.h</span><br><span class="line">GPUImageRGBFilter.m</span><br><span class="line">GPUImageRGBOpeningFilter.h</span><br><span class="line">GPUImageRGBOpeningFilter.m</span><br><span class="line">GPUImageRawDataInput.h</span><br><span class="line">GPUImageRawDataInput.m</span><br><span class="line">GPUImageRawDataOutput.h</span><br><span class="line">GPUImageRawDataOutput.m</span><br><span class="line">GPUImageSaturationBlendFilter.h</span><br><span class="line">GPUImageSaturationBlendFilter.m</span><br><span class="line">GPUImageSaturationFilter.h</span><br><span class="line">GPUImageSaturationFilter.m</span><br><span class="line">GPUImageScreenBlendFilter.h</span><br><span class="line">GPUImageScreenBlendFilter.m</span><br><span class="line">GPUImageSepiaFilter.h</span><br><span class="line">GPUImageSepiaFilter.m</span><br><span class="line">GPUImageSharpenFilter.h</span><br><span class="line">GPUImageSharpenFilter.m</span><br><span class="line">GPUImageShiTomasiFeatureDetectionFilter.h</span><br><span class="line">GPUImageShiTomasiFeatureDetectionFilter.m</span><br><span class="line">GPUImageSingleComponentGaussianBlurFilter.h</span><br><span class="line">GPUImageSingleComponentGaussianBlurFilter.m</span><br><span class="line">GPUImageSketchFilter.h</span><br><span class="line">GPUImageSketchFilter.m</span><br><span class="line">GPUImageSmoothToonFilter.h</span><br><span class="line">GPUImageSmoothToonFilter.m</span><br><span class="line">GPUImageSobelEdgeDetectionFilter.h</span><br><span class="line">GPUImageSobelEdgeDetectionFilter.m</span><br><span class="line">GPUImageSoftEleganceFilter.h</span><br><span class="line">GPUImageSoftEleganceFilter.m</span><br><span class="line">GPUImageSoftLightBlendFilter.h</span><br><span class="line">GPUImageSoftLightBlendFilter.m</span><br><span class="line">GPUImageSolidColorGenerator.h</span><br><span class="line">GPUImageSolidColorGenerator.m</span><br><span class="line">GPUImageSourceOverBlendFilter.h</span><br><span class="line">GPUImageSourceOverBlendFilter.m</span><br><span class="line">GPUImageSphereRefractionFilter.h</span><br><span class="line">GPUImageSphereRefractionFilter.m</span><br><span class="line">GPUImageStillCamera.h</span><br><span class="line">GPUImageStillCamera.m</span><br><span class="line">GPUImageStretchDistortionFilter.h</span><br><span class="line">GPUImageStretchDistortionFilter.m</span><br><span class="line">GPUImageSubtractBlendFilter.h</span><br><span class="line">GPUImageSubtractBlendFilter.m</span><br><span class="line">GPUImageSwirlFilter.h</span><br><span class="line">GPUImageSwirlFilter.m</span><br><span class="line">GPUImageTextureInput.h</span><br><span class="line">GPUImageTextureInput.m</span><br><span class="line">GPUImageTextureOutput.h</span><br><span class="line">GPUImageTextureOutput.m</span><br><span class="line">GPUImageThreeInputFilter.h</span><br><span class="line">GPUImageThreeInputFilter.m</span><br><span class="line">GPUImageThresholdEdgeDetectionFilter.h</span><br><span class="line">GPUImageThresholdEdgeDetectionFilter.m</span><br><span class="line">GPUImageThresholdSketchFilter.h</span><br><span class="line">GPUImageThresholdSketchFilter.m</span><br><span class="line">GPUImageThresholdedNonMaximumSuppressionFilter.h</span><br><span class="line">GPUImageThresholdedNonMaximumSuppressionFilter.m</span><br><span class="line">GPUImageTiltShiftFilter.h</span><br><span class="line">GPUImageTiltShiftFilter.m</span><br><span class="line">GPUImageToneCurveFilter.h</span><br><span class="line">GPUImageToneCurveFilter.m</span><br><span class="line">GPUImageToonFilter.h</span><br><span class="line">GPUImageToonFilter.m</span><br><span class="line">GPUImageTransformFilter.h</span><br><span class="line">GPUImageTransformFilter.m</span><br><span class="line">GPUImageTwoInputCrossTextureSamplingFilter.h</span><br><span class="line">GPUImageTwoInputCrossTextureSamplingFilter.m</span><br><span class="line">GPUImageTwoInputFilter.h</span><br><span class="line">GPUImageTwoInputFilter.m</span><br><span class="line">GPUImageTwoPassFilter.h</span><br><span class="line">GPUImageTwoPassFilter.m</span><br><span class="line">GPUImageTwoPassTextureSamplingFilter.h</span><br><span class="line">GPUImageTwoPassTextureSamplingFilter.m</span><br><span class="line">GPUImageUIElement.h</span><br><span class="line">GPUImageUIElement.m</span><br><span class="line">GPUImageUnsharpMaskFilter.h</span><br><span class="line">GPUImageUnsharpMaskFilter.m</span><br><span class="line">GPUImageVideoCamera.h</span><br><span class="line">GPUImageVideoCamera.m</span><br><span class="line">GPUImageVignetteFilter.h</span><br><span class="line">GPUImageVignetteFilter.m</span><br><span class="line">GPUImageVoronoiConsumerFilter.h</span><br><span class="line">GPUImageVoronoiConsumerFilter.m</span><br><span class="line">GPUImageWeakPixelInclusionFilter.h</span><br><span class="line">GPUImageWeakPixelInclusionFilter.m</span><br><span class="line">GPUImageWhiteBalanceFilter.h</span><br><span class="line">GPUImageWhiteBalanceFilter.m</span><br><span class="line">GPUImageXYDerivativeFilter.h</span><br><span class="line">GPUImageXYDerivativeFilter.m</span><br><span class="line">GPUImageZoomBlurFilter.h</span><br><span class="line">GPUImageZoomBlurFilter.m</span><br><span class="line">GPUImageiOSBlurFilter.h</span><br><span class="line">GPUImageiOSBlurFilter.m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac截图 screencapture</title>
      <link href="/2017/10/10/Mac%20screencapture%20%E6%88%AA%E5%9B%BE/"/>
      <url>/2017/10/10/Mac%20screencapture%20%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screencapture -h //查看帮助</span><br></pre></td></tr></table></figure><p><a href="http://cocoa.venj.me/blog/screenshot-in-cocoa-apps/">http://cocoa.venj.me/blog/screenshot-in-cocoa-apps/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screencapture -R &quot;20,190,310,100&quot; iii2.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac文件搜索</title>
      <link href="/2017/10/10/Mac%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/10/10/Mac%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="Mac文件搜索工具"><a href="#Mac文件搜索工具" class="headerlink" title="Mac文件搜索工具"></a>Mac文件搜索工具</h4><p>find any file<br>Easyfind</p><p><a href="http://www.jianshu.com/p/456003ed9df0">Mac常用命令</a></p><p><strong>通过Find命令搜索文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">格式：find path(搜索路径,为空时默认为当前目录) -option(搜索条件) [-print][-exec -ok command] &#123;&#125;\</span><br><span class="line">简单来说:find &lt;路径&gt; &lt;-条件&gt; &lt;结果处理&gt;</span><br><span class="line"></span><br><span class="line">常用搜索条件(不全)：</span><br><span class="line">-name filename              #查找名为filename的文件</span><br><span class="line">-user username              #查找属于username的文件</span><br><span class="line">-group groupname            #查找属于username的文件</span><br><span class="line">-mtime -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前</span><br><span class="line">-ctime -n +n                #按文件创建时间来查找文件，-n指n天以内，+n指n天以前</span><br><span class="line">-newer f1 !f2               #查更改时间比f1新但比f2旧的文件</span><br><span class="line">-type b/d/c/p/l/f           #查是块设备、目录、字符设备、管道、符号链接、普通文件</span><br><span class="line">-size n[c]                  #查长度为n块[或n字节]的文件</span><br><span class="line">-depth                      #使查找在进入子目录前先行查找完本目录</span><br><span class="line">-mount                      #查文件时不跨越文件系统mount点</span><br><span class="line">-follow                     #如果遇到符号链接文件，就跟踪链接所指的文件</span><br><span class="line"></span><br><span class="line">如:</span><br><span class="line">find /Users/DFei_He/desktop -name &#x27;*.html&#x27; 搜索桌面所有html文件</span><br><span class="line">find .   -perm   755 查看目录下权限为755的文件</span><br></pre></td></tr></table></figure><p>find命令非常高效，并且使用简单。find命令来自unix，OS X和Linux系统同样支持该命令。find最基本的操作就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 文件路径 参数</span><br></pre></td></tr></table></figure><p>比如你可以通过以下命令在用户文件夹中搜索名字中包含screen的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -iname  &quot;screen*&quot;</span><br></pre></td></tr></table></figure><p>你也可以在特定的文件夹中寻找特定的文件，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~/Library/ -iname &quot;com.apple.syncedpreferences.plist&quot;</span><br></pre></td></tr></table></figure><p>这个命令可以在Library文件夹中寻找com.apple.syncedpreferences.plist文件</p><p><strong>通过mdfind命令搜索文件</strong></p><p>mdfind命令就是Spotlight功能的终端界面，这意味着如果Spotlight被禁用，mdfind命令也将无法工作。mdfind命令非常迅速、高效。最基本的使用方法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name 文件名字</span><br></pre></td></tr></table></figure><p>比如你可以通过下面的命令寻找Photo 1.PNG文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name &quot;Photo 1.PNG&quot;</span><br></pre></td></tr></table></figure><p>因为mdfind就是Spotlight功能的终端界面，你还可以使用mdfind寻找文件和文件夹的内容，比如通过以下命令寻找所有包含Will Pearson文字的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind &quot;Will Pearson&quot;</span><br></pre></td></tr></table></figure><p>mdfind命令还可以通过-onlyin参数搜索特定文件夹的内容，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -onlyin ~/Library plist</span><br></pre></td></tr></table></figure><p>这条命令可以搜索Library文件夹中所有plist文件</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS Model保存</title>
      <link href="/2017/10/10/iOS%20Model%E4%BF%9D%E5%AD%98/"/>
      <url>/2017/10/10/iOS%20Model%E4%BF%9D%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>iOS Model保存</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  -(<span class="type">void</span>)saveUserRequestData</span><br><span class="line">&#123;</span><br><span class="line">    _lastTreeModel=<span class="keyword">self</span>.treeModel;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> * defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">    <span class="comment">//不能直接存取NSObject，需要先归档转成NSData</span></span><br><span class="line">    <span class="built_in">NSData</span> * data  = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:<span class="keyword">self</span>.treeModel];</span><br><span class="line">    [defaults setObject:data forKey:<span class="string">@&quot;treeModel&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="type">void</span>)getUserRequestData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSData</span> * data = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults]objectForKey:<span class="string">@&quot;treeModel&quot;</span>];</span><br><span class="line">    <span class="comment">//在这里解档</span></span><br><span class="line">    RequestModel *treeModel = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</span><br><span class="line">    <span class="keyword">self</span>.treeModel=treeModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS实现模糊效果</title>
      <link href="/2017/10/10/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%9B%BE%E7%89%87%E7%81%B0%E5%BA%A6%E5%A4%84%E7%90%86/"/>
      <url>/2017/10/10/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%9B%BE%E7%89%87%E7%81%B0%E5%BA%A6%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.itwendao.com/article/detail/347726.html">iOS学习笔记–图片灰度处理</a></p><p>iOS实现模糊效果的几种方法</p><p><a href="http://www.vanbein.com/posts/3rd-libraries/2016/04/06/blurView/">http://www.vanbein.com/posts/3rd-libraries/2016/04/06/blurView/</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS数组去重</title>
      <link href="/2017/10/10/%E5%8E%BB%E9%87%8D%EF%BC%8C%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>/2017/10/10/%E5%8E%BB%E9%87%8D%EF%BC%8C%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="type">void</span>)checkForDuplicateIDs6 &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *ary_res = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [[<span class="built_in">NSMutableArray</span> alloc] initWithObjects:<span class="string">@&quot;11&quot;</span>,<span class="string">@&quot;13&quot;</span>,<span class="string">@&quot;34&quot;</span>,<span class="string">@&quot;9&quot;</span>,<span class="string">@&quot;13&quot;</span>,<span class="string">@&quot;34&quot;</span>,<span class="string">@&quot;9&quot;</span>,<span class="string">@&quot;2&quot;</span>,<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSCountedSet</span> *set = [[<span class="built_in">NSCountedSet</span> alloc] initWithArray:array];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">id</span> name <span class="keyword">in</span> set)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>([set countForObject:name]==<span class="number">2</span>)</span><br><span class="line">            [ary_res addObject:name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ary_res:%@&quot;</span>,ary_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)checkForDuplicateIDs4 &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *hasDuplicates =@[<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;11&quot;</span>,<span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;33&quot;</span>,<span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;ab&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *noDuplicates = [[<span class="built_in">NSSet</span> setWithArray: hasDuplicates] allObjects];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;duplicateIDs:%@&quot;</span>,noDuplicates);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="type">void</span>)checkForDuplicateIDs</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;45&quot;</span>, <span class="string">@&quot;60&quot;</span>, <span class="string">@&quot;100&quot;</span>,<span class="string">@&quot;100&quot;</span>, <span class="string">@&quot;100&quot;</span>, <span class="string">@&quot;60&quot;</span>,<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSCountedSet</span> *countedSet = [<span class="built_in">NSCountedSet</span> setWithArray:array];</span><br><span class="line">    __block <span class="built_in">NSUInteger</span> totalNumberOfDuplicates = <span class="number">0</span>;</span><br><span class="line">    [countedSet enumerateObjectsUsingBlock:^(<span class="type">id</span> obj, <span class="type">BOOL</span> *stop) &#123;</span><br><span class="line">        <span class="built_in">NSUInteger</span> duplicateCountForObject = [countedSet countForObject:obj];</span><br><span class="line">        <span class="keyword">if</span> (duplicateCountForObject &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *preStr=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;SELF == &#x27;%@&#x27;&quot;</span>,obj];</span><br><span class="line">            <span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:preStr];</span><br><span class="line">            <span class="built_in">NSArray</span> *result = [array filteredArrayUsingPredicate:predicate];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;result:%@&quot;</span>,result);</span><br><span class="line">            totalNumberOfDuplicates += duplicateCountForObject;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ appears %ld times&quot;</span>, obj, duplicateCountForObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Total number of duplicates is %ld&quot;</span>, totalNumberOfDuplicates);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSSet</span> *)checkForDuplicateIDs3 &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *allIDs = @[<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;11&quot;</span>,<span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;33&quot;</span>,<span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;ab&quot;</span>];</span><br><span class="line">    <span class="built_in">NSMutableSet</span> *uniqueSet = [<span class="built_in">NSMutableSet</span> setWithArray:allIDs];</span><br><span class="line">    allIDs = [uniqueSet allObjects];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;duplicateIDs:%@&quot;</span>,uniqueSet.allObjects);</span><br><span class="line">    <span class="keyword">return</span> [allIDs <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSSet</span> *)checkForDuplicateIDs2 &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *allIDs = @[<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;11&quot;</span>,<span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;33&quot;</span>,<span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;ab&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *sortedIDs = [allIDs sortedArrayUsingSelector:<span class="keyword">@selector</span>(compare:)];</span><br><span class="line">    <span class="built_in">NSString</span> *previousID = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableSet</span> *duplicateIDs = [<span class="built_in">NSMutableSet</span> set];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *anID <span class="keyword">in</span> sortedIDs) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([previousID isEqualToString:anID]) &#123;</span><br><span class="line">            [duplicateIDs addObject:anID];</span><br><span class="line">        &#125;</span><br><span class="line">        previousID = anID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;duplicateIDs:%@&quot;</span>,duplicateIDs.allObjects);</span><br><span class="line">    <span class="keyword">return</span> [duplicateIDs <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用算法</title>
      <link href="/2017/10/10/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
      <url>/2017/10/10/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="一、C语言常用算法"><a href="#一、C语言常用算法" class="headerlink" title="一、C语言常用算法"></a>一、C语言常用算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C语言中文网-算法 http://c.biancheng.net/cpp/u/c14/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> findNum)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> findNum)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world！&quot;</span>);</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">2</span>,<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//取得数组所占内存大小，再除以一个元素占用的内存大小来计算数组长度。</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> ret0=binarySearch0(arr, sz, num); <span class="comment">//二分法-普通</span></span><br><span class="line"><span class="type">int</span> ret=binarySearch(arr,<span class="number">0</span>,sz, num);<span class="comment">//二分法-递归</span></span><br><span class="line"></span><br><span class="line">printArray(arr,sz);</span><br><span class="line">bubble_sort(arr,sz);</span><br><span class="line">printArray(arr,sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line"><span class="comment">//不能再函数里获取数组长度</span></span><br><span class="line"><span class="comment">//http://www.cnblogs.com/litifeng/p/7065384.html</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 二分查找普通实现。 </span></span><br><span class="line"><span class="comment">  * @param a 有序数组 </span></span><br><span class="line"><span class="comment">  * @param findNum 查找元素 </span></span><br><span class="line"><span class="comment">  * @return  不存在返回-1 </span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">折半查找的原理：</span></span><br><span class="line"><span class="comment">1&gt; 数组必须是有序的</span></span><br><span class="line"><span class="comment">2&gt; 必须已知min和max（知道范围）</span></span><br><span class="line"><span class="comment">3&gt; 动态计算mid的值，取出mid对应的值进行比较</span></span><br><span class="line"><span class="comment">4&gt; 如果mid对应的值大于要查找的值，那么max要变小为mid-1</span></span><br><span class="line"><span class="comment">5&gt; 如果mid对应的值小于要查找的值，那么min要变大为mid+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> findNum)</span>&#123;</span><br><span class="line"><span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> high = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(low&lt;= high)&#123;</span><br><span class="line"><span class="type">int</span> mid = (low + high)/<span class="number">2</span>;<span class="comment">//此处一定要放在while里面</span></span><br><span class="line"><span class="type">int</span> midVal = a[mid];</span><br><span class="line"><span class="keyword">if</span>(midVal&lt;findNum)</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(midVal&gt;findNum)</span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**二分法-递归方法*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> findNum)</span> &#123;  </span><br><span class="line"><span class="type">int</span> mid = ( low + high ) / <span class="number">2</span>;       </span><br><span class="line"><span class="keyword">if</span> (a[mid] == findNum) &#123;  </span><br><span class="line"><span class="keyword">return</span> mid;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (low &gt;= high) &#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (a[mid]&lt;findNum) </span><br><span class="line"><span class="keyword">return</span> binarySearch(a, mid + <span class="number">1</span>, high, findNum);  </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (a[mid]&gt;findNum) </span><br><span class="line"><span class="keyword">return</span> binarySearch(a, low, mid - <span class="number">1</span>, findNum);  </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> mid;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * desc: 冒泡排序</span></span><br><span class="line"><span class="comment"> *1. 进行两次遍历，第一个for是从 0 - arr.length-1, 第二次是从0到 arr.length - i - 1;</span></span><br><span class="line"><span class="comment"> * 2. 每一趟之后最后一个是最大值；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间复杂度: 最好情况o(n), 最差o(n^2), 平均o(n^2)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 空间复杂度: 0(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, temp;<span class="comment">//temp中间变量</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)  <span class="comment">//一定进行N-1轮比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> - j; i++) <span class="comment">//每一轮比较前n-1-i个，即已排序好的最后i个不用比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; a[i + <span class="number">1</span>]) <span class="comment">//升序--降序if(a[i] &lt; a[i + 1])</span></span><br><span class="line">&#123;   <span class="comment">//如果前面一个数比后面数大，交换两个数的值  </span></span><br><span class="line">temp = a[i];</span><br><span class="line">a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">a[i + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * desc: 选择排序</span></span><br><span class="line"><span class="comment"> *1. 分为两趟，第一趟从0-arr.length-1, 第二趟从i + 1到arr.length</span></span><br><span class="line"><span class="comment"> *2. 每趟的结果是最小值在最左边</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间复杂度：最好情况o(n^2), 最差o(n^2), 平均o(n^2)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 空间复杂度：o(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span><span class="comment">//n为数组a的元素个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//进行N-1轮选择</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++) <span class="comment">//趟数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> min_index = i; </span><br><span class="line"><span class="comment">//找出第i小的数所在的位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; j++) <span class="comment">//比较次数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[min_index])</span><br><span class="line">&#123;</span><br><span class="line">min_index = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将第i小的数，放在第i个位置；如果刚好，就不用交换</span></span><br><span class="line"><span class="keyword">if</span>( i != min_index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a[i];</span><br><span class="line">a[i] = a[min_index];</span><br><span class="line">a[min_index] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在程序里，交换2个数，我使用了异或来处理。这个可以根据个人喜好。为了避免产生临时变量，可以使用如下几种方式来交换2个数：</span></span><br></pre></td></tr></table></figure><h4 id="二、交互2个数"><a href="#二、交互2个数" class="headerlink" title="二、交互2个数"></a>二、交互2个数</h4><p>在程序里，交换2个数，我使用了异或来处理。这个可以根据个人喜好。为了避免产生临时变量，可以使用如下几种方式来交换2个数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> &#123;</span><br><span class="line">  <span class="type">int</span> temp = a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> &#123;</span><br><span class="line">  a = a ^ b;</span><br><span class="line">  b = b ^ a;</span><br><span class="line">  a = a ^ b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> &#123;</span><br><span class="line">   a=a+b;</span><br><span class="line">   b=a-b;</span><br><span class="line">   a=a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/46463778/xcode-9-an-error-occurred-uploading-to-the-itunes-store">https://stackoverflow.com/questions/46463778/xcode-9-an-error-occurred-uploading-to-the-itunes-store</a></p><p><a href="http://c.biancheng.net/cpp/html/2571.html">C语言选择排序</a></p><p>算法</p><p><a href="http://www.jianshu.com/p/f5baf7f27a7e">各种排序算法总结</a></p><p><a href="http://www.jianshu.com/p/ae97c3ceea8d">排序算法总结</a></p><p><a href="http://www.jianshu.com/p/8abad5e9432b">笔试时，冒泡排序也要写得优雅出众</a></p><p><a href="https://www.jianshu.com/p/d50eac247452">iOS算法总结-插入排序</a></p><p><a href="http://www.jianshu.com/p/1b4068ccd505">JS家的排序算法</a></p><p><a href="http://www.jianshu.com/p/28d0f65aa6a1">数据结构_排序算法总结</a></p><p><a href="http://www.jianshu.com/p/70619984fbc6">排序算法图形化比较：快速排序、插入排序、选择排序、冒泡排序</a></p><p><a href="http://www.jianshu.com/p/d8a5712a9b08">21天C语言代码训练营（第一天）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript打印对象循环引用问题</title>
      <link href="/2017/10/10/JavaScript%E6%89%93%E5%8D%B0%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/10/10/JavaScript%E6%89%93%E5%8D%B0%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>直接打印obj</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(JSON.stringify(a));// 报错</span><br></pre></td></tr></table></figure><p>出现错误<code>TypeError: Converting circular structure to JSON</code></p><p>解决：使用第三方库<code>CircularJSON</code>，<code>json-stringify-safe</code>，<code>util.inspect</code>，代替 <code>JSON.stringify</code> </p><p>安装任意一个即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install json-stringify-safe --save</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">$ npm install circular-json --save</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">$ npm install util --save</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">npm view circular-json version  //查看circular-json库最新版本</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load circular-json module</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CircularJSON</span> = <span class="built_in">require</span>(<span class="string">&#x27;circular-json&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CircularJSON</span>.<span class="title function_">stringify</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="comment">// load util module</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(a,&#123;<span class="attr">depth</span>:<span class="literal">null</span>&#125;)); <span class="comment">//depth:null 展开全部层级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// load json-stringify-safe module</span></span><br><span class="line"><span class="keyword">var</span> stringify = <span class="built_in">require</span>(<span class="string">&#x27;json-stringify-safe&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stringify</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">stringify</span>(a));<span class="comment">//格式化输出</span></span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/11616630/json-stringify-avoid-typeerror-converting-circular-structure-to-json">https://stackoverflow.com/questions/11616630/json-stringify-avoid-typeerror-converting-circular-structure-to-json</a> </p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript代码编辑器</title>
      <link href="/2017/09/22/JavaScript%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2017/09/22/JavaScript%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="http://xuelinf.github.io/2016/05/24/Ace-Editor-%E4%B8%8A%E6%89%8B%E5%8F%8A%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/">http://xuelinf.github.io/2016/05/24/Ace-Editor-%E4%B8%8A%E6%89%8B%E5%8F%8A%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</a></p><p><a href="https://ace.c9.io/build/kitchen-sink.html">https://ace.c9.io/build/kitchen-sink.html</a></p><p><a href="http://www.cnblogs.com/HansBug/p/6546606.html">【前端】ACE Editor（代码编辑器） 简易使用示例</a></p><p><a href="http://www.cnblogs.com/antispam/p/4222337.html">用ACE来写代码</a></p><p><a href="http://www.poorren.com/ace-editor-code-editor-guide">http://www.poorren.com/ace-editor-code-editor-guide</a></p><p><a href="https://stackoverflow.com/questions/8963855/how-do-i-get-value-from-ace-editor">https://stackoverflow.com/questions/8963855/how-do-i-get-value-from-ace-editor</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS直播 Mac下Nginx+Rtmp直播流服务器搭建</title>
      <link href="/2017/09/20/iOS%E7%9B%B4%E6%92%AD%20Mac%E4%B8%8BNginx+Rtmp%E7%9B%B4%E6%92%AD%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/09/20/iOS%E7%9B%B4%E6%92%AD%20Mac%E4%B8%8BNginx+Rtmp%E7%9B%B4%E6%92%AD%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>iOS直播 Mac下Nginx+Rtmp直播流服务器搭建</p><h3 id="1-安装nginx、nginx-rtmp-module"><a href="#1-安装nginx、nginx-rtmp-module" class="headerlink" title="1. 安装nginx、nginx-rtmp-module"></a>1. 安装nginx、nginx-rtmp-module</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、brew install nginx //执行安装nginx </span><br><span class="line">2、brew install nginx-full --with-rtmp-module //执行安装nginx-rtmp-module</span><br></pre></td></tr></table></figure><h3 id="2-nginx-conf配置文件，配置RTMP、HLS"><a href="#2-nginx-conf配置文件，配置RTMP、HLS" class="headerlink" title="2. nginx.conf配置文件，配置RTMP、HLS"></a>2. nginx.conf配置文件，配置RTMP、HLS</h3><p>查找到nginx.conf配置文件（路径<code>/usr/local/etc/nginx/nginx.conf</code>），用文本编辑器配置RTMP、HLS。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在http节点后面加上rtmp配置：</span></span><br><span class="line">rtmp &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">     #监听的端口</span><br><span class="line">      listen 1935;</span><br><span class="line">      # RTMP 直播流配置</span><br><span class="line">      application rtmplive &#123;</span><br><span class="line">          live on;</span><br><span class="line">      #为 rtmp 引擎设置最大连接数。默认为 off</span><br><span class="line">      max_connections 1024;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">HLS 直播流配置</span></span><br><span class="line">      application hls&#123;</span><br><span class="line">          live on;</span><br><span class="line">          hls on;</span><br><span class="line">          hls_path /usr/local/var/www/hls;</span><br><span class="line">          hls_fragment 1s;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在http中添加 hls 的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location /hls &#123;  </span><br><span class="line">       # Serve HLS fragments  </span><br><span class="line">       types &#123;  </span><br><span class="line">           application/vnd.apple.mpegurl m3u8;  </span><br><span class="line">           video/mp2t ts;  </span><br><span class="line">       &#125;  </span><br><span class="line">       root /usr/local/var/www;  </span><br><span class="line">       #add_header Cache-Controll no-cache;</span><br><span class="line">       expires -1;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-重启nginx服务"><a href="#3-重启nginx服务" class="headerlink" title="3. 重启nginx服务"></a>3. 重启nginx服务</h3><p>重启nginx服务，浏览器中输入 <a href="http://localhost:8080/">http://localhost:8080</a>，是否出现欢迎界面确定nginx重启成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>六、直播流转换格式、编码推流</p><p>1.安装 FFmpeg 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>2.推流MP4文件</p><p>视频文件地址：&#x2F;Users&#x2F;gao&#x2F;Desktop&#x2F;video&#x2F;test.mp4<br>推流拉流地址：rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home，rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//RTMP 协议流</span><br><span class="line">ffmpeg -re -i /Users/gao/Desktop/video/test.mp4 -vcodec libx264 -acodec aac -f flv rtmp://10.14.221.17:1935/rtmplive/home</span><br><span class="line"></span><br><span class="line">//HLS 协议流</span><br><span class="line">ffmpeg -re -i /Users/gao/Desktop/video/test.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv  -q 10 rtmp://10.14.221.17:1935/hls/test</span><br></pre></td></tr></table></figure><p><code>注意</code>： 当我们进行推流之后，可以安装<a href="http://www.pc6.com/mac/112121.html">VLC</a>、ffplay（支持rtmp协议的视频播放器）本地拉流进行演示</p><p>3.FFmpeg推流命令</p><p>① 视频文件进行直播</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i /Users/gao/Desktop/video/test.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv  -q 10 rtmp://192.168.1.101:1935/hls/test</span><br><span class="line">ffmpeg -re -i /Users/gao/Desktop/video/test.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv  -q 10 rtmp://10.14.221.17:1935/hls/test</span><br></pre></td></tr></table></figure><p>② 推流摄像头＋桌面+麦克风录制进行直播</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f avfoundation -framerate 30 -i &quot;1:0&quot; \-f avfoundation -framerate 30 -video_size 640x480 -i &quot;0&quot; \-c:v libx264 -preset ultrafast \-filter_complex &#x27;overlay=main_w-overlay_w-10:main_h-overlay_h-10&#x27; -acodec libmp3lame -ar 44100 -ac 1  -f flv rtmp://192.168.1.101:1935/hls/test</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/d541b317f71c">FFmpeg常用推流命令</a></p><p><a href="http://www.jianshu.com/p/ec0e9bc6591d">在Mac上自己搭建直播服务器</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试APPium使用</title>
      <link href="/2017/09/12/appium%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/09/12/appium%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><code>Error: Sdk ‘10’ was not in list of simctl sdks</code></p><p><a href="https://github.com/appium/appium/issues/7237">https://github.com/appium/appium/issues/7237</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFMpeg视频播放器</title>
      <link href="/2017/09/10/iOS%20%E7%9B%B4%E6%92%AD%20FFMpeg%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2017/09/10/iOS%20%E7%9B%B4%E6%92%AD%20FFMpeg%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>git clone <a href="https://github.com/Bilibili/ijkplayer.git">https://github.com/Bilibili/ijkplayer.git</a> ijkplayer-ios(备注:注意这个地址,不要自己去github上复制)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ijkplayer-ios</span><br><span class="line">git checkout -B latest k0.4.5.1</span><br><span class="line">./init-ios.sh</span><br><span class="line">cd ios</span><br><span class="line">./compile-ffmpeg.sh clean</span><br><span class="line">./compile-ffmpeg.sh all</span><br></pre></td></tr></table></figure><p>OK,至此就编译完成了</p><p>编译完是这个样子</p><p><a href="https://guchunli.github.io/2017/06/29/iOS%E7%9B%B4%E6%92%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://guchunli.github.io/2017/06/29/iOS%E7%9B%B4%E6%92%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><p><a href="http://www.jianshu.com/p/ec0e9bc6591d">在Mac上自己搭建直播服务器</a></p><p><a href="http://www.cnblogs.com/jys509/p/5649066.html">Mac上搭建直播服务器Nginx+rtmp</a></p><p><a href="http://hnxyzhw.xyz/2017/02/Mac%E6%9C%AC%E5%9C%B0%E6%8E%A8%E6%B5%81%E7%9B%B4%E6%92%AD%E6%9C%8D%E5%8A%A1%E5%99%A8(nginx-rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8+ffmpeg%E6%8E%A8%E6%B5%81)/">Mac本地推流直播服务器(nginx、rtmp服务器+ffmpeg推流)</a></p><p>播放器下载</p><p><a href="https://www.videolan.org/vlc/download-macosx.zh.html">https://www.videolan.org/vlc/download-macosx.zh.html</a></p><p><a href="http://www.jianshu.com/p/e1f3ceba7bc4">视频直播之推流</a></p><p><a href="http://maxwellpro.cn/2017/02/09/%E7%9B%B4%E6%92%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/">直播解决方案整理</a></p><p>iOS 直播 —— 推流</p><p><a href="http://www.jianshu.com/p/0dfc105e281f">最全的连麦直播技术点整理-AnyRTC</a></p><p><a href="http://www.jianshu.com/p/1f06b27b3ac0">iOS中集成ijkplayer视频直播框架</a></p><p><a href="https://www.zybuluo.com/qvbicfhdx/note/126161">https://www.zybuluo.com/qvbicfhdx/note/126161</a></p><p><a href="http://www.jianshu.com/p/5b1341e97757">做一款仿映客的直播App？看我就够了</a></p><p><a href="https://aotu.io/notes/2016/10/09/HTML5-SopCast/index.html">https://aotu.io/notes/2016/10/09/HTML5-SopCast/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFMpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFMpeg集成步骤</title>
      <link href="/2017/09/10/iOS%20%E7%9B%B4%E6%92%AD%20FFMpeg%E9%9B%86%E6%88%90%E6%AD%A5%E9%AA%A4/"/>
      <url>/2017/09/10/iOS%20%E7%9B%B4%E6%92%AD%20FFMpeg%E9%9B%86%E6%88%90%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="FFMpeg集成步骤"><a href="#FFMpeg集成步骤" class="headerlink" title="FFMpeg集成步骤"></a>FFMpeg集成步骤</h4><h5 id="第一步：下载FFmpeg脚本地址"><a href="#第一步：下载FFmpeg脚本地址" class="headerlink" title="第一步：下载FFmpeg脚本地址"></a>第一步：下载<a href="https://github.com/kewlbear/FFmpeg-iOS-build-script">FFmpeg脚本地址</a></h5><h5 id="第二步：下载完整的ffmpeg支持库。"><a href="#第二步：下载完整的ffmpeg支持库。" class="headerlink" title="第二步：下载完整的ffmpeg支持库。"></a>第二步：下载完整的ffmpeg支持库。</h5><p>终端进入脚本目录，执行下载脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/xxx/FFmpeg-iOS-build-script-master</span><br><span class="line">./build-ffmpeg.sh</span><br></pre></td></tr></table></figure><p>下载完毕后会发现多了很多文件夹，其中FFmpeg-iOS文件是我们在项目中需要用到的，另外ffmpeg-3.x文件是全平台下载的编译文件（包含了TVOS、Mac OS、iOS等）。</p><p>上面下载这步非常耗时</p><p>所以推荐下面方式</p><p>当然你也可以直接下载编译好的库文件，不保证支持<strong>bitcode</strong></p><p>You can download a binary for FFmpeg 3.3 release at <a href="https://downloads.sourceforge.net/project/ffmpeg-ios/ffmpeg-ios-master.tar.bz2">https://downloads.sourceforge.net/project/ffmpeg-ios/ffmpeg-ios-master.tar.bz2</a></p><p> FFmpeg-iOS是编译出来的库，里面是我们需要的.a 静态库，一共有7个。 进入.a文件目录终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipo -info libavcodec.a</span><br><span class="line">//输出 libavcodec.a are: armv7 i386 x86_64 arm64</span><br></pre></td></tr></table></figure><p>可以查看.a 包支持的架构，包括 armv7 armv7s i386 x86_64 arm64这几个架构。</p><h5 id="第三步：集成-iOS平台下的ffmpeg"><a href="#第三步：集成-iOS平台下的ffmpeg" class="headerlink" title="第三步：集成 iOS平台下的ffmpeg"></a>第三步：集成 iOS平台下的ffmpeg</h5><p>将FFmpeg-iOS拖入工程</p><p>然后在<code>Taget</code>- <code>Build Settings</code> 中找到 <code>Search Paths</code> ，设置 <code>Header Search Pahts</code> 和 <code>Library Search Paths</code> 如下。不然会报 <code>include“libavformat/avformat.h” file not found </code> 错误。</p><p>Header和Library中分别输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、$SRCROOT/FFmpeg-iOS/include</span><br><span class="line">2、$(PROJECT_DIR)/FFmpeg-iOS/lib //一般拖入文件会默认生成</span><br></pre></td></tr></table></figure><p>还有几个库文件<br>libz.dylib, libiconv.dylib ,libiconv2.4.0.dylib</p><p><a href="https://cnbin.github.io/blog/2015/05/19/iospei-zhi-ffmpegkuang-jia/">https://cnbin.github.io/blog/2015/05/19/iospei-zhi-ffmpegkuang-jia/</a></p><p><a href="https://github.com/qiangxinyu/XYFFmpeg">https://github.com/qiangxinyu/XYFFmpeg</a></p><p><a href="https://github.com/newtechsoft/RTSPPlayer">https://github.com/newtechsoft/RTSPPlayer</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFMpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断是否主线程</title>
      <link href="/2017/09/04/iOS%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BB%E7%BA%BF%E7%A8%8B/"/>
      <url>/2017/09/04/iOS%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BB%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSThread</span> currentThread] isMainThread] ? <span class="built_in">NSLog</span>(<span class="string">@&quot;MAIN THREAD&quot;</span>) : <span class="built_in">NSLog</span>(<span class="string">@&quot;NOT MAIN THREAD&quot;</span>);</span><br><span class="line"></span><br><span class="line">Also,</span><br><span class="line">[[<span class="built_in">NSThread</span> mainThread] isEqual:[<span class="built_in">NSThread</span> currentThread]] ? <span class="built_in">NSLog</span>(<span class="string">@&quot;MAIN THREAD&quot;</span>) : <span class="built_in">NSLog</span>(<span class="string">@&quot;NOT MAIN THREAD&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保证主线程运行</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> ensureOnMainQueue(<span class="type">void</span> (^block)(<span class="type">void</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">NSOperationQueue</span> currentQueue] isEqual:[<span class="built_in">NSOperationQueue</span> mainQueue]]) &#123;</span><br><span class="line">        block();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">            block();</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == <span class="number">0</span>) &#123; <span class="comment">// do something in main thread</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// do something in other thread</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主线程中也不绝对安全的 UI 操作</p><p><a href="http://www.jianshu.com/p/d15f4b37b0f2">http://www.jianshu.com/p/d15f4b37b0f2</a><br><a href="https://stackoverflow.com/questions/3546539/check-whether-or-not-the-current-thread-is-the-main-thread">https://stackoverflow.com/questions/3546539/check-whether-or-not-the-current-thread-is-the-main-thread</a><br><a href="https://stackoverflow.com/questions/17475002/get-current-dispatch-queue">https://stackoverflow.com/questions/17475002/get-current-dispatch-queue</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS横竖屏设置</title>
      <link href="/2017/08/30/iOS%20%E6%A8%AA%E7%AB%96%E5%B1%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>/2017/08/30/iOS%20%E6%A8%AA%E7%AB%96%E5%B1%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>iOS指定页面默认横屏，自由切换</p><ul><li><p>model下，present方式推出界面。</p></li><li><p>push横屏，带tabbar、navigation，且一个item下所有控制器对应的只有一个根navigation。</p></li></ul><p>1、修改工程的info.plist中”Supported interface orientations”的值（一般在工程的Taget-&gt; General -&gt; Deployment Info -&gt; Device Orientation处打钩来选择设备支持）</p><p>2、实现工程的AppDelegate文件中的（application:supportedInterfaceOrientationsForWindow:）方法，在此方法中返回程序支持的方向枚举。</p><p>iOS 横竖屏设置</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIInterfaceOrientationMaskLandscape</span>  支持左右横屏</span><br><span class="line"><span class="built_in">UIInterfaceOrientationMaskAll</span>  支持四个方向旋转</span><br><span class="line"><span class="built_in">UIInterfaceOrientationMaskAllButUpsideDown</span> 支持除了UpsideDown以外的旋转</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持旋转</span></span><br><span class="line">-(<span class="type">BOOL</span>)shouldAutorotate&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//支持的方向</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskAllButUps</span></span><br></pre></td></tr></table></figure><p>1、先在AppDelegate中重写<code>supportedInterfaceOrientationsForWindow</code>方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">UIInterfaceOrientationMask</span>)application:(<span class="built_in">UIApplication</span>*)application supportedInterfaceOrientationsForWindow:(<span class="built_in">UIWindow</span>*)window&#123;</span><br><span class="line">   <span class="keyword">return</span><span class="built_in">UIInterfaceOrientationMaskAll</span>;<span class="comment">//支持全方向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建一个UINavigationController的子类BaseNaviController，设置self.window的RootViewController为BaseNaviController;</p><p>然后，我们在BaseNaviController.m文件里面也实现着两个方法：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">BOOL</span>)shouldAutorotate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.topViewController shouldAutorotate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.topViewController supportedInterfaceOrientations];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在第一个页面写上，支持旋转 但是这个页面只支持竖屏，代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持旋转</span></span><br><span class="line">-(<span class="type">BOOL</span>)shouldAutorotate&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持的方向因为界面A我们只需要支持竖屏</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第二个页面我们写上，我们所需要的横屏效果，代码：</p><p>当只需要锁定屏幕的旋转不需要设置屏幕的旋转方向 ( 方向固定是竖直)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 是否支持屏幕旋转</span><br><span class="line">-(BOOL)shouldAutorotate &#123;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启屏幕旋转并设置屏幕旋转支持的方向</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否支持屏幕旋转 (返回 NO 后面俩方法不调用，后面只支持竖直方向)</span></span><br><span class="line">-(<span class="type">BOOL</span>)shouldAutorotate &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 支持屏幕旋转的方向</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations &#123;</span><br><span class="line">  <span class="comment">//  通过设置返回的枚举值来改变屏幕旋转支持的方向</span></span><br><span class="line">  <span class="comment">//（iPad上的默认返回值是UIInterfaceOrientationMaskAll，</span></span><br><span class="line">  <span class="comment">//  iPhone上的默认返回值是UIInterfaceOrientationMaskAllButUpsideDown）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskAll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns interface orientation masks. （返回最优先显示的屏幕方向）</span></span><br><span class="line"><span class="comment">// 同时支持Portrait和Landscape方向，但想优先显示Landscape方向，那软件启动的时候就会先显示Landscape，在手机切换旋转方向的时候仍然可以在Portrait和Landscape之间切换；</span></span><br><span class="line"><span class="comment">// 返回现在正在显示的用户界面方向</span></span><br><span class="line"><span class="comment">//此方法也仅有在当前viewController是rootViewController或者是modal模式时才生效.</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于非modal模式的viewController:如果不是rootViewController,则重写supportedInterfaceOrientations,preferredInterfaceOrientationForPresentation以及shouldAutorotate方法, 按照当前viewController的需要返回响应的值.如果是rootViewController,则如下重写方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(NSUInteger)supportedInterfaceOrientations&#123;</span><br><span class="line">        return self.topMostViewController.supportedInterfaceOrientations;</span><br><span class="line">&#125;</span><br><span class="line">-(BOOL)shouldAutorotate&#123;</span><br><span class="line">        return [self.topMostViewController shouldAutorotate];</span><br><span class="line">&#125;</span><br><span class="line">- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation&#123;</span><br><span class="line">return [self.topMostViewController preferredInterfaceOrientationForPresentation];</span><br><span class="line">&#125;</span><br><span class="line">-(UIViewController*)topMostViewController&#123;</span><br><span class="line">//找到当前正在显示的viewController并返回.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见, 我们巧妙的绕开了UIKit只调用rootViewController的方法的规则. 把决定权交给了当前正在显示的viewController.<br>对于modal模式的viewController. 则按照需要重写<code>supportedInterfaceOrientations</code>,<br><code>preferredInterfaceOrientationForPresentation</code>以及<code>shouldAutorotate</code> 方法即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">UIApplication* app = [UIApplication sharedApplication];</span><br><span class="line"></span><br><span class="line">// 判断设备方向状态，做响应的操作</span><br><span class="line">if(app.statusBarOrientation == UIInterfaceOrientationPortrait || app.statusBarOrientation == UIInterfaceOrientationPortraitUpsideDown)&#123;</span><br><span class="line"></span><br><span class="line">&#125;else if(app.statusBarOrientation == UIInterfaceOrientationLandscapeLeft || app.statusBarOrientation == UIInterfaceOrientationLandscapeRight)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UIInterfaceOrientationPortrait---------按钮在下</span><br><span class="line">UIInterfaceOrientationPortraitUpsideDown---------按钮在上</span><br><span class="line">UIInterfaceOrientationLandscapeLeft---------按钮在左</span><br><span class="line">UIInterfaceOrientationLandscapeRight---------按钮在右</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 通过状态栏电池图标来判断屏幕方向</span><br><span class="line">    if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationMaskPortrait) &#123;</span><br><span class="line">        // 竖屏 balabala</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 横屏 balabala</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AppDelegate.m中有如下方法可以设置整个app的方向。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window &#123;</span><br><span class="line">      return UIInterfaceOrientationMaskLandscape;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">该方法实质上是制定window的方向，虽然一个app有多个VC，但是window都只有一个，所以这个指定了window的方向，那所有VC的方向就都是统一的。</span><br></pre></td></tr></table></figure><p>已废弃方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shouldAutorotateToInterfaceOrientation //在iOS6之前</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/f917df3e3b2e">http://www.jianshu.com/p/f917df3e3b2e</a></p><p><a href="http://www.jianshu.com/p/3e7724db8cd6">视频播放器全屏旋转实现</a></p><p><a href="https://github.com/JR-Dun/iOSRotationScreen">https://github.com/JR-Dun/iOSRotationScreen</a></p><p><a href="https://github.com/linsyorozuya/AutoRotateControlDemo">https://github.com/linsyorozuya/AutoRotateControlDemo</a></p><p><a href="https://github.com/Jude309307972/RotateDemo">https://github.com/Jude309307972/RotateDemo</a></p><p><a href="https://github.com/janicezhw/TestAutoRotation">https://github.com/janicezhw/TestAutoRotation</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MockJson 在线模拟数据</title>
      <link href="/2017/08/15/mokjson/"/>
      <url>/2017/08/15/mokjson/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!DOCTYPE html><html><head><meta charset="UTF-8"><title>在线JSON模拟</title><link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"><script src="http://cdn.bootcss.com/jquery/3.1.1/jquery.min.js"></script><script type="text/javascript" src="/js/my/mock.js"></script><script type="text/javascript" src="/js/my/codemirror.min.js"></script><script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"></script><!-- codemirror 必须依赖库 --><link href="https://cdn.bootcss.com/codemirror/5.28.0/codemirror.min.css" rel="stylesheet"><!--括号匹配--><script src="codemirror-5.12/addon/edit/matchbrackets.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/lint/json-lint.min.js"></script><!-- 高亮插件 --><script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/clike/clike.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/javascript/javascript.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/http/http.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/htmlmixed/htmlmixed.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/mode/swift/swift.js"></script><!--注释插件 --><script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/comment/comment.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/keymap/sublime.min.js"></script><!-- 搜索插件 --><script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/search/search.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/search/jump-to-line.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/search/searchcursor.min.js"></script><script src="https://cdn.bootcss.com/codemirror/5.28.0/addon/dialog/dialog.min.js"></script><link href="https://cdn.bootcss.com/codemirror/5.28.0/addon/dialog/dialog.min.css" rel="stylesheet"> <!-- 编辑器主题 --><link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/seti.min.css" rel="stylesheet"><link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/solarized.min.css" rel="stylesheet"><link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/base16-light.min.css" rel="stylesheet"><link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/eclipse.min.css" rel="stylesheet"><link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/dracula.min.css" rel="stylesheet">        <link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/cobalt.min.css" rel="stylesheet">        <link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/duotone-light.min.css" rel="stylesheet">        <link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/mdn-like.min.css" rel="stylesheet">        <link href="https://cdn.bootcss.com/codemirror/5.28.0/theme/solarized.min.css" rel="stylesheet"><style type="text/css">/*p {*//*}*/#codemodelselect {margin-left: 30px;}#copyright {text-align: center;margin:10px 0 10px 0;}#modelist {position: absolute;right: 20px;/*top: 0px;*/z-index: 25;}/*编辑框*/.container-fluid {padding-right:30px;padding-left: 30px;margin-right: auto;margin-left: auto;}</style></head><body><script>// 使用 Mockvar editorReusult;var mockjsObj= {'total': 20,'pageNo': 1, "code": 0,"message": '@cparagraph()',// 属性 result 的值是一个数组，其中含有 1 到 n 个元素    'result|1-20': [{// 属性 id 是一个自增数，起始值为 1，每次增 1'id|+1': 1,'title|1-6': '我是标题 ',  //5x6 30字以内的标题"content"  : "@cparagraph()", //模拟文本"date": "@date('yyyy-MM-dd')",//模拟时间"image"    : "@image()", //模拟图片URL'color'    : '@color',    //模拟颜色'userName'     : '@name',"age|1-100":100,          //模拟年龄(1-100)"url"      : "@url()"     //模拟url}] };function mockreloadPage(){/*获取代码编辑器的值*/ var editor = $('.CodeMirror')[0].CodeMirror; //You can then use it as you wish var selectval = editor.getValue(); console.log("selectval: "+selectval);mockjsObj=JSON.parse(selectval);varmockjsStingTest=JSON.stringify(mockjsObj,null,0);var data = Mock.mock(mockjsObj);// 输出结果editorReusult.setValue(JSON.stringify(data,null,2));}  </script> <h2 class="title" align="center">在线JSON模拟</h2><div style="margin-left:30px;"><h4>模拟规则（可修改）</h4></div><div id="codemodelselect"><span class="label label-info" margin-left: 10px>选择主题:</span><select id="select" onchange="selectTheme()"><option selected>default</option><option>eclipse</option><option>seti</option><option>base16-light</option><option>dracula</option><option>duotone-light</option><option>mdn-like</option><option>cobalt</option><option>solarized</option></select><!-- 语言列表 http://codemirror.net/mode/index.html --><select id="modelist" onchange="selectMode()"><option value="text/javascript">Default</option><option value="text/x-objectivec">objectivec</option><option value="text/x-swift">swift</option><option value="message/http">HTTP</option><option value="application/json">text/html</option><option value="application/json">application/json</option><option value="text/javascript">text/javascript</option></select></div></br><div class="container-fluid" id="mycode"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --><textarea id="runcode_mock" name="runcode_mock" class="comments">#code#</textarea></div><script>$("textarea#runcode_mock").val(JSON.stringify(mockjsObj,null,2));</script></br><center><button type="button" class="btn btn-success" id="button_id">生成模拟数据>></button></center><script>function selectMode() {var input = document.getElementById("modelist");var editor = $('.CodeMirror')[0].CodeMirror;var theme = input.options[input.selectedIndex].value;console.log("mode:"+theme);editor.setOption("mode", theme);};//调用mock方法模拟数据$("#button_id").click(function(){mockreloadPage();});</script><div style="margin-left:30px;"><h4>模拟结果</h4></div><div class="container-fluid"><!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --><textarea id="runcode_result" name="runcode_result">#code#</textarea></div></br></br></br><script>   var codeMirrorConfig0= {//Java高亮显示lineNumbers: true, /* 定义是否显示行号 */lineWrapping: true, /*自动换行*/styleActiveLine: true, // 当前行背景高亮matchBrackets: true, // 括号匹配readOnly: true,extraKeys: {"Cmd-J": "toMatchingTag","Cmd-/": "toggleComment",}};var codeMirrorConfig = codeMirrorConfig0;codeMirrorConfig.readOnly = false;var editor0 = CodeMirror.fromTextArea(document.getElementById("runcode_mock"),codeMirrorConfig0);var editor = CodeMirror.fromTextArea(document.getElementById("runcode_result"),codeMirrorConfig);editorReusult=editor;var input = document.getElementById("select");function selectTheme() {var theme = input.options[input.selectedIndex].textContent;editor.setOption("theme", theme);editor0.setOption("theme", theme);location.hash = "#" + theme;}var choice = (location.hash && location.hash.slice(1)) || (document.location.search &&decodeURIComponent(document.location.search.slice(1)));if (choice) {input.value = choice;editor.setOption("theme", choice);editor0.setOption("theme", choice);}CodeMirror.on(window, "hashchange", function() {var theme = location.hash.slice(1);if (theme) { input.value = theme; selectTheme(); }});</script><div id="copyright">Copyright © By kimi <a target="_blank" href="http://huluo666.cn/">模拟工具</a></div></body></html>]]></content>
      
      
      <categories>
          
          <category> devtools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android开发-Java基础1</title>
      <link href="/2017/08/02/Android%E5%BC%80%E5%8F%91-Java%E5%9F%BA%E7%A1%801/"/>
      <url>/2017/08/02/Android%E5%BC%80%E5%8F%91-Java%E5%9F%BA%E7%A1%801/</url>
      
        <content type="html"><![CDATA[<p>Java学习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://www.weixueyuan.net/view/5947.html</span></span><br><span class="line"><span class="comment">//注意Java是大小写敏感的</span></span><br><span class="line"><span class="comment">//class --java 文件名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\n打印中文！！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义类Student</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Student</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">double</span> score;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//println和print基本没什么差别，就是最后会换行</span></span><br><span class="line">System.out.println( name + <span class="string">&quot;的年龄是 &quot;</span> + age + <span class="string">&quot;，成绩是 &quot;</span> + score );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类定义变量，即创建对象</span></span><br><span class="line"><span class="type">Student</span>  <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Student</span>();<span class="comment">//必须使用new关键字</span></span><br><span class="line"><span class="comment">//成员赋值</span></span><br><span class="line">stu1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">stu1.age=<span class="number">16</span>;</span><br><span class="line">stu1.score=<span class="number">92.5</span>;</span><br><span class="line">stu1.say();<span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发-java基础基本数据类型1</title>
      <link href="/2017/08/02/Android%E5%BC%80%E5%8F%91-Java%E5%9F%BA%E7%A1%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/"/>
      <url>/2017/08/02/Android%E5%BC%80%E5%8F%91-Java%E5%9F%BA%E7%A1%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.weixueyuan.net/view/5950.html">http://www.weixueyuan.net/view/5950.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Date;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Untitled</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;打印Java各基本数据类型所占节数\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Integer: &quot;</span>+Integer.SIZE/<span class="number">8</span>); <span class="comment">//4</span></span><br><span class="line">System.out.println(<span class="string">&quot;Short: &quot;</span>+Short.SIZE/<span class="number">8</span>); <span class="comment">//2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Long: &quot;</span>+Long.SIZE/<span class="number">8</span>);<span class="comment">//8</span></span><br><span class="line">System.out.println(<span class="string">&quot;Byte: &quot;</span>+Byte.SIZE/<span class="number">8</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="string">&quot;Character: &quot;</span>+Character.SIZE/<span class="number">8</span>); <span class="comment">//2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Float: &quot;</span>+Float.SIZE/<span class="number">8</span>);<span class="comment">//4</span></span><br><span class="line">System.out.println(<span class="string">&quot;Double: &quot;</span>+Double.SIZE/<span class="number">8</span>); <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);</span><br><span class="line">System.out.println(<span class="string">&quot;包装类：java.lang.Integer&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/huwenhu2007/article/details/9057569">http://blog.csdn.net/huwenhu2007/article/details/9057569</a></p><p>OC</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;NSInteger: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">NSInteger</span>));</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;CGFloat: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">CGFloat</span>));</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;double: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;char: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;int: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;float: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;short int: %ld&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span> <span class="type">int</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;CHAR_MIN:   %c&quot;</span>,   CHAR_MIN);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;CHAR_MAX:   %c&quot;</span>,   CHAR_MAX);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;SHRT_MIN:   %i&quot;</span>,  SHRT_MIN);    <span class="comment">// signed short int</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;SHRT_MAX:   %i&quot;</span>,  SHRT_MAX);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;INT_MIN:    %i&quot;</span>,   INT_MIN);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;INT_MAX:    %i&quot;</span>,   INT_MAX);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;LONG_MIN:   %li&quot;</span>,  LONG_MIN);    <span class="comment">// signed long int</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;LONG_MAX:   %li&quot;</span>,  LONG_MAX);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ULONG_MIN not defined, it&#x27;s always zero: %d&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ULONG_MAX:  %lu&quot;</span>,  ULONG_MAX);   <span class="comment">// unsigned long int</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;LLONG_MIN:  %lli&quot;</span>, LLONG_MIN);   <span class="comment">// signed long long int</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;LLONG_MAX:  %lli&quot;</span>, LLONG_MAX);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ULLONG_MIN not defined, it&#x27;s always zero: %d&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ULLONG_MAX: %llu&quot;</span>, ULLONG_MAX);  <span class="comment">// unsigned long long int</span></span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/minggeqingchun/article/details/52230467">http://blog.csdn.net/minggeqingchun/article/details/52230467</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS UTI支持</title>
      <link href="/2017/08/02/Mac-UTI%E6%94%AF%E6%8C%81/"/>
      <url>/2017/08/02/Mac-UTI%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://chengluffy.github.io/2016/08/05/office%E6%96%87%E4%BB%B6%E7%9A%84iOS-UTI%E6%94%AF%E6%8C%81/">office文件的iOS-UTI支持</a></p><p>系统声明的统一类型标识符<br><a href="https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html</a><br><a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_declare/understand_utis_declare.html">https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_declare/understand_utis_declare.html</a><br><a href="http://paulsolt.com/blog/2012/02/creating-nsdocument-using-folder-bundles-and-uti-identifiers">http://paulsolt.com/blog/2012/02/creating-nsdocument-using-folder-bundles-and-uti-identifiers</a><br><a href="http://sunxiang0918.cn/2015/11/27/%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84APP%E5%A2%9E%E5%8A%A0OpenIn%E5%8A%9F%E8%83%BD/">http://sunxiang0918.cn/2015/11/27/%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84APP%E5%A2%9E%E5%8A%A0OpenIn%E5%8A%9F%E8%83%BD/</a><br>Cocoa Programming L22 - Saving Documents<br><a href="https://www.youtube.com/watch?v=yfiOGQmUVjE">https://www.youtube.com/watch?v=yfiOGQmUVjE</a></p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSTask 使用</title>
      <link href="/2017/08/02/NSTask%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/08/02/NSTask%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>创建和初始化一个NSTask对象</p><p>一些属性 返回任务信息</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *arguments  <span class="comment">//NSString对象数组包含调用时使用的参数。如果参数是nill,产生一个NSInvalidArgumentException异常</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>) <span class="built_in">NSString</span> *currentDirectoryPath  <span class="comment">//任务当前的工作目录</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>) <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="built_in">NSString</span> *&gt; *environment <span class="comment">//任务启动后的环境变量字典，字典的key是环境变量的名称</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>) <span class="built_in">NSString</span> *launchPath            <span class="comment">//可执行文件的路径</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) <span class="type">int</span> processIdentifier       <span class="comment">//进程标识</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="type">id</span> standardError              <span class="comment">//标准错误文件</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="type">id</span> standardInput  <span class="comment">//任务使用的标准输入文件，除非另有说明。返回的对象是一个NSFileHandle或者一个NSPipe实例,这取决于传递给setStandardInput:方法哪种类型的对象。</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="type">id</span> standardOutput <span class="comment">//任务使用的标准输出文件，标准输出用来作为任务显示其输出。返回的对象是一个NSFileHandle或者一个NSPipe实例,这取决于传递给setStandardOutput:方法哪种类型的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line">- (<span class="type">void</span>)launch;<span class="comment">//启动任务</span></span><br><span class="line">- (<span class="type">void</span>)interrupt; <span class="comment">// 发送一个中断信号给接受者和它的所有子任务如果任务因此终止，这是默认的行为，一个NSTaskDidTerminateNotification发送到默认的通知中心。如果消息接收者已经启动或者已经执行完成，这个方法没有效果。如果消息接收者尚未启动，该方法发出了一个NSInvalidArgumentException。</span></span><br><span class="line">- (<span class="type">void</span>)terminate; <span class="comment">// Not always possible. Sends SIGTERM.</span></span><br><span class="line">- (<span class="type">BOOL</span>)suspend;<span class="comment">//暂停任务,如果任务暂停成功 返回YES，否则NO</span></span><br><span class="line">- (<span class="type">BOOL</span>)resume;<span class="comment">//恢复执行之前suspend的任务。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isRunning) <span class="type">BOOL</span> running;<span class="comment">//查询任务状态 返回任务是否仍在运行</span></span><br><span class="line"></span><br><span class="line">waitUntilExitblock,直到任务完成。</span><br><span class="line">该方法首先检查是否有任务在使用 isRunning标识运行。然后阻塞当前run loop（使用<span class="built_in">NSDefaultRunLoopMode</span>）直到任务完成。</span><br><span class="line">terminationReason  返回被终止的原因</span><br></pre></td></tr></table></figure><p>1、使用NSString类型的命令字符串，返回运行结果。但是使用这种方法没法记忆上一次操作，没法做到像在终端中执行多次命令那样自如。</p><p>例如：先cd到桌面，然后在桌面新建文件夹，在终端中我们是这么实现的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">huluo-Mac:~ luo.h$ <span class="built_in">cd</span> Desktop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">huluo-Mac:Desktop luo.h$ <span class="built_in">mkdir</span> helloWorld</span></span><br></pre></td></tr></table></figure><p>使用NSTask调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)cmd:(NSString *)cmd</span><br><span class="line">&#123;</span><br><span class="line">    // 初始化并设置shell路径</span><br><span class="line">    NSTask *task = [[NSTask alloc] init];</span><br><span class="line">    [task setLaunchPath: @&quot;/bin/bash&quot;];</span><br><span class="line">    // -c 用来执行string-commands（命令字符串），也就说不管后面的字符串里是什么都会被当做shellcode来执行</span><br><span class="line">    NSArray *arguments = [NSArray arrayWithObjects: @&quot;-c&quot;, cmd, nil];</span><br><span class="line">    [task setArguments: arguments];</span><br><span class="line"></span><br><span class="line">    // 新建输出管道作为Task的输出</span><br><span class="line">    NSPipe *pipe = [NSPipe pipe];</span><br><span class="line">    [task setStandardOutput: pipe];</span><br><span class="line"></span><br><span class="line">    // 开始task</span><br><span class="line">    NSFileHandle *file = [pipe fileHandleForReading];</span><br><span class="line">    [task launch];</span><br><span class="line"></span><br><span class="line">    // 获取运行结果</span><br><span class="line">    NSData *data = [file readDataToEndOfFile];</span><br><span class="line">    return [[NSString alloc] initWithData: data encoding: NSUTF8StringEncoding];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">错误示例：</span><br><span class="line">[self cmd:@&quot;cd Desktop&quot;];</span><br><span class="line">[self cmd:@&quot;mkdir helloWorld&quot;];</span><br><span class="line">//这种调用方式结果是错误的，因为一条命令执行完Task就会销毁，相当于输入完终端关闭，再打开再输出，这时执行第二条语句时第一条语句已经不起作用了</span><br><span class="line"></span><br><span class="line">//正确做法： 应使用下面这种方式实现</span><br><span class="line">[self cmd:@&quot;cd Desktop; mkdir helloWorld&quot;];</span><br></pre></td></tr></table></figure><p>1.推荐使用Taskit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Taskit *task = [Taskit task];</span><br><span class="line">task.launchPath = @”/bin/echo”;</span><br><span class="line">[task.arguments addObject:@”Hello World”];</span><br><span class="line">task.receivedOutputString = ^void(NSString *output) &#123;</span><br><span class="line">NSLog(@”%@”, output);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[task launch];</span><br></pre></td></tr></table></figure><p>优秀第三方库推荐</p><p><a href="https://github.com/atg/taskit">https://github.com/atg/taskit</a></p><p><a href="https://github.com/reliablehosting/GCDTask">https://github.com/reliablehosting/GCDTask</a></p><p><a href="https://github.com/clickontyler/COTTaskHelper">https://github.com/clickontyler/COTTaskHelper</a></p><p><a href="https://github.com/MiCHiLU/Supervisor-NSTask">https://github.com/MiCHiLU/Supervisor-NSTask</a></p><p>授权</p><p><a href="https://github.com/djui/iLeopard/blob/master/iLeopard/NSTask%2BOneLineTasksWithOutput.m">https://github.com/djui/iLeopard/blob/master/iLeopard/NSTask%2BOneLineTasksWithOutput.m</a></p><p>参考资料</p><p>1、&#x2F;bin、&#x2F;sbin、&#x2F;usr&#x2F;bin、&#x2F;usr&#x2F;sbin目录的区别</p><p><a href="http://www.361way.com/bin/1112.html">http://www.361way.com/bin/1112.html</a></p><p><a href="https://developer.apple.com/documentation/foundation/nstask">https://developer.apple.com/documentation/foundation/nstask</a></p><p><a href="https://www.raywenderlich.com/125071/nstask-tutorial-os-x">https://www.raywenderlich.com/125071/nstask-tutorial-os-x</a></p><p><a href="https://devhub.io/zh/repos/XieXieZhongxi-AsyncTask">https://devhub.io/zh/repos/XieXieZhongxi-AsyncTask</a></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode 插件</title>
      <link href="/2017/08/02/Xcode8%E6%8F%92%E4%BB%B6/"/>
      <url>/2017/08/02/Xcode8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>Getter 函数自动补全插件</strong></p><p><a href="http://www.ctolib.com/AutomaticCompletionPlugin.html">http://www.ctolib.com/AutomaticCompletionPlugin.html</a></p><p><strong>利用这个protoc插件生成Swift代码</strong></p><p><a href="http://www.ctolib.com/swift-protobuf-plugin.html">http://www.ctolib.com/swift-protobuf-plugin.html</a></p><p>代码片段</p><p><a href="https://github.com/QMUI/QMUI_iOS_CodeSnippets">https://github.com/QMUI/QMUI_iOS_CodeSnippets</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 启动画面 App图标尺寸 项目上架必须Icon设置</title>
      <link href="/2017/08/02/iOS%20%E5%90%AF%E5%8A%A8%E7%94%BB%E9%9D%A2%20App%E5%9B%BE%E6%A0%87%E5%B0%BA%E5%AF%B8%20%E9%A1%B9%E7%9B%AE%E4%B8%8A%E6%9E%B6%E5%BF%85%E9%A1%BBIcon%E8%AE%BE%E7%BD%AE/"/>
      <url>/2017/08/02/iOS%20%E5%90%AF%E5%8A%A8%E7%94%BB%E9%9D%A2%20App%E5%9B%BE%E6%A0%87%E5%B0%BA%E5%AF%B8%20%E9%A1%B9%E7%9B%AE%E4%B8%8A%E6%9E%B6%E5%BF%85%E9%A1%BBIcon%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1AppIcon图标尺寸如下："><a href="#1-1AppIcon图标尺寸如下：" class="headerlink" title="1.1AppIcon图标尺寸如下："></a><strong>1.1AppIcon图标尺寸如下：</strong></h3><p><strong>说明：AppIcon （6张） AppStore Icon （1张）（png格式）</strong></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/071754406188491.png" alt="071754406188491"></p><p><strong>AppStore Icon</strong> — <strong>1024x1024（必须）</strong></p><h3 id="1-2启动画面LaunchImage图标尺寸如下："><a href="#1-2启动画面LaunchImage图标尺寸如下：" class="headerlink" title="1.2启动画面LaunchImage图标尺寸如下："></a><strong>1.2启动画面LaunchImage图标尺寸如下：</strong></h3><p><strong>说明：至少切下图中显示的4张尺寸（png格式）</strong></p><p><strong>如果需要适配ipad 请参考1.4</strong></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/062255583214204.png" alt="062255583214204"></p><h3 id="1-3提交至AppStore展示图图片尺寸如下"><a href="#1-3提交至AppStore展示图图片尺寸如下" class="headerlink" title="1.3提交至AppStore展示图图片尺寸如下"></a>1.3提交至AppStore展示图<strong>图片尺寸如下</strong></h3><p><strong>说明：每个尺寸5张图片（3.5寸可忽略不切），一共15张张视图</strong></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/062254400716177.png" alt="062254400716177"></p><h3 id="参考尺寸及命名下"><a href="#参考尺寸及命名下" class="headerlink" title="参考尺寸及命名下:"></a><strong>参考尺寸及命名下:</strong></h3><table><thead><tr><th>编号</th><th>尺寸</th><th>命名</th></tr></thead><tbody><tr><td>1</td><td>640 × 1136</td><td><a href="mailto:&#76;&#97;&#x75;&#110;&#x63;&#x68;&#x49;&#109;&#97;&#103;&#101;&#x2d;&#x31;&#x2d;&#53;&#x36;&#x38;&#x68;&#64;&#50;&#120;&#46;&#x70;&#x6e;&#x67;">&#76;&#97;&#x75;&#110;&#x63;&#x68;&#x49;&#109;&#97;&#103;&#101;&#x2d;&#x31;&#x2d;&#53;&#x36;&#x38;&#x68;&#64;&#50;&#120;&#46;&#x70;&#x6e;&#x67;</a></td></tr><tr><td>2</td><td>640 × 1136</td><td><a href="mailto:&#x4c;&#97;&#117;&#x6e;&#99;&#x68;&#x49;&#109;&#97;&#103;&#101;&#45;&#x31;&#45;&#x37;&#48;&#48;&#45;&#53;&#x36;&#x38;&#x68;&#x40;&#50;&#x78;&#46;&#x70;&#110;&#103;">&#x4c;&#97;&#117;&#x6e;&#99;&#x68;&#x49;&#109;&#97;&#103;&#101;&#45;&#x31;&#45;&#x37;&#48;&#48;&#45;&#53;&#x36;&#x38;&#x68;&#x40;&#50;&#x78;&#46;&#x70;&#110;&#103;</a></td></tr><tr><td>3</td><td>640 × 960</td><td><a href="mailto:&#76;&#x61;&#117;&#110;&#99;&#x68;&#x49;&#x6d;&#97;&#x67;&#x65;&#x2d;&#49;&#45;&#x37;&#x30;&#48;&#x40;&#50;&#x78;&#x2e;&#112;&#110;&#x67;">&#76;&#x61;&#117;&#110;&#99;&#x68;&#x49;&#x6d;&#97;&#x67;&#x65;&#x2d;&#49;&#45;&#x37;&#x30;&#48;&#x40;&#50;&#x78;&#x2e;&#112;&#110;&#x67;</a></td></tr><tr><td>4</td><td>750 × 1334</td><td><a href="mailto:&#76;&#97;&#x75;&#x6e;&#x63;&#104;&#x49;&#x6d;&#97;&#x67;&#101;&#45;&#x31;&#x2d;&#x38;&#48;&#x30;&#x2d;&#x36;&#54;&#x37;&#x68;&#64;&#x32;&#120;&#x2e;&#112;&#x6e;&#x67;">&#76;&#97;&#x75;&#x6e;&#x63;&#104;&#x49;&#x6d;&#97;&#x67;&#101;&#45;&#x31;&#x2d;&#x38;&#48;&#x30;&#x2d;&#x36;&#54;&#x37;&#x68;&#64;&#x32;&#120;&#x2e;&#112;&#x6e;&#x67;</a></td></tr><tr><td>5</td><td>1242 × 2208</td><td><a href="mailto:&#76;&#x61;&#x75;&#x6e;&#x63;&#104;&#73;&#109;&#x61;&#x67;&#x65;&#45;&#49;&#x2d;&#x38;&#x30;&#48;&#45;&#80;&#x6f;&#x72;&#116;&#114;&#x61;&#105;&#116;&#x2d;&#55;&#x33;&#54;&#104;&#x40;&#51;&#x78;&#46;&#x70;&#110;&#103;">&#76;&#x61;&#x75;&#x6e;&#x63;&#104;&#73;&#109;&#x61;&#x67;&#x65;&#45;&#49;&#x2d;&#x38;&#x30;&#48;&#45;&#80;&#x6f;&#x72;&#116;&#114;&#x61;&#105;&#116;&#x2d;&#55;&#x33;&#54;&#104;&#x40;&#51;&#x78;&#46;&#x70;&#110;&#103;</a></td></tr><tr><td>6</td><td>640 × 960</td><td><a href="mailto:&#76;&#97;&#117;&#110;&#99;&#x68;&#73;&#109;&#x61;&#103;&#101;&#x2d;&#x31;&#64;&#50;&#x78;&#46;&#112;&#x6e;&#103;">&#76;&#97;&#117;&#110;&#99;&#x68;&#73;&#109;&#x61;&#103;&#101;&#x2d;&#x31;&#64;&#50;&#x78;&#46;&#112;&#x6e;&#103;</a></td></tr></tbody></table><p>**真机尺寸 **</p><table><thead><tr><th><strong>设备</strong></th><th><strong>屏幕尺寸</strong></th><th><strong>Reader</strong></th><th><strong>设计尺寸(px)</strong></th><th><strong>渲染后</strong></th></tr></thead><tbody><tr><td>iPhone 5&#x2F;5s&#x2F;5c</td><td>4.0（326PPI）</td><td>@2x</td><td>640x1136</td><td></td></tr><tr><td>iPhone 6&#x2F;6s&#x2F;7&#x2F;8</td><td>4.7（326PPI）</td><td>@2x</td><td>750x1134</td><td></td></tr><tr><td>iPhone6 Plus&#x2F;7 Plus&#x2F;8Plus</td><td>5.5（401PPI）</td><td>@3x</td><td>1242x2208</td><td>1080x1920</td></tr><tr><td>iPhone X</td><td>5.8（458PPI）</td><td>@3x</td><td>1125x2436</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iPhone4(s)：分辨率960*640，高宽比1.5</span><br><span class="line">iPhone5(s)：分辨率1136*640，高宽比1.775</span><br><span class="line">iPhone6/7：分辨率1334*750，高宽比1.779</span><br><span class="line">iPhone6+/7+：分辨率1920*1080，高宽比1.778</span><br></pre></td></tr></table></figure><p>可粗略认为iPhone5(s)、6(+)的高宽比是一致的（16:9），即可以等比例缩放。因此可以按宽度适配：<code> fitScreenWidth= width*(SCREEN_WIDTH/320)</code></p><p> <strong>1.4 如果需要适配iPad，还需要添加以下分辨率图片</strong></p><p>需要启动图尺寸:(横竖屏)</p><p>数据参考来源：</p><p><a href="https://www.apple.com/cn/iphone/compare/">【官网】iPhone 机型比较</a></p><p><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></p><p><a href="http://www.ui001.com/chicun/">http://www.ui001.com/chicun/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS webview测试</title>
      <link href="/2017/08/02/iOS-UIWebview%E6%B5%8B%E8%AF%95/"/>
      <url>/2017/08/02/iOS-UIWebview%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>ios webview测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error: /usr/local must be writable!</span><br><span class="line">解决 sudo chown -R $(whoami) /usr/local</span><br><span class="line"></span><br><span class="line">重新安装</span><br><span class="line"> sudo ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p><a href="https://sebastianblade.com/debug-ios-safari-with-chrome-devtools/">https://sebastianblade.com/debug-ios-safari-with-chrome-devtools/</a></p><p><a href="http://www.jianshu.com/p/ea02cb83988c">http://www.jianshu.com/p/ea02cb83988c</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS使用js库实现css转换json</title>
      <link href="/2017/08/02/%E4%BD%BF%E7%94%A8%20CSSJSON%20Converts%20CSS%20to%20JSON/"/>
      <url>/2017/08/02/%E4%BD%BF%E7%94%A8%20CSSJSON%20Converts%20CSS%20to%20JSON/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/aramk/CSSJSON">https://github.com/aramk/CSSJSON</a></p><p>在cssjson.js文件末尾加入css转换json然后json字符串输出函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">exampleCSSJSON</span>(<span class="params">cssString</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="variable constant_">CSSJSON</span>.<span class="title function_">toJSON</span>(cssString);</span><br><span class="line">    <span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json);</span><br><span class="line">    <span class="keyword">return</span> jsonStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)doCssParser</span><br><span class="line">&#123;</span><br><span class="line">    JSContext *context = [[JSContext alloc] init];</span><br><span class="line">    context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;# JS Exception: %@&quot;</span>, exception);</span><br><span class="line">        context.exception = exception;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *cssText = [<span class="built_in">NSString</span> stringWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;agate&quot;</span> ofType:<span class="string">@&quot;css&quot;</span>]</span><br><span class="line">                                                  encoding:<span class="built_in">NSUTF8StringEncoding</span></span><br><span class="line">                                                     error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *jsPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;cssjson&quot;</span> ofType:<span class="string">@&quot;js&quot;</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithContentsOfFile:jsPath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [context evaluateScript:jsString];</span><br><span class="line"></span><br><span class="line">    JSValue *function = context[<span class="string">@&quot;exampleCSSJSON&quot;</span>];</span><br><span class="line">    JSValue* result = [function callWithArguments:@[cssText]];</span><br><span class="line">    <span class="built_in">NSString</span> *jsonStr=[result toString];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;result0:%@&quot;</span>,jsonStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理相同一个value对应多个key情况</span></span><br><span class="line">-(<span class="type">void</span>)fomatFinalJSONDict:(<span class="built_in">NSDictionary</span>*)jsonDict</span><br><span class="line"> &#123;</span><br><span class="line">       <span class="built_in">NSDictionary</span> *subDict=jsonDict[<span class="string">@&quot;children&quot;</span>];</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mdict=[<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [subDict enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSString</span> *key, <span class="type">id</span>  obj, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *keyArr=[key componentsSeparatedByString:<span class="string">@&quot;,\n&quot;</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;keyArr:%@&quot;</span>,keyArr);</span><br><span class="line">        <span class="keyword">if</span> (keyArr.count&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSString</span> *subKey <span class="keyword">in</span> keyArr) &#123;</span><br><span class="line">                [mdict setObject:obj?:<span class="string">@&quot;&quot;</span> forKey:subKey];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            [mdict setObject:obj?:<span class="string">@&quot;&quot;</span> forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用原生oc库解析</p><p><a href="https://github.com/tracy-e/ESCssParser">https://github.com/tracy-e/ESCssParser</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ESCssParser.h&quot;</span><br><span class="line">-(void)doESCssParser2</span><br><span class="line">&#123;</span><br><span class="line">    NSString *cssText = [NSString stringWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;agate&quot; ofType:@&quot;css&quot;]</span><br><span class="line">                                                  encoding:NSUTF8StringEncoding</span><br><span class="line">                                                     error:nil];</span><br><span class="line">    ESCssParser *parser = [[ESCssParser alloc] init];</span><br><span class="line">    NSDictionary *styleSheet = [parser parseText:cssText];</span><br><span class="line">    NSLog(@&quot;styleSheet: %@&quot;, styleSheet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然使用ESCssParser代码相对较少，但ESCssParser库代码量是很大的，使用js库解析，适用多平台同规则解析，相对全能多了。</p><p>html演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    pre &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: pre-wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add this if you&#x27;re supporting IE 7, 8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;cssjson.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Dummy CSS</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> css = <span class="string">&#x27;test&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> json =<span class="title function_">exampleCSSJSON</span>(css);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;strong&gt;JSON&lt;/strong&gt;&lt;br/&gt;&lt;pre&gt;&#x27;</span>+json+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其它参考</p><p><a href="http://blog.cnbang.net/tech/2630/">http://blog.cnbang.net/tech/2630/</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC之http命令行工具curl</title>
      <link href="/2017/06/06/MAC%E4%B9%8Bhttp%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/06/06/MAC%E4%B9%8Bhttp%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>MAC之http命令行工具curl</p><blockquote><p>curl是一个向服务器传输数据的工具，支持http、ftp、ftps、scp、sftp、tftp、telnet协议，它可以作为调试接口的利器</p></blockquote><p>curl默认是GET方法，使用-X参数可以支持其他动词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST www.baidu.com</span><br><span class="line">curl -X DELETE www.baidu.com</span><br></pre></td></tr></table></figure><p><strong>一、基本语法</strong></p><blockquote><p>-X&#x2F;–request [GET|POST|PUT|DELETE|…] 用于指定请求方式<br>-H&#x2F;–header             设置请求头(header)信息<br>-i&#x2F;–include            请求接口后，输出响应的header信息<br>-d&#x2F;–data               设置请求中的参数<br>-v&#x2F;–verbose            输出更加详细的响应信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;http://www.rest.com/api/users&quot;</span><br><span class="line">curl -X POST &quot;http://www.rest.com/api/users&quot;</span><br><span class="line">curl -X PUT &quot;http://www.rest.com/api/users&quot;</span><br><span class="line">curl -X DELETE &quot;http://www.rest.com/api/users&quot;</span><br></pre></td></tr></table></figure><h5 id="一、Get请求"><a href="#一、Get请求" class="headerlink" title="一、Get请求"></a>一、Get请求</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://www.baidu.com&quot; #如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</span><br><span class="line">curl -i &quot;http://www.baidu.com&quot;  #显示全部信息</span><br><span class="line">curl -I &quot;http://www.baidu.com&quot;  #只显示头部信息 HTTP response头信息</span><br><span class="line">curl -v &quot;http://www.baidu.com&quot;  #显示get请求全过程解析</span><br><span class="line">curl http://www.baidu.com/    #打开网页</span><br><span class="line">curl -o ./baidu.html http://www.baidu.com#保存网页</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type:application/json&quot; http://www.baidu.com #添加头</span><br><span class="line">curl --user-agent &quot;[User Agent]&quot; [URL]      #添加user agent</span><br></pre></td></tr></table></figure><p>post数据或get数据（get就是-X GET)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H &quot;Accept: application/json&quot; -X POST -d &quot;firstName=james&quot; http://192.168.0.165/persons/person</span><br></pre></td></tr></table></figure><h5 id="二、post请求"><a href="#二、post请求" class="headerlink" title="二、post请求"></a>二、post请求</h5><p>直接使用<code>curl</code>只是普通的<code>GET</code>请求</p><p>有两种方式进行<code>Post</code>请求：<br>一、使用<code>-d</code>参数，并在后边附上要<code>POST</code>的数据</p><p><strong>-d</strong> 参数指定表单以POST的形式执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d &quot;param1=value1&amp;param2=value2&quot; &quot;http://www.baidu.com&quot;</span><br></pre></td></tr></table></figure><p>二、直接使用<code>-X</code>参数指明使用请求方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST www.example.com</span><br></pre></td></tr></table></figure><p>如果接口要求必须使用<code>Content-Type:application/json</code>。可以通过<code>-H</code>参数设置请求头：</p><p><code>curl -H &quot;Content-Type:application/json&quot; -d &#39;&#123;&quot;name&quot;: &quot;wcp&quot;&#125;&#39; -i www.example.com/users</code></p><p>在http header加入的訊息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -i -H &quot;Content-Type: application/json&quot; http://www.example.com/users</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">huluo:~ luo.h$ curl -h</span><br><span class="line">Usage: curl [options...] &lt;url&gt;</span><br><span class="line">Options: (H) means HTTP/HTTPS only, (F) means FTP only</span><br><span class="line">     --anyauth       Pick &quot;any&quot; authentication method (H)</span><br><span class="line"> -a, --append        Append to target file when uploading (F/SFTP)</span><br><span class="line">     --basic         Use HTTP Basic Authentication (H)</span><br><span class="line"> ...</span><br><span class="line"> -q                  Disable .curlrc (must be first parameter)</span><br></pre></td></tr></table></figure><h3 id="HTTP-GUI-工具"><a href="#HTTP-GUI-工具" class="headerlink" title="HTTP GUI 工具"></a>HTTP GUI 工具</h3><p><a href="http://luckymarmot.com/paw">Paw2</a><br><a href="http://ditchnet.org/httpclient/">HTTP Client</a><br><a href="http://ditchnet.org/httpclient/">Cocoa Rest Client</a><br><a href="https://github.com/jakubroztocil/httpie">https://github.com/jakubroztocil/httpie</a><br><a href="https://github.com/mmattozzi/cocoa-rest-client">https://github.com/mmattozzi/cocoa-rest-client</a><br><a href="https://github.com/ACENative/ACEView">https://github.com/ACENative/ACEView</a><br><a href="https://curl.haxx.se/docs/manpage.html#-d">https://curl.haxx.se/docs/manpage.html#-d</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --data  &#x27;username=kele8&amp;password=123456test&#x27; &#x27;https://v46.pcauto.com.cn/passport3/rest/login_new.jsp&#x27;</span><br><span class="line">curl -X POST -d &quot;username=kele8&quot; -d &quot;password=123456test&quot; https://v46.pcauto.com.cn/passport3/rest/login_new.jsp</span><br><span class="line"></span><br><span class="line">//保存cookie</span><br><span class="line">curl -D sugarcookies -X POST -d &quot;username=kele8&quot; -d &quot;password=123456test&quot; https://v46.pcauto.com.cn/passport3/rest/login_new.jsp</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用`&amp;`串接多個参数</span></span><br><span class="line">curl -X POST -d &quot;username=kele8&amp;password=123456test&quot; yourURl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可使用多个`-d`，效果同上</span></span><br><span class="line">curl -X POST -d &quot;username=kele8&quot; -d &quot;password=123456test&quot;</span><br><span class="line">curl -X POST -d &quot;param1=a 0space&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;a space&quot;</span> url encode后空白字元会编码成<span class="string">&#x27;%20&#x27;</span>为<span class="string">&quot;a%20space&quot;</span>，编码后的参数可以直接使用</span></span><br><span class="line">curl -X POST -d &quot;param1=a%20space&quot;</span><br><span class="line"></span><br><span class="line">curl -i -X POST -b &quot;common_session_id1=BA9A8CCFE21CDD38D4A79EC8CE10DA45955B13C980CF88CE6293706A3549C7B83EC4C96FE99E0313&quot; -d username=kele8 -d password=123456test -c  ~/cookie.txt  https://v46.pcauto.com.cn/passport3/rest/login_new.jsp</span><br><span class="line"></span><br><span class="line">curl  &quot;common_session_id1=BA9A8CCFE21CDD38D4A79EC8CE10DA45955B13C980CF88CE6293706A3549C7B83EC4C96FE99E0313&quot; -X POST -d &quot;nodeId=13814&amp;topicId=14140213&amp;content=uuu]&quot;</span><br><span class="line"></span><br><span class="line">    curl -X POST -c cookies.txt -u &quot;Uern@me:P@ssw0rd&quot; https://login.three.ie/</span><br><span class="line"></span><br><span class="line">http://v71.pcauto.com.cn/zxapi/1/topic/live/node/update.ajax</span><br></pre></td></tr></table></figure><h3 id="httpPie"><a href="#httpPie" class="headerlink" title="httpPie"></a>httpPie</h3><p><code>httpPie</code>相比<code>Curl</code>的好处是：返回值信息有语法高亮、对返回的JSON字符串自动格式化。</p><h5 id="httpie安装"><a href="#httpie安装" class="headerlink" title="httpie安装"></a>httpie安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install httpie</span></span><br></pre></td></tr></table></figure><h5 id="httpPie使用"><a href="#httpPie使用" class="headerlink" title="httpPie使用"></a>httpPie使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http -f POST www.baidu.com name=name  #模拟表单提交</span><br><span class="line">http -v www.baidu.com     #显示详细的请求信息</span><br><span class="line">http -h www.baidu,com     #仅显示Header</span><br><span class="line">http -b www.baidu.com     #仅显示Body</span><br><span class="line">http -d www.baidu.com     #下载文件</span><br><span class="line"></span><br><span class="line">http PUT www.baidu.com name=name password=pwd  #传递json类型参数（字符串）</span><br><span class="line">http PUT www.baidu.com age:=28    #非字符串类型使用：=分割</span><br><span class="line">http --form POST www.baidu.com name=&#x27;name&#x27;     #模拟form的POST请求</span><br><span class="line">http -f POST www.baidu.com/files  name=&#x27;name&#x27; file@~/test.txt  #模拟form文件上传</span><br><span class="line">http www.baidu.com User-Agent:Txl/1.0 &#x27;Cookie:a=b;b=c&#x27; Referer:http://www.baidu.com/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改请求头，使用：分割</span></span><br><span class="line"></span><br><span class="line">http -a username:password www.baidu.com   #认证</span><br><span class="line">http --auth--type=digest -a user:pwd www.baidu.com  #认证</span><br><span class="line">http --proxy=http:http://192.168.1.1:8080 www.baidu.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用HTTP代理</span></span><br></pre></td></tr></table></figure><p>了解http原理， <a href="https://launchschool.com/books/http">Introduction to HTTP</a> 是一个不错的选择，也可以参考它的中文翻译版: <a href="https://www.kancloud.cn/kancloud/tealeaf-http">HTTP 下午茶</a></p><h5 id="cookie操作"><a href="#cookie操作" class="headerlink" title="cookie操作"></a>cookie操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -D sugarcookies -X POST -d &quot;username=kele8&quot; -d &quot;password=123456test&quot; https://v46.pcauto.com.cn/passport3/rest/login_new.jsp</span><br><span class="line">curl -D sugarcookies -d &quot;username=kele8&quot; -d &quot;password=123456test&quot; https://v46.pcauto.com.cn/passport3/rest/login_new.jsp</span><br><span class="line">curl -b sugarcookies  https://v80.pcauto.com.cn/xsp/s/club/v4.7/getNewMsgCount.xsp?userId=43970286</span><br><span class="line">curl -b &#x27;/Users/pconline/Documents/sugarcookies&#x27; https://v80.pcauto.com.cn/xsp/s/club/v4.7/getNewMsgCount.xsp?userId=43970286</span><br><span class="line">curl -b sugarcookies https://v80.pcauto.com.cn/xsp/s/club/v4.7/getNewMsgCount.xsp?userId=43970286</span><br><span class="line">curl  -H  &quot;&quot; https://v80.pcauto.com.cn/xsp/s/club/v4.7/getNewMsgCount.xsp?userId=43970286</span><br></pre></td></tr></table></figure><p>其它字段释义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-v/--verbose 小写的v参数，用于打印更多信息，包括发送的请求信息，这在调试脚本是特别有用。</span><br><span class="line">-m/--max-time &lt;seconds&gt; 指定处理的最大时长</span><br><span class="line">-H/--header &lt;header&gt; 指定请求头参数</span><br><span class="line">-s/--slient 减少输出的信息，比如进度</span><br><span class="line">--connect-timeout &lt;seconds&gt; 指定尝试连接的最大时长</span><br><span class="line">-x/--proxy &lt;proxyhost[:port]&gt; 指定代理服务器地址和端口，端口默认为1080</span><br><span class="line">-T/--upload-file &lt;file&gt; 指定上传文件路径</span><br><span class="line">-o/--output &lt;file&gt; 指定输出文件名称</span><br><span class="line">-d/--data/--data-ascii &lt;data&gt; 指定POST的内容</span><br><span class="line">--retry &lt;num&gt;指定重试次数</span><br><span class="line">-e/--referer &lt;URL&gt; 指定引用地址</span><br><span class="line">-I/--head    仅返回头部信息，使用HEAD请求</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-w  定义curl的输出格式，</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">&#123;http_code&#125;则为获取curl获取URL的http状态码</span></span><br><span class="line">时间指标解释 ：</span><br><span class="line">time_connect    建立到服务器的 TCP 连接所用的时间</span><br><span class="line">time_starttransfer    在发出请求之后，Web 服务器返回数据的第一个字节所用的时间</span><br><span class="line">time_total   完成请求所用的时间</span><br><span class="line">在 发出请求之后，Web 服务器处理请求并开始发回数据所用的时间是</span><br><span class="line">（time_starttransfer）1.044 - （time_connect）0.244 = 0.8 秒</span><br><span class="line">客户机从服务器下载数据所用的时间是</span><br><span class="line">（time_total）2.672 - （time_starttransfer）1.044 = 1.682 秒</span><br><span class="line">其他常用常用http变量</span><br><span class="line">http_code:http返回类似404,200,500等</span><br><span class="line">time_total:总相应时间</span><br><span class="line">time_namelookup:域名解析时间</span><br><span class="line">time_connect:连接到目标地址耗费的时间</span><br><span class="line">time_pretransfer:从执行到开始传输文件的时间间隔</span><br><span class="line">time_starttransfer:从执行到开始传输文件的时间间隔</span><br><span class="line">size_download:下载网页或文件大小</span><br><span class="line">size_upload:上传文件大小</span><br><span class="line">size_header:响应头</span><br><span class="line">size_request:发送请求参数大小</span><br><span class="line">speed_download：传输速度</span><br><span class="line">speed_upload:平均上传速度</span><br><span class="line">content_type:下载文件类型.</span><br></pre></td></tr></table></figure><p>更多Http，Curl讲解<br><a href="http://php.net/manual/zh/function.curl-getinfo.php">http://php.net/manual/zh/function.curl-getinfo.php</a><br><a href="https://orrsella.com/2014/10/06/http-request-diagnostics-with-curl/">https://orrsella.com/2014/10/06/http-request-diagnostics-with-curl/</a><br><a href="https://ec.haxx.se/usingcurl-verbose.html">https://ec.haxx.se/usingcurl-verbose.html</a><br><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html">https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html</a><br><a href="http://coderlt.coding.me/2016/03/22/mac-command-curl/">MAC之http命令行工具curl</a><br><a href="https://tonydeng.github.io/2015/07/10/httpie-howto/">HTTPie:超爽的HTTP命令行客户端</a><br><a href="http://lingxiankong.github.io/blog/2014/08/19/curl-httpie/">http://lingxiankong.github.io/blog/2014/08/19/curl-httpie/</a><br><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html">http://www.ruanyifeng.com/blog/2011/09/curl.html</a><br>curl命令用法<br><a href="http://ju.outofmemory.cn/entry/84875">http://ju.outofmemory.cn/entry/84875</a><br><a href="http://jockchou.github.io/blog/2016/01/23/curl.html">http://jockchou.github.io/blog/2016/01/23/curl.html</a><br>使用CURL来调试你的应用<br><a href="http://stormzhang.com/devtools/2014/11/07/use-curl-debug/">http://stormzhang.com/devtools/2014/11/07/use-curl-debug/</a><br><a href="http://man.linuxde.net/curl">http://man.linuxde.net/curl</a><br><a href="https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">httpie人性化curl工具使用详解</a><br>Curl with Cookies and Headers<br><a href="http://joelpm.com/curl/tools/2010/06/17/curl-with-cookies-and-headers.html">http://joelpm.com/curl/tools/2010/06/17/curl-with-cookies-and-headers.html</a><br>使用curl指令測試REST服務<br><a href="http://blog.kent-chiu.com/2013/08/14/testing-rest-with-curl-command.html">http://blog.kent-chiu.com/2013/08/14/testing-rest-with-curl-command.html</a><br><a href="https://github.com/atg/taskit">https://github.com/atg/taskit</a><br><a href="https://github.com/jakubroztocil/httpie">https://github.com/jakubroztocil/httpie</a></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode8插件开发</title>
      <link href="/2017/06/05/Xcode8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2017/06/05/Xcode8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>Xcode8以后, 以前的插件都不能用了。Apple官方推荐的方式<em>Xcode Source Editor Extension</em>来自己制作插件. Extension的方式开发的插件, 可以独立上架AppStore, 并且是独立于Xcode工程独立运行的. 但是没有UI交互, 不能在后台运行并且只能在开发者调用的时候直接修改代码。</p><p><img src="https://github.com/huluo666/NetWorkMonitorView/blob/master/NetWorkMonitorView/imge0.gif" alt="https://github.com/huluo666/NetWorkMonitorView/blob/master/NetWorkMonitorView/imge0.gif"></p><p>官方文档</p><p><a href="https://developer.apple.com/documentation/xcodekit">https://developer.apple.com/documentation/xcodekit</a></p><p><a href="https://developer.apple.com/documentation/xcodekit/creating_a_source_editor_extension">Creating a Source Editor Extension</a></p><p>测试扩展</p><p><a href="https://developer.apple.com/documentation/xcodekit/testing_your_source_editor_extension">Testing Your Source Editor Extension</a></p><h4 id="Extension特性"><a href="#Extension特性" class="headerlink" title="Extension特性"></a>Extension特性</h4><ul><li>支持上架到AppStore</li><li>每个Extension运行在独立的进程，如果它崩溃了，不会引起Xcode的崩溃，且会有错误提示</li></ul><h4 id="Extension缺陷"><a href="#Extension缺陷" class="headerlink" title="Extension缺陷"></a>Extension缺陷</h4><ul><li>无UI交互</li><li>只能够在开发者调用相关命令的时候直接的修改代码，具体表现为 <strong>获取正在编辑的文本</strong> <strong>获取选中的区域</strong> <strong>替换正在编辑的文本</strong> <strong>选中正在编辑的文本</strong> <strong>在Editor菜单中生成一个子菜单，用于调用插件</strong> <strong>绑定快捷键</strong></li><li>Extension不能在后台运行</li></ul><p>1、新建工程</p><p>打开Xcode-&gt; <code>command + shift + N</code> -&gt;选择macOS -&gt; Cocoa Application, 点击Next新建一个工程。</p><p>2、新增Target（Extension）</p><p>在Xcode工具栏中选择<code>Editor -&gt; Add Target -&gt; MacOS -&gt; Xcode Source Editor Extension-点击Activate</code></p><p>新增后系统会默认创建<code>SourceEditorExtension</code>，<code>SourceEditorCommand</code>两个类。</p><p> <code>invocation.commandIdentifier</code>; 命令标识符，对应plist文件中的<code>XCSourceEditorCommandIdentifier</code>字段，一个扩展可以有多个功能，用以区分需要执行的命令事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Identifier=com.pcauto.PCDevTools.AutoPropertyPlug.SourceEditorCommand</span><br><span class="line">Identifier=com.pcauto.PCDevTools.AutoPropertyPlug.SourceEditorCommand2</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>选择name属性行，点击插件生成属性</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_name) &#123;</span><br><span class="line">        _name = [[<span class="built_in">NSString</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>invocation.buffer.lines</code>是一个可变字符串数组，由于属性代码是倒序的，所以将属性代码依次插入到固定行即可，如果属性代码是顺序的，那么插入位置行数要++1</p><p>将属性代码插入到文本末尾</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)insertCodeWithStrings:(<span class="built_in">NSArray</span> *)getterStrings &#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;getterStrings=%@&quot;</span>,getterStrings);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; getterStringArray.count; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;ViewController=%@-%zd&quot;</span>,<span class="keyword">self</span>.invocation.buffer.lines,<span class="keyword">self</span>.endLineNumber);</span><br><span class="line">        [<span class="keyword">self</span>.invocation.buffer.lines insertObject:getterStrings[i] atIndex:<span class="keyword">self</span>.endLineNumber];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invocation.buffer.lines 所有行</p><h4 id="7-测试Extension"><a href="#7-测试Extension" class="headerlink" title="7.测试Extension"></a>7.测试Extension</h4><p>点击xcode工具栏-&gt;Editor-&gt;插件菜单</p><h4 id="8-绑定快捷键"><a href="#8-绑定快捷键" class="headerlink" title="8.绑定快捷键"></a>8.绑定快捷键</h4><ol><li>添加快捷键: Xcode -&gt; “Preferences” -&gt; “Key Bindings” -&gt; 搜索插件名字 -&gt; 添加对应的快捷键.</li></ol><p>快捷键<code>command+，</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">占位符的格式：&lt;#param#&gt; &lt;#className#&gt; &lt;#objName#&gt;</span><br><span class="line"></span><br><span class="line">- (#className# *)#objName# &#123;\n    if (!_#objName#) &#123;\n        _#objName# = [[#className# alloc] init];\n    &#125;\n    return _#objName#;\n&#125;\n</span><br></pre></td></tr></table></figure><p>系统偏好设置路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/PreferencePanes</span><br><span class="line">/System/Library/PreferencePanes/Extensions.prefPane 扩展</span><br></pre></td></tr></table></figure><p>问题备忘与解决方法</p><p>1、<code>There is a problem launching using posix_spawn (error code: 2).</code></p><p>将Xcode加入到Scheme的执行菜单里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开Xcode-&gt;Product-&gt;EditScheme-&gt;Run-&gt;Executable-&gt;Xcode.app</span><br></pre></td></tr></table></figure><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20180306_092216.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDEExtensionManager: Xcode Extension does not meet code signing requirement: Error Domain=DVTSecErrorDomain Code=-67050 &quot;code failed to satisfy specified code requirement(s)&quot; UserInfo=&#123;NSLocalizedDescription=code failed to satisfy specified code requirement(s)&#125;</span><br></pre></td></tr></table></figure><p>工程Target和Xcode Extension Target 需要选择一个签名证书 <code>Target-&gt;signing-&gt;team-&gt;签名证书</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac iterm2快捷键</title>
      <link href="/2017/05/08/Mac%E7%BB%88%E7%AB%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017/05/08/Mac%E7%BB%88%E7%AB%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="按单词移动光标"><a href="#按单词移动光标" class="headerlink" title="按单词移动光标"></a>按单词移动光标</h4><ul><li><code>option+b</code> ：前移一个单词</li><li><code>option+f</code> ：后移一个单词</li></ul><p>b 和 f 分别是 backward 和 forward 的意思</p><h4 id="移动到行首行尾"><a href="#移动到行首行尾" class="headerlink" title="移动到行首行尾"></a>移动到行首行尾</h4><ul><li><code>fn+left</code> ：移动到行首</li><li><code>fn+right</code> ：移动到行尾</li><li><code>control+a</code> ：移动到行首</li><li><code>control+e</code> ：移动到行尾</li></ul><p>fn+left 和 fn+right 其实是 Mac 自带的功能，分别对应大键盘上的 Home 和 End 键，此外 fn+up 和 fn+down 对应 PgUp 和 PgDown。</p><h4 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h4><ul><li><code>control+w</code> ：删除一个单词</li><li><code>control+u</code> ：删除一行</li><li><code>control+l</code> ：清屏</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>使用 <code>control+r</code> 可以搜索最近使用的命令。另外，bash中也可以配置autojump。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这可能是最快的打包IPA方式吧</title>
      <link href="/2017/04/25/%E6%89%93%E5%8C%85ipa/"/>
      <url>/2017/04/25/%E6%89%93%E5%8C%85ipa/</url>
      
        <content type="html"><![CDATA[<p>测试发现用脚本自动打包时间和用xcode正常的打包方式时间基本一样，只是少了些手动点击步骤。而采用以下方法时间大大缩小。</p><h5 id="第一步、使用iTunes将app打包成ipa"><a href="#第一步、使用iTunes将app打包成ipa" class="headerlink" title="第一步、使用iTunes将app打包成ipa"></a>第一步、使用iTunes将app打包成ipa</h5><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20170425_101846.png"></p><h5 id="第二步、使用重签名工具重签名"><a href="#第二步、使用重签名工具重签名" class="headerlink" title="第二步、使用重签名工具重签名"></a>第二步、使用重签名工具重签名</h5><p><a href="https://github.com/DanTheMan827/ios-app-signer">https://github.com/DanTheMan827/ios-app-signer</a></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20170425_102307.png" alt="iregin"></p><p>​        当然然每次拖到iTunes里面多少有点麻烦，也可以在project下的<code>Build Phase</code>下<code>Add Run Script</code>添加一下shell脚本代码，这样每编译都会在<code>$PRODUCT_NAME.app</code>同级目录下生成一个<code>$PRODUCT_NAME.ipa</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/xcrun -sdk iphoneos PackageApplication -v &quot;$BUILT_PRODUCTS_DIR/$PRODUCT_NAME.app&quot; -o &quot;$BUILT_PRODUCTS_DIR/$PRODUCT_NAME.ipa&quot;</span><br></pre></td></tr></table></figure><p>Cocoa开发之获取Keychain证书列表</p><p><a href="http://www.skyfox.org/cocoa-keychain-certificate-list.html">http://www.skyfox.org/cocoa-keychain-certificate-list.html</a></p><p>获取 .mobileprovisioning profile with objectivec</p><p><a href="http://stackoverflow.com/questions/19201040/read-mobileprovisioning-profile-with-objectivec">http://stackoverflow.com/questions/19201040/read-mobileprovisioning-profile-with-objectivec</a></p><p><a href="http://stackoverflow.com/questions/18849727/find-provisioning-profile-in-xcode-5">http://stackoverflow.com/questions/18849727/find-provisioning-profile-in-xcode-5</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOSipa重签名</title>
      <link href="/2017/04/24/iOS%20IPA%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
      <url>/2017/04/24/iOS%20IPA%E9%87%8D%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p> 获取签名证书列表</p><p><a href="http://stackoverflow.com/questions/7747230/determining-codesigning-identities-from-the-command-line">http://stackoverflow.com/questions/7747230/determining-codesigning-identities-from-the-command-line</a></p><p><a href="http://stackoverflow.com/questions/5160863/how-to-re-sign-the-ipa-file">http://stackoverflow.com/questions/5160863/how-to-re-sign-the-ipa-file</a></p><p>ipa文件“减肥”初探</p><p><a href="http://www.jianshu.com/p/a72d03e92c80">http://www.jianshu.com/p/a72d03e92c80</a></p><p>自动化打包IPA脚本</p><p><a href="http://www.ileafly.com/2016/11/17/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85IPA%E8%84%9A%E6%9C%AC/">http://www.ileafly.com/2016/11/17/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85IPA%E8%84%9A%E6%9C%AC/</a></p><p>检查NSTask的进度</p><p><a href="http://www.it1352.com/519658.html">http://www.it1352.com/519658.html</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>const常量与define宏定义，结构体的区别</title>
      <link href="/2017/04/21/const%E5%B8%B8%E9%87%8F%E4%B8%8Edefine%E5%AE%8F%E5%AE%9A%E4%B9%89%EF%BC%8C%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/04/21/const%E5%B8%B8%E9%87%8F%E4%B8%8Edefine%E5%AE%8F%E5%AE%9A%E4%B9%89%EF%BC%8C%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="define和const区别"><a href="#define和const区别" class="headerlink" title="#define和const区别"></a>#define和const区别</h4><p><strong>(1) 编译器处理方式不同</strong></p><ul><li><code>编译时刻</code>:define宏是预编译（编译之前处理），const是编译运行阶段。</li></ul><p><strong>(2) 类型和编译安全检查不同</strong></p><ul><li>define宏没有类型，不做任何类型检查，仅仅是替换展开，不会报编译错误。</li><li>const常量有具体的类型，在编译阶段会执行类型检查，会报编译错误。</li><li>有些集成化的调试工具可以对const常量进行调试，但是不能对宏常量进行调试。</li></ul><p><strong>(3) 存储方式不同</strong></p><ul><li>define宏仅仅是展开，有多少地方使用，就展开多少次，不会分配内存。（宏定义不分配内存，<strong>变量定义</strong>分配内存。）</li><li>const常量会在内存中分配(可以是堆中也可以是栈中)。</li></ul><p><strong>(4)const  可以节省空间，避免不必要的内存分配。</strong></p><p> 例如：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">//常量宏</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="type">double</span> Pi=<span class="number">3.14159</span>; <span class="comment">//此时并未将Pi放入ROM中 ......</span></span><br><span class="line"><span class="type">double</span> i=Pi; <span class="comment">//此时为Pi分配内存，以后不再分配！</span></span><br><span class="line"><span class="type">double</span> I=PI; <span class="comment">//编译期间进行宏替换，分配内存</span></span><br><span class="line"><span class="type">double</span> j=Pi; <span class="comment">//没有内存分配</span></span><br><span class="line"><span class="type">double</span> J=PI; <span class="comment">//再进行宏替换，又一次分配内存！</span></span><br></pre></td></tr></table></figure><p>宏是直接替换的,它会产生许多个临时的存储空间来存储需要替换的部分,这样会浪费内存,没有必要。 const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是象#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝（因为是全局的只读变量，存在静态区），而 #define定义的常量在内存中有若干个拷贝。</p><p><strong>(5) 提高了效率。</strong></p><p> 编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。使用大量#define宏，容易造成编译时间久，每次都需要重新替换。</p><p><strong>(6) 宏替换只作替换，不做计算，不做表达式求解;</strong></p><p>宏预编译时就替换了，程序运行时，并不分配内存。</p><h4 id="static简介"><a href="#static简介" class="headerlink" title="static简介"></a>static简介</h4><ul><li>修饰局部变量：<br>1.延长局部变量的生命周期,程序结束才会销毁。<br>2.局部变量只会生成一份内存,只会初始化一次。</li><li>修饰全局变量<br>1.只能在本文件中访问,修改全局变量的作用域,生命周期不会改。</li></ul><h4 id="const简介"><a href="#const简介" class="headerlink" title="const简介"></a>const简介</h4><p>之前常用的字符串常量，一般是抽成宏，但是苹果不推荐我们抽成宏，推荐我们使用const常量。</p><p>const在C语言中算是一个比较新的描述符，我们称之为常量修饰符，意即其所修饰<br>的对象为常量(immutable)。</p><p>const只修饰它右边的内容，被const修饰的内容都是常量、都是不能再修改的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （基本数据变量p，指针变量*p）</span></span><br><span class="line"><span class="comment">// const修饰指针变量访问的内存空间，修饰的是右边*p1，</span></span><br><span class="line"><span class="type">int</span>  *<span class="type">const</span> p1; <span class="comment">// p1:常量 *p1:变量--(*常量=指针变量)</span></span><br><span class="line"><span class="type">int</span>  <span class="type">const</span> *p2; <span class="comment">// p2:变量 *p2:常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p3;  <span class="comment">// p3:变量 *p3:常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个const修饰*p4 第二个const修饰 p4</span></span><br><span class="line"><span class="comment">// 两种方式一样，也即被const修饰的内容都是常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p4;  <span class="comment">//  p4：常量 *p4：常量</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> * <span class="type">const</span> p5;  <span class="comment">//  p5：常量 *p4：常量</span></span><br></pre></td></tr></table></figure><ul><li>注：判断p和p是只读还是变量 关键是看const在谁前面。<ul><li>如果只在p前面，那么p只读 *p还是变量；</li><li>如果在*p前面，p是变量   *p是只读。</li></ul></li></ul><p><code>extern</code>与<code>const</code>联合使用</p><p>开发中使用场景:在多个文件中经常使用的同一个字符串常量，可以使用extern与const组合。</p><p>原因:</p><ul><li>static与const组合：在每个文件都需要定义一份静态全局变量。</li><li>extern与const组合:只需要定义一份全局变量，多个文件共享。</li></ul><p>例如：</p><p>AppConst.h</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kStr1  = <span class="string">@&quot;kimi&quot;</span>;<span class="comment">//此处定义的kStr1不能改变，否则会发生错误</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span>  <span class="keyword">const</span> *kStr2 = <span class="string">@&quot;kimi&quot;</span>;<span class="comment">//跟上面的定义写法不同，但是结果一样</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSString</span>  *kStr3 = <span class="string">@&quot;kimi&quot;</span>;<span class="comment">//此处定义的kStr可修改其值，但是修改过后他们的内存地址一样。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kStr4;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kStr5;</span><br></pre></td></tr></table></figure><p>AppConst.m</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> kStr4 = <span class="string">@&quot;kimi&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> kStr5 = <span class="string">@&quot;kimi&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2017-04-21 14:47:02.077  kStr1内存地址： 0x109ddd0e0=FirstViewController</span><br><span class="line">2017-04-21 14:47:02.078  kStr2内存地址： 0x109dde408=FirstViewController</span><br><span class="line">2017-04-21 14:47:02.079  kStr3内存地址： 0x109dde410=FirstViewController</span><br><span class="line">2017-04-21 14:47:02.079  kStr4内存地址： 0x109ddd0d0=FirstViewController</span><br><span class="line">2017-04-21 14:47:02.080  kStr5内存地址： 0x109ddd0d8=FirstViewController</span><br><span class="line"></span><br><span class="line">2017-04-21 14:47:27.747  kStr1内存地址： 0x109ddd080=SecViewController</span><br><span class="line">2017-04-21 14:47:27.748  kStr2内存地址： 0x109dde320=SecViewController</span><br><span class="line">2017-04-21 14:47:27.748  kStr3内存地址： 0x109dde328=SecViewController</span><br><span class="line">2017-04-21 14:47:27.748  kStr4内存地址： 0x109ddd0d0=SecViewController</span><br><span class="line">2017-04-21 14:47:27.749  kStr5内存地址： 0x109ddd0d8=SecViewController</span><br><span class="line"></span><br><span class="line">2017-04-21 14:47:51.019  kStr1内存地址： 0x109ddd088=TestViewController</span><br><span class="line">2017-04-21 14:47:51.019  kStr2内存地址： 0x109dde3f0=TestViewController</span><br><span class="line">2017-04-21 14:47:51.020  kStr3内存地址： 0x109dde3f8=TestViewController</span><br><span class="line">2017-04-21 14:47:51.020  kStr4内存地址： 0x109ddd0d0=TestViewController</span><br><span class="line">2017-04-21 14:47:51.020  kStr5内存地址： 0x109ddd0d8=TestViewController</span><br></pre></td></tr></table></figure><p>结论：使用<code>static NSString *const xxx  = @&quot;xxx&quot;</code>; 申明的静态全局常量，经过测试页面消失进入，相同Controller打印的内存地址相同，在不同Controller中内存地址不同，表明如果在不同文件中使用会占据多个内存空间，而使用 <code>extern NSString *const xxxx</code> 申明的全局静态变量，在不同文件中的内存地址都是相同的，表面只开辟一个内存空间。</p><p>所以，全局常量正规写法:开发中便于管理所有的全局变量，通常创建GlobeConst文件，里面专门定义全局变量，统一管理。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GlobeConst.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> KNameKey = <span class="string">@&quot;kimi&quot;</span>;</span><br><span class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> *<span class="keyword">const</span> MyFirstConstant;</span><br><span class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> *<span class="keyword">const</span> MySecondConstant;</span><br><span class="line"><span class="comment">//etc.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GlobeConst.m</span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span>    KNameKey = <span class="string">@&quot;kimi&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> MyFirstConstant = <span class="string">@&quot;FirstConstant&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> MySecondConstant = <span class="string">@&quot;SecondConstant&quot;</span>;</span><br></pre></td></tr></table></figure><p>当然由于开发中常用数据类型所占字节很小，所以使用<code>static NSString *const xxx  = @&quot;xxx&quot;</code>来申明全局常量问题也不大，可以不在GlobeConst.m中添加代码，相对方便。</p><p>使用字符串常量代替 <code>#define</code>宏定义会常数是可以使用指针比较相等性测试 (<code>stringInstance == MyFirstConstant</code>) 这比字符串比较快得多 (<code>[stringInstance isEqualToString:MyFirstConstant]</code>)</p><p>传送门：<a href="http://huluo666.cn/2016/05/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F/">常用数据类型对应字节数</a></p><h5 id="其它全局常量的一些写法"><a href="#其它全局常量的一些写法" class="headerlink" title="其它全局常量的一些写法"></a>其它全局常量的一些写法</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in the header</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> MANotifyingArrayNotificationsStruct</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *didAddObject;</span><br><span class="line">    <span class="built_in">NSString</span> *didChangeObject;</span><br><span class="line">    <span class="built_in">NSString</span> *didRemoveObject;</span><br><span class="line">&#125; MANotifyingArrayNotifications;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in the implementation</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">struct</span> MANotifyingArrayNotificationsStruct MANotifyingArrayNotifications = &#123;</span><br><span class="line">    .didAddObject = <span class="string">@&quot;didAddObject&quot;</span>,</span><br><span class="line">    .didChangeObject = <span class="string">@&quot;didChangeObject&quot;</span>,</span><br><span class="line">    .didRemoveObject = <span class="string">@&quot;didRemoveObject&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,MANotifyingArrayNotifications.didAddObject);</span><br></pre></td></tr></table></figure><p>定义UIKit常量注意将.m文件改成.mm</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">UIColor</span> *)paleYellowColor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">UIColor</span>* paleYellow = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (paleYellow == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        paleYellow = [<span class="built_in">UIColor</span> colorWithHueDegrees:<span class="number">60</span> saturation:<span class="number">0.2</span> brightness:<span class="number">1.0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paleYellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.h文件</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">UIColor</span> *  <span class="keyword">const</span> COLOR_LIGHT_BLUE;</span><br><span class="line"></span><br><span class="line">.mm文件</span><br><span class="line"><span class="built_in">UIColor</span>* <span class="keyword">const</span> COLOR_LIGHT_BLUE = [[<span class="built_in">UIColor</span> alloc] initWithRed:<span class="number">21.0</span>f/<span class="number">255</span> green:<span class="number">180.0</span>f/<span class="number">255</span>  blue:<span class="number">1</span> alpha:<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>使用单例保存全局变量</p><p><a href="http://zhangbuhuai.com/initialize-and-load-in-objectivec/">+initialize和+load</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS常数的定义</title>
      <link href="/2017/04/20/iOS%E5%B8%B8%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
      <url>/2017/04/20/iOS%E5%B8%B8%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>在开发中很多人喜欢使用宏定义，但宏定义也有很多缺点。</p><p>下面看stackoverflow达人们如果解决常量问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct CGSize &#123;</span><br><span class="line">   CGFloat width;</span><br><span class="line">   CGFloat height;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct CGSize CGSize;</span><br></pre></td></tr></table></figure><p><strong>Fields</strong> width A width value. height A height value.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const CGSize CGSizeZero;</span><br></pre></td></tr></table></figure><p>e.g</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const CGSize pageSize = &#123;320, 480&#125;;</span><br></pre></td></tr></table></figure><p>各种方法，很有意思</p><p><a href="http://stackoverflow.com/questions/538996/constants-in-objectivec">http://stackoverflow.com/questions/538996/constants-in-objectivec</a></p><p><a href="http://stackoverflow.com/questions/26252233/global-constants-file-in-swift">http://stackoverflow.com/questions/26252233/global-constants-file-in-swift</a></p><p><a href="http://stackoverflow.com/questions/10312874/objectivec-how-to-group-a-series-of-string-constants">how to group a series of string constants?</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS页面横竖屏自由切换适配</title>
      <link href="/2017/04/20/iOS%E9%A1%B5%E9%9D%A2%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%87%E6%8D%A2/"/>
      <url>/2017/04/20/iOS%E9%A1%B5%E9%9D%A2%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>横竖屏控制加入以下3个函数即可</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark--禁止横屏</span></span><br><span class="line">- (<span class="type">BOOL</span>)shouldAutorotateToInterfaceOrientation:(<span class="built_in">UIInterfaceOrientation</span>)toInterfaceOrientation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (toInterfaceOrientation == <span class="built_in">UIInterfaceOrientationPortrait</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)shouldAutorotate &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;<span class="comment">//是否允许旋转</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;</span><br><span class="line">    <span class="comment">//只支持这一个方向(正常的方向)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法可以实现，需要在根视图（nav，tabbar）和vc里重写</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果在<span class="built_in">UIViewController</span>上，则在<span class="built_in">UIViewController</span>对应的.m文件中加入三个函数即可。</span><br><span class="line">如果在<span class="built_in">UITabBarController</span>上，则在<span class="built_in">UITabBarController</span>对应的.m文件中加入三个函数即可。</span><br><span class="line">如果在<span class="built_in">UINavigationController</span>上，则在<span class="built_in">UINavigationController</span>对应的.m文件中加入三个函数即可。</span><br></pre></td></tr></table></figure><p>页面基于UITabBarController使用自定义UITabBarController中加入</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - - orientation</span></span><br><span class="line"><span class="comment">// 是否支持转屏</span></span><br><span class="line">- (<span class="type">BOOL</span>)shouldAutorotate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.selectedViewController shouldAutorotate];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回nav栈中的最后一个对象支持的旋转方向</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.selectedViewController supportedInterfaceOrientations];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回nav栈中最后一个对象,坚持旋转的方向</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.selectedViewController preferredInterfaceOrientationForPresentation];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于UINavigationController代码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//旋转方向 默认竖屏</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> , <span class="keyword">assign</span>) <span class="built_in">UIInterfaceOrientation</span> interfaceOrientation;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> , <span class="keyword">assign</span>) <span class="built_in">UIInterfaceOrientationMask</span> interfaceOrientationMask;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - - orientation</span></span><br><span class="line"><span class="comment">//设置是否允许自动旋转</span></span><br><span class="line">- (<span class="type">BOOL</span>)shouldAutorotate &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置支持的屏幕旋转方向</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientationMask</span>)supportedInterfaceOrientations &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>.interfaceOrientationMask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置presentation方式展示的屏幕方向</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>.interfaceOrientation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)viewWillAppear:(<span class="type">BOOL</span>)animated</span><br><span class="line">  &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewWillAppear:animated];</span><br><span class="line">    <span class="comment">//强制旋转竖屏</span></span><br><span class="line">    navi.interfaceOrientation =   <span class="built_in">UIInterfaceOrientationLandscapeRight</span>;</span><br><span class="line">    navi.interfaceOrientationMask = <span class="built_in">UIInterfaceOrientationMaskLandscapeRight</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//强制翻转屏幕，Home键在右边。</span></span><br><span class="line">    [[<span class="built_in">UIDevice</span> currentDevice] setValue:@(<span class="built_in">UIInterfaceOrientationLandscapeRight</span>) forKey:<span class="string">@&quot;orientation&quot;</span>];</span><br><span class="line">    <span class="comment">//刷新</span></span><br><span class="line">    [<span class="built_in">UIViewController</span> attemptRotationToDeviceOrientation];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.部分页面需要全屏,其他页面禁止横屏</p><p>在appdelegate.h添加以下属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/***  是否允许横屏的标记 */</span><br><span class="line">@property (nonatomic,assign)BOOL allowRotation;</span><br></pre></td></tr></table></figure><p>appdelegate.m添加如下代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)addNotificationCenter</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在进入需要全屏的界面里面发送需要全屏的通知</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(startFullScreen) name:<span class="string">@&quot;startFullScreen&quot;</span> object:<span class="literal">nil</span>];<span class="comment">//进入全屏</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在退出需要全屏的界面里面发送退出全屏的通知</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(endFullScreen) name:<span class="string">@&quot;endFullScreen&quot;</span> object:<span class="literal">nil</span>];<span class="comment">//退出全屏</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark 进入全屏</span></span><br><span class="line">-(<span class="type">void</span>)startFullScreen</span><br><span class="line">&#123;</span><br><span class="line">    AppDelegate *appDelegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">    appDelegate.allowRotation = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark    退出横屏</span></span><br><span class="line">-(<span class="type">void</span>)endFullScreen</span><br><span class="line">&#123;</span><br><span class="line">    AppDelegate *appDelegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">    appDelegate.allowRotation = <span class="literal">NO</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制归正：</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice]   respondsToSelector:<span class="keyword">@selector</span>(setOrientation:)]) &#123;</span><br><span class="line">        SEL selector =     <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;setOrientation:&quot;</span>);</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:[<span class="built_in">UIDevice</span> instanceMethodSignatureForSelector:selector]];</span><br><span class="line">        [invocation setSelector:selector];</span><br><span class="line">        [invocation setTarget:[<span class="built_in">UIDevice</span> currentDevice]];</span><br><span class="line">        <span class="type">int</span> val =<span class="built_in">UIInterfaceOrientationPortrait</span>;</span><br><span class="line">        [invocation setArgument:&amp;val atIndex:<span class="number">2</span>];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark    禁止横屏</span></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientationMask</span> )application:(<span class="built_in">UIApplication</span> *)application supportedInterfaceOrientationsForWindow:(<span class="built_in">UIWindow</span> *)window</span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//如果设置了allowRotation属性，支持全屏</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.allowRotation) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskAll</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;<span class="comment">//默认全局不支持横屏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面通过通知修改allowRotation属性来控制横竖屏幕</p><p>当然也可以通过AppDelegate单例直接修改allowRotation以控制横竖屏</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> AppDelegate *appDelegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">appDelegate.allowRotation = <span class="literal">YES</span>;<span class="comment">//yes支持横屏，No-不支持</span></span><br></pre></td></tr></table></figure><p>在<code>viewWillAppear</code>和<code>viewWillDisappear</code>分别调用以上方法，在该控制器下即可顺利支持全屏。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发SQL使用</title>
      <link href="/2017/04/13/iOS%E5%BC%80%E5%8F%91SQL%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/04/13/iOS%E5%BC%80%E5%8F%91SQL%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在ios项目中使用sqlite需要添加 <code>libsqlite3.dylib</code>库</p><p><strong>SQL语句的特点</strong></p><blockquote><p>不区分大小写（比如数据库认为insert和InSerT是一样的）<br>每条语句都必须以分号 “ ; ” 结尾。</p></blockquote><p><strong>SQL中常用关键字</strong></p><blockquote><p>select、insert、update、delete、from、create、where、desc、order、by、group、table、alter、view、index等</p><p>注意:数据库中不可以使用关键字来命名表、字段</p><p>SQL 语句中除过 <code>SELECT</code> 语句都可以称之为更新操作。包括 <code>CREATE</code>，<code>UPDATE</code>，<code>INSERT</code>，<code>ALTER</code>，<code>COMMIT</code>，<code>BEGIN</code>，<code>DETACH</code>，<code>DROP</code>，<code>END</code>，<code>EXPLAIN</code>，<code>VACUUM</code>，<code>REPLACE</code> 等。一般只要不是以 <code>SELECT</code> 开头的 SQL 语句，都是更新语句。</p></blockquote><p><strong>二、SQL语句的种类</strong></p><blockquote><p>1.<strong>数据定义语句</strong>（DDL：Data Definition Language）</p><p>包括create和drop等操作</p><p>在数据库中创建新表或删除表（create table或 drop table）</p><p>2**.数据操作语句**（DML：Data Manipulation Language）</p><p>包括insert、update、delete等操作</p><p>上面的3种操作分别用于添加、修改、删除表中的数据</p><p>3**.数据查询语句**（DQL：Data Query Language）</p><p>可以用于查询获得表中的数据</p><p>关键字select是DQL（也是所有SQL）用得最多的操作</p><p>其他DQL常用的关键字有where，order by，group by和having</p></blockquote><h3 id="一、创建（删除）表"><a href="#一、创建（删除）表" class="headerlink" title="一、创建（删除）表"></a>一、创建（删除）表</h3><h4 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h4><blockquote><ul><li><p>create table 表名 (字段名1 字段类型1, 字段名2 字段类型2, …) ;</p></li><li><p>create table if not exists 表名 (字段名1 字段类型1, 字段名2 字段类型2, …) ;</p></li></ul></blockquote><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table t_student (id integer, name text, age inetger, score real)</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS     -- 创建表</span><br><span class="line">t_student (   -- 表的名称t_student</span><br><span class="line">-- <span class="type">id</span>主键 默认地AUTO_INCREMENT 的开始值是 <span class="number">1</span>，每条新记录递增 <span class="number">1</span>。</span><br><span class="line"><span class="type">id</span> INTEGER NOT <span class="literal">NULL</span> PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">name TEXT,   -- 字段类型</span><br><span class="line">age INTEGER,</span><br><span class="line">score REAL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>创建新表(create table)    删除表(drop table)</p></li><li><p>注意事项：</p><ul><li><p>1、创建表格时, 最好加个表格是否已经存在的判断, 这个防止语句多次执行时发生错误。</p><p><code>if not exists</code>: 判断表不存在时才创建表.。</p></li><li><p>2、SQL不区分大小写,编写SQL规范,最好关键字都使用大写.表名最好加上<code>t_</code>前缀。</p></li><li><p>3、<code>PRIMARY KEY</code>: 约束为主键。</p></li><li><p>4、<code>AUTOINCREMENT</code>: 自动递增。</p></li></ul></li></ul><p>创建表推荐写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS t_student (id integer PRIMARY KEY AUTOINCREMENT, name text, age integer, score integer);</span><br></pre></td></tr></table></figure><h4 id="2、删除表"><a href="#2、删除表" class="headerlink" title="2、删除表"></a>2、删除表</h4><blockquote><p>格式: <code>DROP TABLE IF EXISTS 表名;</code></p></blockquote><p>删除表示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS t_student;</span><br></pre></td></tr></table></figure><h4 id="3、修改表-重命名表"><a href="#3、修改表-重命名表" class="headerlink" title="3、修改表(重命名表)"></a>3、修改表(重命名表)</h4><blockquote><p>格式: <code>ALTER TABLE 旧表名 RENAME TO 新表名;</code></p></blockquote><p>重命名表示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_student RENAME TO t_person;</span><br></pre></td></tr></table></figure><h4 id="4、数据表添加字段"><a href="#4、数据表添加字段" class="headerlink" title="4、数据表添加字段"></a>4、数据表添加字段</h4><blockquote><p>格式: <code>ALTER TABLE 表名 ADD COLUMN 字段名 数据类型 限定符</code></p></blockquote><p>数据表添加字段示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_student ADD COLUMN address text;</span><br></pre></td></tr></table></figure><p>SQLite数据类型类型</p><blockquote><p><strong>SQLite将数据划分为以下几种存储类型：</strong><br>integer : 整型值<br>real : 浮点值<br>text : 文本字符串<br>blob : 二进制数据（比如文件）</p></blockquote><p>实际上SQLite是无类型的<br>就算声明为integer类型，还是能存储字符串文本（主键除外）<br>建表时声明啥类型或者不声明类型都可以，也就意味着创表语句可以这么写：<br>create table t_student(name, age); 为了保持良好的编程规范，编写建表语句的时候最好加上每个字段的具体类型</p><h3 id="二、DML数据库操作操作-增删改"><a href="#二、DML数据库操作操作-增删改" class="headerlink" title="二、DML数据库操作操作(增删改)"></a>二、DML数据库操作操作(增删改)</h3><h3 id="1、增"><a href="#1、增" class="headerlink" title="1、增"></a>1、增</h3><p>插入数据（insert）</p><blockquote><p>格式： insert into 表名 (字段1, 字段2, …) values (字段1的值, 字段2的值, …) ;</p></blockquote><p>SQL插入数据示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into t_student (name, age) values (‘mj’, 10) ;</span><br><span class="line">INSERT INTO t_student (name, age, height) VALUES (&#x27;zhangsan&#x27;, 20, 1.78);</span><br></pre></td></tr></table></figure><ul><li><p>注意：数据库中的字符串内容应该用单引号 ’ 括住</p></li><li><p>1.字段和值一定要对应，否则也会添加错误的数据进表里</p><p> 2.TEXT类型需要添加引号’’</p></li></ul><h3 id="2、删"><a href="#2、删" class="headerlink" title="2、删"></a>2、删</h3><blockquote><p>格式: delete from 表名 ;</p><p>格式: delete from 表名 where 条件;</p></blockquote><p>删除表示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delete from t_student ;</span><br><span class="line">/*</span><br><span class="line">DML删除数据</span><br><span class="line">DELETE-- 删除数据</span><br><span class="line">FROM-- 从哪张表中删除数据</span><br><span class="line">WHERE-- 条件</span><br><span class="line"> */</span><br><span class="line">DELETE FROM t_student WHERE id = 1;</span><br></pre></td></tr></table></figure><h3 id="3、改"><a href="#3、改" class="headerlink" title="3、改"></a>3、改</h3><p>更新数据（update）</p><blockquote><p>格式: update 表名 set 字段1 &#x3D; 字段1的值, 字段2 &#x3D; 字段2的值, … ;</p></blockquote><p>SQL更新数据示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">DML更新数据</span><br><span class="line">UPDATE-- 更新数据</span><br><span class="line">t_student-- 需要更新数据的表</span><br><span class="line">SET-- 更新哪个字段</span><br><span class="line">name = &#x27;liudehua&#x27;-- 更新字段的值</span><br><span class="line">WHERE-- 条件</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"> 1.如果不指定条件会更新所有数据</span><br><span class="line"> */</span><br><span class="line">update t_student set name = ‘jack’, age = 20 ;</span><br><span class="line">更新一个字段</span><br><span class="line">update t_person set name = &#x27;xiaofang&#x27; where name = &#x27;wangwu&#x27;;</span><br><span class="line">更新多个字段，每个字段之间使用,分隔</span><br><span class="line">update t_person set age = 20, height = 2.0 where name = &#x27;xiaofang&#x27;;</span><br></pre></td></tr></table></figure><h3 id="三、DQL数据库查询语句-查询"><a href="#三、DQL数据库查询语句-查询" class="headerlink" title="三、DQL数据库查询语句(查询)"></a>三、DQL数据库查询语句(查询)</h3><p>查询数据（select）</p><ul><li>1.查询数据格式</li></ul><blockquote><p>格式1: <code>select * from 表名;</code>, <code>*</code>:通配符,表示所有字段.<br>格式2: <code>select 字段1, 字段2, … from 表名;</code><br>格式3: <code>select 字段1, 字段2, … from 表名 where 条件;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">DQL查询数据</span><br><span class="line">SELECT-- 查询</span><br><span class="line">name, age-- 查询的字段</span><br><span class="line">FROM-- 从哪张表中查询</span><br><span class="line">    t_student   -- 查询的表名</span><br><span class="line"> */</span><br><span class="line">-- 查询所有字段</span><br><span class="line">SELECT * FROM t_student;</span><br><span class="line">-- 查询指定字段</span><br><span class="line">SELECT name, age FROM t_student;</span><br><span class="line">-- 查询 age &lt; 22 的记录的name, age字段</span><br><span class="line">SELECT name, age FROM t_student WHERE age &lt; 22;</span><br><span class="line"></span><br><span class="line">-- 查询 age &lt; 22 的所有字段</span><br><span class="line">SELECT * FROM t_student WHERE age &lt; 22;</span><br><span class="line"></span><br><span class="line">-- 查询记录总数</span><br><span class="line">SELECT COUNT(*) FROM t_student;</span><br><span class="line"></span><br><span class="line">-- 查询 age &lt; 22 的记录总数</span><br><span class="line">SELECT COUNT(*) FROM t_student WHERE age &lt; 22;</span><br><span class="line"></span><br><span class="line">-- 查询最大的 age</span><br><span class="line">SELECT MAX(age) FROM t_student;</span><br><span class="line"></span><br><span class="line">-- 查询最小的 age</span><br><span class="line">SELECT MIN(age) FROM t_student;</span><br><span class="line"></span><br><span class="line">-- 查询所有记录的所有字段，根据 age 升序排序</span><br><span class="line">SELECT * FROM t_student ORDER BY age;</span><br><span class="line"></span><br><span class="line">-- 查询所有记录的所有字段， 根据 age 降序排序</span><br><span class="line">SELECT * FROM t_student ORDER BY age DESC;</span><br><span class="line"></span><br><span class="line">-- 使用多个字段排序，先按age降序排序，当age相同再根据height降序排序</span><br><span class="line">SELECT * FROM t_student ORDER BY age DESC,height DESC;</span><br><span class="line"></span><br><span class="line">-- 返回指定的记录</span><br><span class="line">-- LIMIT常用于分页</span><br><span class="line">-- 0 表示跳过的3条</span><br><span class="line">-- 2 表示获取2条</span><br><span class="line">SELECT * FROM t_student LIMIT 3, 2;</span><br><span class="line"></span><br><span class="line">-- 取出年龄最大的3条记录</span><br><span class="line">SELECT * FROM t_student ORDER BY age DESC LIMIT 3;</span><br><span class="line"></span><br><span class="line">-- 查询是给字段取别名</span><br><span class="line">SELECT name AS JP_name, age AS JF_age, height AS JF_height FROM t_student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">从数据库查出名字叫做wangwu的记录</span><br><span class="line">select * from t_student where name = &#x27;wangwu&#x27;;</span><br><span class="line">从数据库查出名字以wang开头的记录</span><br><span class="line">select * from t_student where name like &#x27;wangwu%&#x27;;</span><br><span class="line">从数据库查出名字中包含a的记录，通常用于模糊查询，建议不要搞太多字段组合模糊查询，那样性能会非常差！</span><br><span class="line">select * from t_student where name like &#x27;%a%&#x27;;</span><br></pre></td></tr></table></figure><p>排序查询</p><blockquote><p>1、ASC 升序（默认的排序方法） 2、DESC 降序</p><p>格式: <code>SELECT 字段1(或*) FROM 表名 ORDER BY 要排序的字段名 ASC;</code></p><p>格式: <code>SELECT 字段1(或*) FROM 表名 ORDER BY 要排序的字段名 DESC;</code></p><p>格式: <code>SELECT * FROM 表名 ORDER BY 字段名1 排序类型, 字段名2 排序类型;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">●  select * from t_student order by age desc ; //降序</span><br><span class="line">●  select * from t_student order by age asc ; // 升序(默认)</span><br><span class="line">用多个字段进行排序,由左至右排序的优先级依次降低，也就是第一个排序列的优先级是最高的</span><br><span class="line">●  select * from t_student order by age asc, height desc ;</span><br><span class="line">先按照年龄排序(升序),年龄相等就按照身高排序(降序)</span><br></pre></td></tr></table></figure><p>limit分页查询</p><blockquote><p>格式: <code>select * from 表名 limit 数值1, 数值2 ;</code></p></blockquote><p>●  使用limit可以精确地控制查询结果的数量,比如每次只查询10条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student limit 4, 8 ;// 可以理解为:跳过最前面4条语句,然后取8条记录</span><br><span class="line">SELECT * FROM t_student LIMIT 5*(n-1), 5;//一页显示5条数据,查询第n页的数据</span><br></pre></td></tr></table></figure><p>对数据进行统计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">取出所有数据的总数目</span><br><span class="line">select count(*) from t_student;</span><br><span class="line">统计符合条件的记录条数</span><br><span class="line">select count(*) from t_student where name like &#x27;wang%&#x27;;</span><br><span class="line">选择指定列的最大值</span><br><span class="line">select max(age) from t_student;</span><br><span class="line">选择指定列的最小值</span><br><span class="line">select min(age) from t_student;</span><br><span class="line">计算指定列的平均值</span><br><span class="line">select avg(age) from t_student;</span><br><span class="line">计算指定列数值的总数</span><br><span class="line">select sum(age) from t_student;</span><br></pre></td></tr></table></figure><p><strong>四、约束</strong></p><p>1、简单约束</p><blockquote><p>建表时可以给特定的字段设置一些约束条件，常见的约束有</p><p><code>not null</code> ：规定字段的值不能为null</p><p><code>unique</code> ：规定字段的值必须唯一</p><p><code>default</code> ：指定字段的默认值</p><p>（建议：尽量给字段设定严格的约束，以保证数据的规范性）</p><p>示例</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table t_student (id integer, name text not null unique, age integer not null default 1) ;</span><br><span class="line">//name字段不能为null，并且唯一</span><br><span class="line">//age字段不能为null，并且默认为1</span><br></pre></td></tr></table></figure><p>说明：如果想要让主键自动增长（必须是integer类型），应该增加autoincrement</p><p>2、主键 primary key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  // integer类型的id作为t_student表的主键</span><br><span class="line">   create table t_student (id integer primary key,name text,age integer);</span><br><span class="line">/*</span><br><span class="line">    主键字段：只要声明为primary key，就说明是一个主键字段</span><br><span class="line">    主键字段默认就包含了not null 和 unique 两个约束</span><br><span class="line">    如果想要让主键自动增长（必须是integer类型），应该增加autoincrement</span><br><span class="line">*/</span><br><span class="line">    create table t_student (id integer primary key autoincrement,name text,age integer);</span><br></pre></td></tr></table></figure><p><strong>SQL语句的基本使用</strong></p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li>1.条件语句的常见格式</li></ul><blockquote><p>where 字段 &#x3D; 某个值 ; &#x2F;&#x2F; 不能用两个 &#x3D;<br>where 字段 is 某个值 ; &#x2F;&#x2F; is 相当于 &#x3D;<br>where 字段 !&#x3D; 某个值 ;<br>where 字段 is not 某个值 ; &#x2F;&#x2F; is not 相当于 !&#x3D;<br>where 字段 &gt; 某个值 ;<br>where 字段1 &#x3D; 某个值 and 字段2 &gt; 某个值 ; &#x2F;&#x2F; and相当于C语言中的 &amp;&amp;<br>where 字段1 &#x3D; 某个值 or 字段2 &#x3D; 某个值 ; &#x2F;&#x2F; or 相当于C语言中的 ||</p></blockquote><p>iOS 更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char *update = &quot;INSERT OR REPLACE INTO PERSIONINFO(NAME,AGE,SEX,WEIGHT,ADDRESS)&quot;&quot;VALUES(?,?,?,?,?);&quot;;</span><br><span class="line">//上边的update也可以这样写：</span><br><span class="line">//NSString *insert = [NSString stringWithFormat:@&quot;INSERT OR REPLACE INTO PERSIONINFO(&#x27;%@&#x27;,&#x27;%@&#x27;,&#x27;%@&#x27;,&#x27;%@&#x27;,&#x27;%@&#x27;)VALUES(?,?,?,?,?)&quot;,NAME,AGE,SEX,WEIGHT,ADDRESS];</span><br></pre></td></tr></table></figure><h4 id="FMDB的使用"><a href="#FMDB的使用" class="headerlink" title="FMDB的使用"></a>FMDB的使用</h4><p>Github：<a href="https://github.com/ccgus/fmdb">https://github.com/ccgus/fmdb</a></p><p>FMDB是iOS平台的SQLite数据库框架，以OC的方式封装了SQLite的C语言API。</p><p>优点：</p><p>使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码</p><p>提供了多线程安全的数据库操作方法，有效地防止数据混乱</p><p>相关文章</p><p><a href="http://www.runoob.com/sqlite/sqlite-create-table.html">runoob SQLite 教程</a></p><p><a href="http://www.w3school.com.cn/sql/index.asp">w3school SQL 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 11 和 iPhone X 适配问题集锦</title>
      <link href="/2017/04/13/iOS%2011%20%E5%92%8C%20iPhone%20X%20%E9%80%82%E9%85%8D/"/>
      <url>/2017/04/13/iOS%2011%20%E5%92%8C%20iPhone%20X%20%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="http://cdn2.jianshu.io/p/f2032e8fe56e">iOS 11 和 iPhone X 适配问题集锦</a><br><a href="http://wetest.qq.com/lab/view/337.html">http://wetest.qq.com/lab/view/337.html</a><br><a href="http://www.jianshu.com/p/f5ee206c7df0">http://www.jianshu.com/p/f5ee206c7df0</a><br><a href="https://developer.apple.com/cn/ios/update-apps-for-iphone-x/">https://developer.apple.com/cn/ios/update-apps-for-iphone-x/</a><br><a href="http://cdn2.jianshu.io/p/17d522b4153d">http://cdn2.jianshu.io/p/17d522b4153d</a><br><a href="http://www.cocoachina.com/ios/20171016/20800.html">http://www.cocoachina.com/ios/20171016/20800.html</a><br><a href="http://www.jianshu.com/p/352f101d6df1">http://www.jianshu.com/p/352f101d6df1</a><br><a href="http://www.cnblogs.com/pengsi/p/7765279.html">http://www.cnblogs.com/pengsi/p/7765279.html</a><br>iPhone X屏幕分辨率&#x3D;1125x2436<br>屏幕高度&#x3D;(1125x2436)&#x2F;@3x&#x3D;375x812;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#define ScreenWidth [[UIScreen mainScreen] bounds].size.width</span><br><span class="line">#define ScreenHeight [[UIScreen mainScreen] bounds].size.height</span><br><span class="line">#define Is_Iphone (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)</span><br><span class="line">#define Is_Iphone_X (Is_Iphone &amp;&amp; ScreenHeight == 812.0)</span><br><span class="line">#define NaviHeight Is_Iphone_X ? 88 : 64</span><br><span class="line">#define TabbarHeight Is_Iphone_X ? 83 : 49</span><br><span class="line">#define BottomHeight Is_Iphone_X ? 34 : 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 判断是否是iPhone X</span><br><span class="line">#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class="line">// 状态栏高度</span><br><span class="line">#define STATUS_BAR_HEIGHT (iPhoneX ? 44.f : 20.f)</span><br><span class="line">// 导航栏高度</span><br><span class="line">#define NAVIGATION_BAR_HEIGHT (iPhoneX ? 88.f : 64.f)</span><br><span class="line">// tabBar高度</span><br><span class="line">#define TAB_BAR_HEIGHT (iPhoneX ? (49.f+34.f) : 49.f)</span><br><span class="line">// home indicator</span><br><span class="line">#define HOME_INDICATOR_HEIGHT (iPhoneX ? 34.f : 0.f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 状态栏(statusbar)</span><br><span class="line">#define STATUSBAR_HEIGHT ([[UIApplication sharedApplication] statusBarFrame].size.height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGRect StatusRect = [[UIApplication sharedApplication] statusBarFrame];</span><br><span class="line"></span><br><span class="line">//标题栏</span><br><span class="line"></span><br><span class="line">CGRect NavRect = self.navigationController.navigationBar.frame;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">      make.top.equalTo(self.view.mas_top).with.offset(NaviHeight);</span><br><span class="line">      make.bottom.equalTo(self.view.mas_bottom).with.offset(-(BottomHeight));</span><br><span class="line">      make.left.right.equalTo(self.view);</span><br><span class="line">  &#125;];</span><br><span class="line">//有tabbar就用TabbarHeight，没有就用BottomHeight</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2017/04/13/iOS%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E6%B1%87%E6%80%BB/"/>
      <url>/2017/04/13/iOS%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>1、计算UIScrollView页码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - UIScrollView delegat</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)currentPageWithScrollView:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line">    <span class="comment">// 得到每页宽度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> pageWidth = scrollView.frame.size.width;</span><br><span class="line">    <span class="comment">// 根据当前的x坐标和页宽度计算出当前页数</span></span><br><span class="line">    <span class="built_in">NSInteger</span> currentPage = floor((scrollView.contentOffset.x - pageWidth/ <span class="number">2</span>) / pageWidth)+ <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> currentPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line">   <span class="built_in">NSInteger</span> currentPage = [<span class="keyword">self</span> currentPageWithScrollView:scrollView];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;:%zd&quot;</span>,currentPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、计算列表数据分页</p><p>总数条数：<code>totalRecord</code><br>每页最大条数：<code>pageSize</code></p><p><strong>算法一:</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span>  totalPage = totalRecord % pageSize == <span class="number">0</span> ? totalRecord / pageSize : totalRecord / pageSize + <span class="number">1</span> ;</span><br></pre></td></tr></table></figure><p><strong>算法二：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span>  totalPage = (totalRecord + pageSize <span class="number">-1</span>) / pageSize;</span><br><span class="line"><span class="comment">//其中 pageSize - 1 就是 totalRecord / pageSize 的最大的余数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 高斯模糊</title>
      <link href="/2017/04/13/iOS%20%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/"/>
      <url>/2017/04/13/iOS%20%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</url>
      
        <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="built_in">CIContext</span> *context = [<span class="built_in">CIContext</span> contextWithOptions:<span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">CIImage</span> *ciImage = [<span class="built_in">CIImage</span> imageWithCGImage:image.CGImage];</span><br><span class="line">        <span class="built_in">CIFilter</span> *filter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@&quot;CIGaussianBlur&quot;</span>];</span><br><span class="line">        [filter setValue:ciImage forKey:kCIInputImageKey];</span><br><span class="line">        <span class="comment">//设置模糊程度</span></span><br><span class="line">        [filter setValue:@<span class="number">30.0</span>f forKey: <span class="string">@&quot;inputRadius&quot;</span>];</span><br><span class="line">        <span class="built_in">CIImage</span> *result = [filter valueForKey:kCIOutputImageKey];</span><br><span class="line">        <span class="built_in">CGRect</span> frame = [ciImage extent];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%f,%f,%f,%f&quot;</span>,frame.origin.x,frame.origin.y,frame.size.width,frame.size.height);</span><br><span class="line">        <span class="built_in">CGImageRef</span> outImage = [context createCGImage: result fromRect:ciImage.extent];</span><br><span class="line">        <span class="built_in">UIImage</span> * blurImage = [<span class="built_in">UIImage</span> imageWithCGImage:outImage];</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            coreImgv.image = blurImage;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/341a06dd0b46">http://www.jianshu.com/p/341a06dd0b46</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mock2easy的使用</title>
      <link href="/2017/04/11/mock2easy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/04/11/mock2easy%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>​开发时一直使用node.js来模拟API，都是手写js进行接口模拟，一直有个想法可以在网页上进行操作，鼠标简单点几下就模拟一个API,奈何对html，css等不是很熟悉，而mock2easy是非常方便的可视化模拟API工具。</p><p><a href="https://www.npmjs.com/package/mock2easy">https://www.npmjs.com/package/mock2easy</a></p><p>该项目作者也是来自阿里的开发人员，和淘宝RAP功能类似，相比淘宝rap比较卡，mock2easy更适合个人模拟开发测试。</p><h4 id="1、安装-Grunt-cli"><a href="#1、安装-Grunt-cli" class="headerlink" title="1、安装 Grunt-cli"></a>1、安装 <code>Grunt-cli</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g grunt-cli <span class="comment">#全局安装</span></span></span><br></pre></td></tr></table></figure><h4 id="2、生成-package-json-文件"><a href="#2、生成-package-json-文件" class="headerlink" title="2、生成 package.json 文件"></a>2、生成 package.json 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init <span class="comment">#输入name后可以一直回车</span></span></span><br></pre></td></tr></table></figure><h4 id="3、安装mock2easy依赖插件"><a href="#3、安装mock2easy依赖插件" class="headerlink" title="3、安装mock2easy依赖插件"></a>3、安装mock2easy依赖插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev grunt connect-livereload grunt-contrib-connect grunt-contrib-watch grunt-mock2easy </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm install  --save-dev 插件1 插件2 插件3</span></span><br></pre></td></tr></table></figure><p>官网demo很久没更新了，比如mock.js旧版很多方法没有，所以插件建议安装最新版。</p><h4 id="4、编辑Gruntfile-js文件"><a href="#4、编辑Gruntfile-js文件" class="headerlink" title="4、编辑Gruntfile.js文件"></a>4、编辑Gruntfile.js文件</h4><p>在<code>package.json</code>的同级目录新建Gruntfile.js文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">var serveStatic = require(&#x27;serve-static&#x27;);</span><br><span class="line">module.exports = function (grunt) &#123;</span><br><span class="line">  // Project configuration.</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(&#x27;package.json&#x27;),</span><br><span class="line">    watch: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        livereload: true</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    connect: &#123;</span><br><span class="line">      debug: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          port: 3000,</span><br><span class="line">          hostname: &#x27;localhost&#x27;,</span><br><span class="line">          middleware: function (connect) &#123;</span><br><span class="line">            return [</span><br><span class="line">              serveStatic(&#x27;app&#x27;),</span><br><span class="line">              require(&#x27;./database/do&#x27;)</span><br><span class="line">            ];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mock2easy: &#123;</span><br><span class="line">      dev:&#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          port:4000,</span><br><span class="line">          lazyLoadTime:3000,</span><br><span class="line">          database:&#x27;database&#x27;,</span><br><span class="line">          doc:&#x27;doc&#x27;,</span><br><span class="line">          keepAlive:false,</span><br><span class="line">          ignoreField:[&#x27;__preventCache&#x27;],</span><br><span class="line">          interfaceSuffix:&#x27;.json&#x27;,</span><br><span class="line">          preferredLanguage:&#x27;cn&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // Load the plugin that provides the &quot;uglify&quot; task.</span><br><span class="line">  grunt.loadNpmTasks(&#x27;grunt-contrib-connect&#x27;);</span><br><span class="line">  grunt.loadNpmTasks(&#x27;grunt-mock2easy&#x27;);</span><br><span class="line">  grunt.loadNpmTasks(&#x27;grunt-contrib-watch&#x27;);</span><br><span class="line"></span><br><span class="line">  // Default task(s).</span><br><span class="line">  grunt.registerTask(&#x27;default&#x27;, [&#x27;mock2easy&#x27;,&#x27;connect&#x27;,&#x27;watch&#x27;]);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后终端输入<code>grunt</code>启动服务。</p><p>相关文章</p><p><a href="http://www.jianshu.com/p/7d1cebeffdd8">Grunt使用实例</a></p><p><a href="http://www.jianshu.com/p/78d556cd621c">Gruntfile.js配置全攻略</a></p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS百行代码打造JOSN模型代码生成器</title>
      <link href="/2017/04/06/iOS%E7%99%BE%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%89%93%E9%80%A0JOSN%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2017/04/06/iOS%E7%99%BE%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%89%93%E9%80%A0JOSN%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Mac应用，采用xib方式，拖入2个NSTextView</p><p>代码比较简单，整个.m文件才百余行代码</p><p><code>ViewController.h</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Cocoa/Cocoa.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> : <span class="title">NSViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">unsafe_unretained</span>) <span class="keyword">IBOutlet</span> <span class="built_in">NSTextView</span> *inputTextView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">unsafe_unretained</span>) <span class="keyword">IBOutlet</span> <span class="built_in">NSTextView</span> *outPutTextView;</span><br><span class="line">- (<span class="keyword">IBAction</span>)autoCodeCreate:(<span class="type">id</span>)sender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>ViewController.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;JSONUtils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span>  <span class="title">ViewController</span>()</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *arrayModel;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSDictionary</span> *jsonDict;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)autoCodeCreate:(<span class="type">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *jsonStr = <span class="keyword">self</span>.inputTextView.textStorage.string;</span><br><span class="line">    <span class="comment">//json字符串转json字典,可用</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = [<span class="keyword">self</span> objectFromJSONString:jsonStr];</span><br><span class="line">    <span class="keyword">if</span>(dic==<span class="literal">nil</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.inputTextView.string = <span class="string">@&quot;JSON格式错误&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.jsonDict=dic;</span><br><span class="line">    <span class="built_in">NSString</span> *fileStr=[<span class="keyword">self</span> autoCodeWithJsonDict:dic modelKey:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, fileStr);</span><br><span class="line">    [<span class="keyword">self</span>.outPutTextView setString:fileStr];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> handleArrayModel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="type">void</span>)handleArrayModel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> <span class="keyword">self</span>.arrayModel) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *jsonDict=[<span class="keyword">self</span>.jsonDict[key] firstObject];</span><br><span class="line">        <span class="built_in">NSString</span> *filestr0=[<span class="keyword">self</span> autoCodeWithJsonDict:jsonDict modelKey:key];</span><br><span class="line">        <span class="built_in">NSString</span> *filestr1=[<span class="keyword">self</span>.outPutTextView.string  stringByAppendingString:<span class="string">@&quot;\n\n&quot;</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *filestr =[filestr1 stringByAppendingString:filestr0];</span><br><span class="line">        [<span class="keyword">self</span>.outPutTextView setString:filestr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.arrayModel=<span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *)autoCodeWithJsonDict:(<span class="built_in">NSDictionary</span> *)dic modelKey:(<span class="built_in">NSString</span> *)classKey</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (classKey.length==<span class="number">0</span>||classKey==<span class="literal">nil</span>) &#123;</span><br><span class="line">        classKey=<span class="string">@&quot;customModel&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSArray</span> *keyArray = [dic allKeys];</span><br><span class="line">    <span class="built_in">NSString</span> *fileStr=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;@interface %@ : NSObject \r\n&quot;</span>,classKey];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;keyArray.count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *key = [keyArray objectAtIndex:i];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, key);</span><br><span class="line">        <span class="type">id</span> value = [dic objectForKey:key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>([value isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;string&quot;</span>);</span><br><span class="line">            fileStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@@property (strong,nonatomic) NSString *%@;\r\n&quot;</span>,fileStr,key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>([value isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;int&quot;</span>);</span><br><span class="line">            fileStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@@property (strong,nonatomic) NSNumber *%@;\r\n&quot;</span>,fileStr,key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>([value isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;array&quot;</span>);</span><br><span class="line">            fileStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@@property (strong,nonatomic) NSArray *%@;\r\n&quot;</span>,fileStr,key];</span><br><span class="line">            <span class="comment">//判断是否为字典数组</span></span><br><span class="line">            <span class="type">id</span> subvalue=[value lastObject];</span><br><span class="line">            <span class="keyword">if</span> ([subvalue isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [<span class="keyword">self</span>.arrayModel addObject:key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;string&quot;</span>);</span><br><span class="line">            fileStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@@property (strong,nonatomic) NSString *%@;\r\n&quot;</span>,fileStr,key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fileStr = [fileStr stringByAppendingString:<span class="string">@&quot;@end&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> fileStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="type">id</span>)objectFromJSONString:(<span class="built_in">NSString</span> *)jsonString&#123;</span><br><span class="line">    jsonString = [[jsonString stringByReplacingOccurrencesOfString:<span class="string">@&quot; &quot;</span> withString:<span class="string">@&quot;&quot;</span>] stringByReplacingOccurrencesOfString:<span class="string">@&quot; &quot;</span> withString:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;jsonString=%@&quot;</span>,jsonString);</span><br><span class="line">    <span class="built_in">NSData</span> *jsonData = [jsonString dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSError</span> *err;</span><br><span class="line">    <span class="type">id</span> jsondict = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:jsonData</span><br><span class="line">                                                    options:<span class="built_in">NSJSONReadingMutableContainers</span></span><br><span class="line">                                                      error:&amp;err];</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsondict;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)arrayModel &#123;</span><br><span class="line"><span class="keyword">if</span>(_arrayModel == <span class="literal">nil</span>) &#123;</span><br><span class="line">_arrayModel = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _arrayModel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20170406_140411.png" alt="UC20170406_140411"></p><p>​大致原理就是根据value值判断数据类型，然后进行字符串拼接，加入<code>\r,\n,\t</code>等格式控制符，优化输出模型格式。如果需要需要生产文件，直接将结果写入文件即可。</p><p>​当然其它功能代码自动生成原理基本一样。</p><h4 id="升级优化："><a href="#升级优化：" class="headerlink" title="升级优化："></a>升级优化：</h4><p>如果需要高亮或显示行号，可以直接使用如<a href="https://github.com/balthisar/JSDCocoaDemos">JSDCocoaDemos</a>等第三方库，优化显示样式。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用bootstrap布局</title>
      <link href="/2017/04/05/%E4%BD%BF%E7%94%A8bootstrap%E5%B8%83%E5%B1%80/"/>
      <url>/2017/04/05/%E4%BD%BF%E7%94%A8bootstrap%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>使用<code>bootstrap</code>布局</p><p><a href="http://blog.csdn.net/iefreer/article/details/9736967">Bootstrap vs. Foundation vs. Skeleton</a></p><p><code>Bootstrap</code> 和<code>Foundation</code>, <code>Skeleton</code>一样是响应式WEB界面框架。</p><p>bootstrap官网</p><p><a href="http://www.bootcss.com/">http://www.bootcss.com/</a></p><p><a href="http://v3.bootcss.com/">http://v3.bootcss.com/</a></p><p>优站精选</p><p><a href="http://expo.bootcss.com/">http://expo.bootcss.com/</a></p><p>Bootstrap 教程</p><p><a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html">http://www.runoob.com/bootstrap/bootstrap-tutorial.html</a></p><h3 id="一、创建App工程"><a href="#一、创建App工程" class="headerlink" title="一、创建App工程"></a>一、创建App工程</h3><p>用express创建工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">express -t  newsproject     <span class="comment">#默认使用pug模板</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">express -t ejs newsproject   <span class="comment">#指定使用ejs模板</span></span></span><br></pre></td></tr></table></figure><p>进入目录运行npm安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> newsproject</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span> </span><br></pre></td></tr></table></figure><p>运行项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">DEBUG=newsproject:* npm start</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">node ./bin/www</span></span><br></pre></td></tr></table></figure><h3 id="二、集成bootstrap布局"><a href="#二、集成bootstrap布局" class="headerlink" title="二、集成bootstrap布局"></a>二、集成bootstrap布局</h3><p>在node目录(app.js目录)下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install bootstrap --save</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install jquery --save<span class="comment">#由于bootstrap需要jquery,发现默认已安装，可忽略</span></span></span><br></pre></td></tr></table></figure><ul><li><p>打开nodeproject下的app.js，找到<code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code>在下一行添加如下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/lib&#x27;</span>,express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>)));</span><br></pre></td></tr></table></figure></li></ul><p>这样就把<code>node_modules</code>下的文件映射为我们的静态资源文件了。</p><ul><li><p>1、在<code>nodeproject/views</code>目录下创建一个<code>includes</code>目录，在includes创建一个<code>head.jade</code>文件，写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">link(href=&quot;/lib/bootstrap/dist/css/bootstrap.min.css&quot;, rel=&quot;stylesheet&quot;)</span><br><span class="line">script(src=&quot;/libs/jquery/dist/jquery.min.js&quot;) </span><br><span class="line">script(src=&quot;/libs/bootstrap/dist/js/bootstrap.min.js&quot;)</span><br><span class="line"></span><br><span class="line">&lt;!--使用以下代码也可以  --&gt;</span><br><span class="line">&lt;!-- script(src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;) --&gt;</span><br><span class="line">&lt;!-- script(src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js&quot;) --&gt;</span><br></pre></td></tr></table></figure></li><li><p>2、在<code>layout.jade</code>引入<code>head.jade</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    meta(charset=&quot;utf-8&quot;)</span><br><span class="line">    title= title</span><br><span class="line">    include ./includes/head</span><br><span class="line">  body</span><br><span class="line">    block content</span><br></pre></td></tr></table></figure></li></ul><p>在index.js内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line"><span class="comment">//index page</span></span><br><span class="line"><span class="comment">//路由规则和URL地址相匹配</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;   <span class="comment">//渲染模板</span></span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;豆瓣电影 首页&#x27;</span>,</span><br><span class="line">        <span class="attr">movies</span>: [&#123;  <span class="comment">//伪造模板数据</span></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;血战钢锯岭 Hacksaw Ridge&#x27;</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">poster</span>: <span class="string">&#x27;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.jpg&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;血战钢锯岭 Hacksaw Ridge&#x27;</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">poster</span>: <span class="string">&#x27;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.jpg&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;血战钢锯岭 Hacksaw Ridge&#x27;</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">poster</span>: <span class="string">&#x27;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.jpg&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;血战钢锯岭 Hacksaw Ridge&#x27;</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">poster</span>: <span class="string">&#x27;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.jpg&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;血战钢锯岭 Hacksaw Ridge&#x27;</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">poster</span>: <span class="string">&#x27;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.jpg&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;血战钢锯岭 Hacksaw Ridge&#x27;</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">poster</span>: <span class="string">&#x27;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.jpg&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>index.jade文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">.container</span><br><span class="line">.row</span><br><span class="line">each item in movies</span><br><span class="line">.col-md-2</span><br><span class="line">.thumbnail</span><br><span class="line">a(href=&quot;/movie/#&#123;item._id&#125;&quot;)</span><br><span class="line">img(src=&quot;#&#123;item.poster&#125;&quot;, alt=&quot;#&#123;item.title&#125;&quot;)</span><br><span class="line">.caption</span><br><span class="line">h3 #&#123;item.title&#125;</span><br><span class="line">p: a.btn.btn-primary(href=&quot;/movie/#&#123;item._id&#125;&quot;, role=&quot;button&quot;) 观看</span><br></pre></td></tr></table></figure><p>再次运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> DEBUG=myvideo:* npm start</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:3000/">http://localhost:3000/</a></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20170405_150634.png" alt="效果图"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://wiliam.me/2016/12/31/20161231162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,VueJs,Mongodb运行环境教程</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS快捷键</title>
      <link href="/2017/04/01/macOS%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017/04/01/macOS%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="macOS-OS-X-常用快捷键"><a href="#macOS-OS-X-常用快捷键" class="headerlink" title="macOS (OS X) 常用快捷键"></a>macOS (OS X) 常用快捷键</h5><p><a href="https://support.apple.com/zh-cn/HT201236">https://support.apple.com/zh-cn/HT201236</a></p><p><a href="https://www.mediaatelier.com/CheatSheet/">https://www.mediaatelier.com/CheatSheet/</a></p><p><img src="https://pic2.zhimg.com/c0aac5dd3da4676884d58eb41f5eea59_b.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用gulp和browser-sync实现Pug(jade)的实时预览</title>
      <link href="/2017/04/01/%E5%88%A9%E7%94%A8gulp%E5%92%8Cbrowser-sync%E5%AE%9E%E7%8E%B0Pug(jade)%E7%9A%84%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/"/>
      <url>/2017/04/01/%E5%88%A9%E7%94%A8gulp%E5%92%8Cbrowser-sync%E5%AE%9E%E7%8E%B0Pug(jade)%E7%9A%84%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>jade由于和注册商标重名，更名为pug。</p><h5 id="一、Pug安装编译"><a href="#一、Pug安装编译" class="headerlink" title="一、Pug安装编译"></a>一、Pug安装编译</h5><p><code>$ npm install -g pug #全局安装</code></p><p>这里如果遇见了</p><p><code>bash: pug: command not found</code></p><p>还需要安装<code>pug-cli</code>，具体原因，Github给出的解释是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You need to install pug-cli. The CLI was separated from the core library as part of this release.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g pug-cli</span></span><br></pre></td></tr></table></figure><p>cli是命令行端的程序。我们通过命令行来编译pug文件。</p><h5 id="pug简单使用："><a href="#pug简单使用：" class="headerlink" title="pug简单使用："></a>pug简单使用：</h5><p><code>pug -h</code>— 查看帮助</p><p><code>pug demo.pug</code>—在同级目录渲染并生成html文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用参数说明:</span><br><span class="line">-o 制定html输出目录</span><br><span class="line">-P 格式化输出html文件（样式美观）</span><br><span class="line">-w 监听模式，一旦pug文件有修改，自动会再次渲染输出html文件</span><br><span class="line">-b 制定所有pug文件的根目录用来指定文件的绝对路径</span><br><span class="line">-p 使用绝对路径方式</span><br></pre></td></tr></table></figure><h4 id="二、gulp和browser-sync安装"><a href="#二、gulp和browser-sync安装" class="headerlink" title="二、gulp和browser-sync安装"></a>二、gulp和browser-sync安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> npm install gulp-pug</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> npm install browser-sync gulp --save-dev</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">—save-dev这个属性会将条目保存到你package.json的devDependencies里面</span></span><br></pre></td></tr></table></figure><p>在当前目录 创建package.json和gulpfile.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node init   <span class="comment">#创建package.json文件</span></span></span><br></pre></td></tr></table></figure><p>1.package.json文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;gulp&quot;,</span><br><span class="line">&quot;version&quot;: &quot;3.9.1&quot;,</span><br><span class="line">&quot;description&quot;: &quot;配置package文件，实现文件更改后浏览器即时刷新&quot;,</span><br><span class="line">&quot;main&quot;: &quot;gulpfile.js&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keywords&quot;: [</span><br><span class="line">&quot;gulp&quot;</span><br><span class="line">],</span><br><span class="line">&quot;author&quot;: &quot;fidding.hjh&quot;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">&quot;browser-sync&quot;: &quot;^2.10.0&quot;,</span><br><span class="line">&quot;gulp&quot;: &quot;^3.9.1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意里面的版本号要与安装的版本相对应</p><p>2.gulpfile.js配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">&#x27;browser-sync&#x27;</span>).<span class="title function_">create</span>();</span><br><span class="line"><span class="keyword">var</span> pug = <span class="built_in">require</span>(<span class="string">&#x27;gulp-pug&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译pug</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;task_pug&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pug);</span><br><span class="line"><span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./src/*.pug&#x27;</span>)</span><br><span class="line">.<span class="title function_">pipe</span>(<span class="title function_">pug</span>(&#123;<span class="attr">pretty</span>:<span class="literal">true</span>&#125;)) <span class="comment">//格式化</span></span><br><span class="line">.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./src&#x27;</span>)) <span class="comment">//输出到文件夹</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*静态页面html实时预览*/</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;browser-sync&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">browserSync.<span class="title function_">init</span>(&#123;</span><br><span class="line"><span class="attr">server</span>: <span class="string">&quot;./src&quot;</span><span class="comment">////指定服务器启动根目录  </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/*.pug&#x27;</span>, [<span class="string">&#x27;task_pug&#x27;</span>]);<span class="comment">//监听pug文件变化-执行task_pug方法使用gulp-pug编译pug</span></span><br><span class="line">gulp.<span class="title function_">watch</span>([<span class="string">&#x27;src/*.html&#x27;</span>,]).<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>,browserSync.<span class="property">reload</span>);<span class="comment">//监听pug文件变化 刷新浏览器</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>,[<span class="string">&#x27;task_pug&#x27;</span>,<span class="string">&#x27;browser-sync&#x27;</span>]); <span class="comment">//定义默认任务 命令 gulp default</span></span><br></pre></td></tr></table></figure><p>执行 <code>$ gulp default</code> 会打开<a href="http://localhost:3000/">http://localhost:3000</a> 页面，如果出现Can’t get  url 页面，需要在src目录下添加index.html页面。</p><ul><li><p><code>gulp</code> 等价于<code>gulp default</code>,运行default中定义的所有任务</p><p>​</p></li></ul><p>Mac系统可以使用<a href="https://www.npmjs.com/package/http-server">http-server</a>或Python开启 <code>Web Server</code>,当前工作目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m SimpleHTTPServer 3000    #指定与gulp相同端口3000</span><br></pre></td></tr></table></figure><p>把生成的网页目录以文件名<code>index.html</code>保存到<code>src</code>目录下即可</p><p>这样每次修改pug文件会自动编译成html文件，并利用<code>browser-sync</code>实时刷新预览。</p><h4 id="三、出错解决："><a href="#三、出错解决：" class="headerlink" title="三、出错解决："></a>三、出错解决：</h4><p><a href="http://stackoverflow.com/questions/21406738/cant-get-gulp-to-run-cannot-find-module-gulp-util">Can’t get Gulp to run: cannot find module ‘gulp-util’</a></p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><p><a href="http://www.jianshu.com/p/61b31dbf030d">gulp 基本使用</a></p></li><li><p><a href="http://blog.leanote.com/post/github-dtcz/gulp%E9%85%8D%E7%BD%AE%E5%AE%8C%E5%85%A8%E7%AF%87">gulp配置完全指南</a></p></li><li><p><a href="http://www.techug.com/post/gulp.html">Gulp使用指南</a></p></li><li><p><a href="http://colobu.com/2014/11/17/gulp-plugins-introduction/">gulp plugins 插件介绍</a></p></li><li><p><a href="http://www.jianshu.com/p/6f85a44d01f4">gulp.watch的两种使用方法</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入法小技巧</title>
      <link href="/2017/03/31/%E8%BE%93%E5%85%A5%E6%B3%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/03/31/%E8%BE%93%E5%85%A5%E6%B3%95%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>​    每次使用Markdown时，需要填写文章标题，日期，分类等信息，譬如<code>grammar_cjkRuby</code>这单词还真记不住，即使记住拼写也麻烦。</p><p><strong>技巧：</strong></p><p>使用搜狗输入法自定义短语（当然也可以用其他文本替换工具）</p><p>选择搜狗输入法偏好设置—高级—&gt;自定义短语—&gt;添加一下内容保存即可</p><p>缩写为：mdh   位置1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#---</span><br><span class="line">title: </span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">date: $year-$month-$day $fullhour:$minute:$second</span><br><span class="line">grammar_cjkRuby: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后中文状态输入mdh  选择1即可输入以上内容</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyAPPPMacApp</title>
      <link href="/2017/03/31/myapp/"/>
      <url>/2017/03/31/myapp/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/694dad59f20c">Mac七牛图床与文件批量上传工具</a></p><p><img src="http://upload-images.jianshu.io/upload_images/328273-983992ba3de14433.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="http://upload-images.jianshu.io/upload_images/328273-386d1f6f89178ed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><a href="http://www.jianshu.com/p/d98d5053db86">Mac批量Ping工具</a></p><p><img src="http://upload-images.jianshu.io/upload_images/328273-e7c29729c378aea1.png?imageMogr2/auto-orient/strip%7CimageView2/2"></p><p><img src="http://upload-images.jianshu.io/upload_images/328273-e98a588a1b41b250.png?imageMogr2/auto-orient/strip%7CimageView2/2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS基础知识</title>
      <link href="/2017/03/30/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/03/30/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>NSString为何要用copy，而不是strong？</p><p>NSString、NSArray、NSDictionary等等经常使用copy关键字，是因为他们有对应的<code>可变类型</code>：NSMutableString、NSMutableArray、NSMutableDictionary，为确保对象中的属性值不会无意间变动，应该在设置新属性值时拷贝一份，保护其封装性</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> *str_strong;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span> *str_copy;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    <span class="keyword">self</span>.str_strong=<span class="string">@&quot;iOS&quot;</span>;</span><br><span class="line">    <span class="keyword">self</span>.str_copy=<span class="string">@&quot;iOS&quot;</span>;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *mstr=[[<span class="built_in">NSMutableString</span> alloc]initWithString:<span class="string">@&quot;iOS&quot;</span>];</span><br><span class="line">    <span class="keyword">self</span>.str_strong=mstr;</span><br><span class="line">    <span class="keyword">self</span>.str_copy=mstr;</span><br><span class="line">    <span class="comment">//修改NSMutableString字符串</span></span><br><span class="line">    [mstr appendString:<span class="string">@&quot;开发&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;str_strong=%@&quot;</span>,<span class="keyword">self</span>.str_strong);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;str_copy=%@&quot;</span>,<span class="keyword">self</span>.str_copy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NSLog信息</span></span><br><span class="line"><span class="number">11</span>:<span class="number">34</span>:<span class="number">43.062460</span>+<span class="number">0800</span> iOSInterview[<span class="number">3915</span>:<span class="number">356342</span>] str_strong=iOS开发</span><br><span class="line"><span class="number">11</span>:<span class="number">34</span>:<span class="number">43.063298</span>+<span class="number">0800</span> iOSInterview[<span class="number">3915</span>:<span class="number">356342</span>] str_copy=iOS</span><br></pre></td></tr></table></figure><p>算法</p><p>二分查找(也叫折半查找)，是至今应用比较多的一种搜索算法。速度快，比较次数少。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 代码执行时间*/</span></span><br><span class="line"><span class="built_in">CGFloat</span> TIME_BLOCKWithkey (<span class="built_in">NSString</span> *key,<span class="type">void</span> (^block)(<span class="type">void</span>)) &#123;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> startTime = <span class="built_in">CACurrentMediaTime</span>();</span><br><span class="line">    block ();</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> elapsedTime = <span class="built_in">CACurrentMediaTime</span>() - startTime;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ executionTime = %f ms&quot;</span>,key,elapsedTime *<span class="number">1000.0</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">CGFloat</span>)elapsedTime / <span class="built_in">NSEC_PER_SEC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *sortedArray=[<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        [sortedArray addObject:@(i)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">id</span> searchObject =@<span class="number">88888</span>;</span><br><span class="line"></span><br><span class="line">    TIME_BLOCKWithkey(<span class="string">@&quot;普通查找&quot;</span>, ^&#123;</span><br><span class="line">        <span class="built_in">NSUInteger</span> findIndex=[sortedArray indexOfObject:searchObject];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;findIndex=%zd&quot;</span>,findIndex);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    TIME_BLOCKWithkey(<span class="string">@&quot;二分查找&quot;</span>, ^&#123;</span><br><span class="line">        <span class="built_in">NSRange</span> searchRange = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [sortedArray count]);</span><br><span class="line">        <span class="built_in">NSUInteger</span> findIndex = [sortedArray indexOfObject:searchObject</span><br><span class="line">                                            inSortedRange:searchRange</span><br><span class="line">                                                  options:<span class="built_in">NSBinarySearchingFirstEqual</span></span><br><span class="line">                                          usingComparator:^(<span class="type">id</span> obj1, <span class="type">id</span> obj2)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">return</span> [obj1 compare:obj2];</span><br><span class="line">                                &#125;];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;findIndex=%zd&quot;</span>,findIndex);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NSLog信息</span></span><br><span class="line"><span class="number">13</span>:<span class="number">59</span>:<span class="number">23.806081</span>+<span class="number">0800</span> iOSInterview[<span class="number">5087</span>:<span class="number">608690</span>] 普通查找 executionTime = <span class="number">8.262457</span> ms</span><br><span class="line"><span class="number">13</span>:<span class="number">59</span>:<span class="number">23.806208</span>+<span class="number">0800</span> iOSInterview[<span class="number">5087</span>:<span class="number">608690</span>] findIndex=<span class="number">88888</span></span><br><span class="line"><span class="number">13</span>:<span class="number">59</span>:<span class="number">23.806340</span>+<span class="number">0800</span> iOSInterview[<span class="number">5087</span>:<span class="number">608690</span>] 二分查找 executionTime = <span class="number">0.136384</span> ms</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/8a54c26a9349">https://www.jianshu.com/p/8a54c26a9349</a></p><p><a href="http://c.biancheng.net/cpp/html/2744.html">C语言二分查找（折半查找）算法及代码</a></p><p>一，在程序里，交换2个数，我使用了异或来处理。这个可以根据个人喜好。为了避免产生临时变量，可以使用如下几种方式来交换2个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 1.中间变量</span><br><span class="line">void swap(int a, int b) &#123;</span><br><span class="line">int temp;</span><br><span class="line"> temp= a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2.加法</span><br><span class="line">void swap(int a, int b) &#123;</span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">a = a+b-(b=a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3.异或（相同为0，不同为1. 可以理解为不进位加法）</span><br><span class="line">void swap(int a, int b) &#123;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line">或</span><br><span class="line">    a^=b;</span><br><span class="line">    b^=a;</span><br><span class="line">    a^=b</span><br><span class="line"></span><br><span class="line">    或</span><br><span class="line">     a ^= b ^= a ^= b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std libs</span><br><span class="line">std::swap(a,b);</span><br></pre></td></tr></table></figure><ol><li><p><strong>设计模式是什么？ 你知道哪些设计模式，并简要叙述？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设计模式是一种编码经验，就是用比较成熟的逻辑去处理某一种类型的事情。</span><br><span class="line">1). MVC模式：Model View Control，把模型 视图 控制器 层进行解耦合编写。</span><br><span class="line">2). MVVM模式：Model View ViewModel 把模型 视图 业务逻辑 层进行解耦和编写。</span><br><span class="line">3). 单例模式：通过static关键词，声明全局变量。在整个进程运行期间只会被赋值一次。</span><br><span class="line">4). 观察者模式：KVO是典型的通知模式，观察某个属性的状态，状态发生变化时通知观察者。</span><br><span class="line">5). 委托模式：代理+协议的组合。实现1对1的反向传值操作。</span><br><span class="line">6). 工厂模式：通过一个类方法，批量的根据已有模板生产对象。</span><br></pre></td></tr></table></figure></li></ol><p><strong>2、MVC 和 MVVM 的区别</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1). MVVM是对胖模型进行的拆分，其本质是给控制器减负，将一些弱业务逻辑放到VM中去处理。</span><br><span class="line">2). MVC是一切设计的基础，所有新的设计模式都是基于MVC进行的改进。</span><br></pre></td></tr></table></figure><p>一、非集合类对象的copy与mutableCopy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 在非集合类对象中，对不可变对象进行copy操作，是指针复制，mutableCopy操作是内容复制；</span><br><span class="line"> 对可变对象进行copy和mutableCopy都是内容复制。用代码简单表示如下：</span><br><span class="line">NSString *str = @&quot;hello word!&quot;;</span><br><span class="line">NSString *strCopy = [str copy] // 指针复制，strCopy与str的地址一样</span><br><span class="line">NSMutableString *strMCopy = [str mutableCopy] // 内容复制，strMCopy与str的地址不一样</span><br><span class="line"></span><br><span class="line">NSMutableString *mutableStr = [NSMutableString stringWithString: @&quot;hello word!&quot;];</span><br><span class="line">NSString *strCopy = [mutableStr copy] // 内容复制</span><br><span class="line">NSMutableString *strMCopy = [mutableStr mutableCopy] // 内容复制</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有对不可变对象进行copy操作是指针复制（浅复制），其它情况都是内容复制（深复制）！</span><br></pre></td></tr></table></figure><p><strong>什么是 KVO 和 KVC？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1). KVC(Key-Value-Coding)：键值编码 是一种通过字符串间接访问对象的方式（即给属性赋值）</span><br><span class="line">   举例说明：</span><br><span class="line">   stu.name = @&quot;张三&quot; // 点语法给属性赋值</span><br><span class="line">   [stu setValue:@&quot;张三&quot; forKey:@&quot;name&quot;]; // 通过字符串使用KVC方式给属性赋值</span><br><span class="line">   stu1.nameLabel.text = @&quot;张三&quot;;</span><br><span class="line">   [stu1 setValue:@&quot;张三&quot; forKey:@&quot;nameLabel.text&quot;]; // 跨层赋值</span><br><span class="line">2). KVO(key-Value-Observing)：键值观察机制 他提供了观察某一属性变化的方法，极大的简化了代码。</span><br><span class="line">     KVO只能被KVC触发，包括使用setValue:forKey:方法和点语法。</span><br><span class="line">   // 通过下方方法为属性添加KVO观察</span><br><span class="line">   - (void)addObserver:(NSObject *)observer</span><br><span class="line">                     forKeyPath:(NSString *)keyPath</span><br><span class="line">                     options:(NSKeyValueObservingOptions)options</span><br><span class="line">                     context:(nullable void *)context;</span><br><span class="line">   // 当被观察的属性发送变化时，会自动触发下方方法</span><br><span class="line">   - (void)observeValueForKeyPath:(NSString *)keyPath</span><br><span class="line">                              ofObject:(id)object</span><br><span class="line">                                  change:(NSDictionary *)change</span><br><span class="line">                                 context:(void *)context&#123;&#125;</span><br><span class="line"></span><br><span class="line">KVC 和 KVO 的 keyPath 可以是属性、实例变量、成员变量。</span><br></pre></td></tr></table></figure><p><strong>ViewController生命周期</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">按照执行顺序排列：</span><br><span class="line">1. initWithCoder：通过nib文件初始化时触发。</span><br><span class="line">2. awakeFromNib：nib文件被加载的时候，会发生一个awakeFromNib的消息到nib文件中的每个对象。</span><br><span class="line">3. loadView：开始加载视图控制器自带的view。</span><br><span class="line">4. viewDidLoad：视图控制器的view被加载完成。</span><br><span class="line">5. viewWillAppear：视图控制器的view将要显示在window上。</span><br><span class="line">6. updateViewConstraints：视图控制器的view开始更新AutoLayout约束。</span><br><span class="line">7. viewWillLayoutSubviews：视图控制器的view将要更新内容视图的位置。</span><br><span class="line">8. viewDidLayoutSubviews：视图控制器的view已经更新视图的位置。</span><br><span class="line">9. viewDidAppear：视图控制器的view已经展示到window上。</span><br><span class="line">10. viewWillDisappear：视图控制器的view将要从window上消失。</span><br><span class="line">11. viewDidDisappear：视图控制器的view已经从window上消失。</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/bossren/p/6401067.html">http://www.cnblogs.com/bossren/p/6401067.html</a></p><p><strong>iOS多线程技术有哪几种方式？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：pthread、NSThread、GCD、NSOperation</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发辅助</title>
      <link href="/2017/03/30/iOS%E5%BC%80%E5%8F%91%E8%BE%85%E5%8A%A9/"/>
      <url>/2017/03/30/iOS%E5%BC%80%E5%8F%91%E8%BE%85%E5%8A%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="一、调色板增强扩展工具-skalacolor"><a href="#一、调色板增强扩展工具-skalacolor" class="headerlink" title="一、调色板增强扩展工具-skalacolor"></a>一、调色板增强扩展工具-skalacolor</h3><p>skalacolor是系统调色板工具colorPicker的增强扩展，与系统数码测色计相比，skalacolor除了能拷贝十进制，十六进制颜色值外，还可以直接拷贝objective c、Swift、css颜色代码。</p><p>下载安装</p><p><a href="https://bjango.com/mac/skalacolor/">https://bjango.com/mac/skalacolor/</a></p><p>如何使用</p><p>打开RTF文本编辑,然后按 **⇧⌘C **或选择 **格式→字体→显示颜色 **</p><p>使用帮助</p><p><a href="https://bjango.com/help/skalacolor/gettingstarted/">https://bjango.com/help/skalacolor/gettingstarted/</a></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/UC20180314_105620.png" alt="http://7xr7vj.com1.z0.glb.clouddn.com/UC20180314_105620.png"></p><h3 id="二、颜色配置模板生成工具-ColorTools"><a href="#二、颜色配置模板生成工具-ColorTools" class="headerlink" title="二、颜色配置模板生成工具-ColorTools"></a>二、颜色配置模板生成工具-ColorTools</h3><p><strong>ColorTools</strong></p><p><a href="https://github.com/ramonpoca/ColorTools">https://github.com/ramonpoca/ColorTools</a></p><p> Mac开发人员的颜色工具</p><p>用于从Mac ColorPicker调色板（.CLR）导入和导出颜色的小工具。</p><p>功能简介</p><ul><li>Adobe Swatch Exchange（.ASE）导入和导出。</li><li>十六进制颜色列表到系统调色板。</li><li>从颜色列表生成简单的UIColor类别。</li><li>从.xib &#x2F; .storyboard进行颜色搜索和替换</li></ul><p>ColorTools下载 <a href="https://github.com/ramonpoca/ColorTools/releases">https://github.com/ramonpoca/ColorTools/releases</a></p><p>用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ColorTools <span class="comment">#进入Ase2Clr，Clr2Ase命令行工具目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./Ase2Clr FileName.ase   <span class="comment">#执行Ase2Clr，将ase转成Mac调色板模板clr文件，生成Filename.clr在相同目录</span></span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Ase2Clr FileName.ase -i</span><br></pre></td></tr></table></figure><p>将生成的文件安装到<code>~/Library/Colors</code>中。您可能需要重新打开colorpicker才能刷新颜色列表。</p><p><strong>Html2Clr</strong></p><p>此工具读取包含十六进制编码颜色列表的文件，并为ColorPicker输出.clr文件，或将该列表作为新调色板安装在系统颜色选择器中。</p><p>输入格式是<code>#RRGGBB</code>颜色，后跟它们的名称，用空格分隔，每行一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#fa3ada Almost-Magenta</span><br><span class="line">#cada32 Green-Mustard</span><br><span class="line">#ff6347 Tomato</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>用法类似于Ase2Clr：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./Html2Clr File.txt #当前路径</span><br><span class="line">./Html2Clr File.txt -i#安装到~/Library/Colors中</span><br></pre></td></tr></table></figure><p><strong>Clr2Obj</strong></p><p>该工具通过.clr文件创建UIColor（iOS）类别文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Clr2Obj File.clr AppColor #AppColor为CategoryName</span><br></pre></td></tr></table></figure><p><strong>xibcolor</strong></p><p>这是一个python脚本，用于搜索和替换xib &#x2F; storyboard文件中的颜色（只有xml格式）。</p><p><em>注意</em>：这会覆盖文件！先备份你的文件（或让它在版本控制中提交）。</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xibcolor file [-l|replacements|[&quot;#fromcolor&quot; &quot;#tocolor&quot;]]</span><br><span class="line">  file          a .storyboard or xib in new XML format</span><br><span class="line">  -l            list colors present in the file</span><br><span class="line">  replacements  a file consisting of pairs of hex-coded from-&gt;to colors</span><br><span class="line">  #color        a pair of colors to replace</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OC与Swift代码转换工具</title>
      <link href="/2017/03/28/Swift%E8%BD%AC%E6%8D%A2OBJECTIVE%20C/"/>
      <url>/2017/03/28/Swift%E8%BD%AC%E6%8D%A2OBJECTIVE%20C/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ucai.cn/tools/oc2swift">http://www.ucai.cn/tools/oc2swift</a><br><a href="https://apps.myappconverter.com/cbcs">https://apps.myappconverter.com/cbcs</a><br><a href="http://objc2swift.yahoo-labs.jp/">http://objc2swift.yahoo-labs.jp/</a><br><a href="https://objectivec2swift.com/#/converter/">https://objectivec2swift.com/#/converter/</a><br><a href="http://objc2swift.yahoo-labs.jp/">http://objc2swift.yahoo-labs.jp/</a><br><a href="https://iswift.org/try">https://iswift.org/try</a><br><a href="https://iswift.org/">https://iswift.org/</a><br><a href="http://okaxaki.github.io/objc2swift/demo.html">http://okaxaki.github.io/objc2swift/demo.html</a><br><a href="http://uicolor.xyz/#/rgb-to-ui">http://uicolor.xyz/#/rgb-to-ui</a><br><a href="https://www.toptal.com/swift/from-objectivec-to-swif">https://www.toptal.com/swift/from-objectivec-to-swif</a><br><a href="http://www.objgen.com/json?demo=true">http://www.objgen.com/json?demo=true</a><br><a href="https://app.quicktype.io/">https://app.quicktype.io/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建模并生成实时JSON数据值</span></span><br><span class="line"><span class="comment">//交互方式使用简单的语法。</span></span><br><span class="line"><span class="comment">//String是默认值类型</span></span><br><span class="line"><span class="comment">//支持Number，Date和Boolean类型</span></span><br><span class="line">version n = <span class="number">3.1</span></span><br><span class="line">releaseDate d = <span class="number">2014</span>-<span class="number">06</span>-<span class="number">25</span></span><br><span class="line">demo b = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tabs或空格定义复杂的值-字典</span></span><br><span class="line">person</span><br><span class="line">  id number = <span class="number">12345</span></span><br><span class="line">  name = <span class="title class_">John</span> <span class="title class_">Doe</span></span><br><span class="line">  phones</span><br><span class="line">    home = <span class="number">800</span>-<span class="number">123</span>-<span class="number">4567</span></span><br><span class="line">    mobile = <span class="number">877</span>-<span class="number">123</span>-<span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用[]来定义简单的数组类型</span></span><br><span class="line">email[] s = jd@example.<span class="property">com</span>, jd@example.<span class="property">org</span></span><br><span class="line">  dateOfBirth d = <span class="number">1980</span>-<span class="number">01</span>-<span class="number">02</span></span><br><span class="line">  registered b = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用[n]来定义对象数组</span></span><br><span class="line">emergencyContacts[<span class="number">0</span>]</span><br><span class="line">  name s = <span class="title class_">Jane</span> <span class="title class_">Doe</span></span><br><span class="line">  phone s = <span class="number">888</span>-<span class="number">555</span>-<span class="number">1212</span></span><br><span class="line">  relationship = spouse</span><br><span class="line">emergencyContacts[<span class="number">1</span>]</span><br><span class="line">  name s = <span class="title class_">Justin</span> <span class="title class_">Doe</span></span><br><span class="line">  phone s = <span class="number">877</span>-<span class="number">123</span>-<span class="number">1212</span></span><br><span class="line">  relationship = parent</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发自定义NSLog</title>
      <link href="/2017/03/22/iOS%E8%87%AA%E5%AE%9A%E4%B9%89Log/"/>
      <url>/2017/03/22/iOS%E8%87%AA%E5%AE%9A%E4%B9%89Log/</url>
      
        <content type="html"><![CDATA[<h5 id="屏蔽Xcode烦人Log"><a href="#屏蔽Xcode烦人Log" class="headerlink" title="屏蔽Xcode烦人Log"></a>屏蔽Xcode烦人Log</h5><p>Xcode8之后，会打印一些烦人的Log信息</p><p>解决方法：1- Xcode菜单按钮: <code>Product &gt; Scheme &gt; Edit Scheme</code>&gt;<code>Run</code>&gt;<code>Arguments</code>或者直接按 <code>command + shift + &lt;</code> 快捷键</p><p>​   2- <strong>Environment Variables</strong> 设置为 <code>OS_ACTIVITY_MODE</code> &#x3D; <code>disable</code></p><p>stackoverflow:<a href="http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs">hide-strange-unwanted-xcode-8-logs</a></p><h5 id="C语言宏定义"><a href="#C语言宏定义" class="headerlink" title="C语言宏定义"></a>C语言宏定义</h5><table><thead><tr><th>符号</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>__FILE__</code></td><td>String</td><td>当前文件的绝对路径</td></tr><tr><td><code>__LINE__</code></td><td>Int</td><td>展开该宏时在文件中的行数</td></tr><tr><td><code>__COLUMN__</code></td><td>Int</td><td>展开该宏时在文件中的列</td></tr><tr><td><code>__FUNCTION__</code></td><td>String</td><td>包含这个符号的函数名称</td></tr><tr><td><code>__COUNTER__</code></td><td>Int</td><td>无重复的计数器，从程序启动开始每次调用都会++，常用语宏中定义无重复的参数名称</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@&quot;%s %d %s %s&quot;, __FILE__, __LINE__, __PRETTY_FUNCTION__, __FUNCTION__);</span><br></pre></td></tr></table></figure><p><code>printf()</code>和<code>fprintf()</code>这些输出函数的参数是可变的</p><p>C99中规定宏可以像函数一样带有可变参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define LOG(format, ...) fprintf(stdout, format, __VA_ARGS__)</span><br></pre></td></tr></table></figure><p>其中，<code>...</code>表示参数可变，<code>__VA_ARGS__</code>在预处理中为实际的参数集所替换</p><p>GCC中同时支持如下的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define LOG(format, args...) fprintf(stdout, format, args)</span><br></pre></td></tr></table></figure><p>其用法和上面的基本一致，只是参数符号有变化</p><p>“<code>##</code>“的作用是对token进行连接，在上例中，<code>format</code>、<code>__VA_ARGS__</code>、<code>args</code>即是token，</p><p>如果token为空，那么不进行连接，所以允许省略可变参数(__VA_ARGS__和args)，对上述变参宏做如下修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define LOG(format, ...)     fprintf(stdout, format, ##__VA_ARGS__)</span><br><span class="line">#define LOG(format, args...) fprintf(stdout, format, ##args)</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键字</span></span><br><span class="line">...:可变参数</span><br><span class="line"> __VA_ARGS__ :宏定义中的...中的所有剩余参数</span><br><span class="line"> ##:连接符号</span><br><span class="line"> #:原样输出</span><br><span class="line">/:换行符</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> K_AAAAA(aaa,...) aaa</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K_BBBBB(...) K_AAAAA(__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//调用示例：</span></span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@&quot;outPut :%@&quot;</span>,K_BBBBB(<span class="string">@&quot;this is string&quot;</span>));</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@&quot;outPut2 :%d&quot;</span>,K_BBBBB(<span class="number">100</span>));</span><br><span class="line"> <span class="comment">//输出： outPut :this is string</span></span><br><span class="line">        outPut2 :<span class="variable language_">this</span> is <span class="number">100</span></span><br></pre></td></tr></table></figure><h5 id="Xcode8后的自定义Log"><a href="#Xcode8后的自定义Log" class="headerlink" title="Xcode8后的自定义Log"></a>Xcode8后的自定义Log</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NNSLog00(format,...) NSLog(format,__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NNSLog0(fmt, ...) NSLog((fmt), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NNSLog(...) fprintf(stderr,<span class="string">&quot;%s\n&quot;</span>,[[NSString stringWithFormat:__VA_ARGS__] UTF8String]);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NNSLog1(FORMAT,...) fprintf(stderr,<span class="string">&quot;%s\n&quot;</span>,[[NSString stringWithFormat:FORMAT,##__VA_ARGS__] UTF8String]);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NNSLog2(...) fprintf(<span class="string">&quot;%s %s Line %d: %s\n&quot;</span>,[[NSString stringWithFormat:@<span class="string">&quot;%s&quot;</span>, __FILE__].lastPathComponent UTF8String], __PRETTY_FUNCTION__, __LINE__, [[NSString stringWithFormat:__VA_ARGS__] UTF8String]);</span></span><br></pre></td></tr></table></figure><h5 id="格式化宏"><a href="#格式化宏" class="headerlink" title="格式化宏"></a>格式化宏</h5><p>可以&#x2F;换行符格式化宏，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define NSLog(format, ...) \</span><br><span class="line">    do &#123; \</span><br><span class="line">        NSLog(@&quot;&lt;%@ : %d : %s&gt;-: %@&quot;, \</span><br><span class="line">        [[NSString stringWithUTF8String:__FILE__] lastPathComponent], \</span><br><span class="line">        __LINE__, \</span><br><span class="line">        __FUNCTION__, \</span><br><span class="line">        [NSString stringWithFormat:format, ##__VA_ARGS__]); \</span><br><span class="line">    &#125; while(0)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="控制Log输出"><a href="#控制Log输出" class="headerlink" title="控制Log输出"></a>控制Log输出</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NSLog(fmt, ...) NSLog((fmt), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NSLog(...) &#123;&#125;</span></span><br><span class="line"><span class="comment">//#define NSLog(format, ...) do&#123; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>如果在项目中log信息太多，可以屏蔽共用log，使用自定义log，便于局部测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define NSLog(...) &#123;&#125;//屏蔽共用log</span><br><span class="line">#define NNSLog(...) fprintf(stderr,&quot;%s\n&quot;,[[NSString stringWithFormat:__VA_ARGS__] UTF8String]);//使用自定义log</span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://onevcat.com/2014/01/black-magic-in-macro/">https://onevcat.com/2014/01/black-magic-in-macro/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式使用</title>
      <link href="/2017/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小写  a-z</span><br><span class="line">大写  A-Z</span><br><span class="line">汉字  \u4E00-\u9FA5</span><br><span class="line">数字  \u0030-\u0039</span><br></pre></td></tr></table></figure><p>正则表达式”[a-zA-Z]+”代表什么含义?</p><p>a-z是所有小写字母 A-Z是所有大写字母<br>[a-zA-Z]+ 这个就是一个不分大小写字母的英文单词（无限字母） 最少是一个字母</p><h4 id="表1-常用的元字符"><a href="#表1-常用的元字符" class="headerlink" title="表1.常用的元字符"></a>表1.常用的元字符</h4><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符以外的任意字符</td></tr><tr><td><code>\w</code></td><td>匹配字母或数字或下划线或汉字  —-<code>\W</code>大写W匹配不是字母、数字、下划线的字符</td></tr><tr><td><code>\s</code></td><td>匹配任意的空白符  等同于<code>[\f\n\r\t\v]</code>;</td></tr><tr><td>\d</td><td>匹配数字   相当于<code>[0-9]</code>    —– <code>\D</code> 匹配不是数字的字符</td></tr><tr><td><code>\b</code></td><td>匹配单词的开始或结束</td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td></tr><tr><td><code>$</code></td><td>匹配字符串的结束</td></tr><tr><td><code>[</code></td><td>字符组的起始符号</td></tr></tbody></table><p>如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这类特殊字符原本是字母，在表达特殊含义时需要用”&quot;转义。</p><p>如：</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>匹配<code>*</code> 字符</td></tr><tr><td>.</td><td>匹配<code>.</code> 字符</td></tr><tr><td>/</td><td>匹配 <code>/</code> 字符</td></tr><tr><td>\</td><td>匹配 <code>\</code> 字符</td></tr><tr><td>[</td><td>匹配 <code>[</code> 字符</td></tr><tr><td>]</td><td>匹配 <code>]</code> 字符</td></tr></tbody></table><h5 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h5><p>你已经看过了前面的*,+,{2},{5,12}这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：</p><h5 id="表-2-常用的限定符（量词）"><a href="#表-2-常用的限定符（量词）" class="headerlink" title="表 2.常用的限定符（量词）"></a>表 2.常用的限定符（量词）</h5><table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复零次或更多次  相当于<code>&#123;0,&#125;</code></td></tr><tr><td><code>+</code></td><td>重复一次或更多次  相当于<code>&#123;1,&#125;</code></td></tr><tr><td><code>?</code></td><td>重复0次或1次  相当于<code>&#123;0,&#125;</code>或<code>&#123;0,1&#125;</code></td></tr><tr><td><code>&#123;n&#125;</code></td><td>重复 n 次</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>重复 n 次或更多次</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>重复 n 到 m 次</td></tr></tbody></table><h5 id="表3-常用的反义代码"><a href="#表3-常用的反义代码" class="headerlink" title="表3.常用的反义代码"></a>表3.常用的反义代码</h5><p>特殊字符串表达特殊的含义,如果要检测”*”等特殊字符，需要在前面加上\进行转义。</p><table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><table><thead><tr><th>特殊字符</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>^</td><td>表示字符串开头</td><td>“^2”表示以2开始</td></tr><tr><td>$</td><td>表示字符串的结尾，如果允许跨行检索，那么也表示行尾</td><td>“2$”表示以2结尾</td></tr><tr><td>[]</td><td>中括号表达式，匹配中括号内的任意字符，在中括号的开头加上”^”表示补集</td><td>[0-9a-zA-Z]表示\w，[^0-9a-zA-Z]表示\W</td></tr><tr><td>()</td><td>表示将括号内分组并标记为子表达式，在开头加上”?:”表示仅分组不标记为子表达式。\2表示重复第二子表达式</td><td>“(abc)\1”匹配”abcabc”，”(?:abc)”仅分组不编号</td></tr></tbody></table><table><thead><tr><th>|</th><th>或，可以连续使用</th><th>“x|y|z”匹配 x或 y或 z</th></tr></thead><tbody><tr><td>{}</td><td>{n}重复前一个表达式 n次，{n,}少于 n次，{n,m}大于 n次小于 m次</td><td>“\d{4}”匹配四个数字</td></tr></tbody></table><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p><strong>锚点</strong>用于匹配一个位置，下列为常用的锚点</p><ul><li>^ 起始的位置 &#x2F;^http&#x2F;（用在表达式的开头表示一个正则表达是的开始）</li><li>$ 结尾的位置 &#x2F;.jpg$&#x2F; （表示字符串的结尾）</li><li>\b 单词边界 （匹配单词的开始或结束）</li></ul><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p><strong>字符类</strong>用于匹配一类字符中的一个，下面为几个常用的例子，</p><ul><li>[abc] 可用于匹配 a b 还有 c</li><li>[0-9] 可用于匹配一个数字</li><li>[^0-9] 可用于匹配一个<strong>非</strong>数字</li><li>[a-z] 可用于匹配一个字母</li><li>. 任意字符但换行符除外</li></ul><p>开发常用正则示例详解：</p><p>(1).用户名</p><p>规则—1.字母开头(第一位字母) —[a-zA-Z] 表示第一位为字母 ;</p><p>​    2.后面几位为数字或下划线—-[a-zA-Z0-9] 表示字符为字母数字或者下滑线; </p><p>​           3.位数限制6-16位—{5,15} 表示有5到15个符合[a-zA-Z0-9]的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z][a-zA-Z0-9_]&#123;5,15&#125;$</span><br></pre></td></tr></table></figure><p>(2).密码</p><p>(?![0-9]{0,24}$)  表示前24位不能全为数字<br>\S  表示任何非空白字符(不为空格,回车,tab等输入的空白符)<br>[\S]{6,24} 表示6到24位不为空格的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;^(?![0-9]&#123;0,24&#125;)[\S]&#123;6,24&#125;$&quot; </span><br></pre></td></tr></table></figure><p>(3).手机号</p><p>1 表示第一位为1<br>[3|4|5|7|8] 表示第二位为 3,4,5,6,7,或者8<br>[0-9]{9} 表示9位任意数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^13|4|5|7|8&#123;9&#125;$</span><br></pre></td></tr></table></figure><p>(4).email</p><p> (格式 用户名@邮箱网站.com   或   用户.名@邮箱网站.com.cn )</p><p>[a-zA-Z0-9_-]+ 表示1位或多位字母数字下划线和连接符<br>(.[a-zA-Z0-9_-]+)* 表示 0个或多个  由一个点.和一个或多个字母数字下划线连接符组成的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*@[a-zA-Z0-9_-]+.com(.cn)?$</span><br></pre></td></tr></table></figure><p>(5).查找字符串中的数字</p><p>this is num 185cm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\d+</span><br></pre></td></tr></table></figure><p>(6).查找字符串中的Emoji</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\[+[a-z]+\\]  </span><br><span class="line">\\[em\\d&#123;4&#125;\\] //QQEmoji</span><br></pre></td></tr></table></figure><p>(7).查找字符串中的话题 #iOS开发#</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#([^\\#|]+)#</span><br></pre></td></tr></table></figure><p>下面是<code>JavaScript</code>示例代码，利用CoderRunner可以实时编写测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Thisis a Box! 价格2(¥3.15) 1223#呵呵呵#[偷笑]啊哈[哈哈] https://segmentfault.com/a/ 262 [嘻嘻]&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> numberRex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\d+&quot;</span>);<span class="comment">//匹配数字 +表示至少一位</span></span><br><span class="line"><span class="keyword">var</span> emoji= <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\[[0-9a-zA-Z\\u4e00-\\u9fa5]+\\]&quot;</span>);<span class="comment">// 表情的规则--汉子+字母+数字组成</span></span><br><span class="line"><span class="keyword">var</span> emoji2= <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\[+[a-z]+\\]&quot;</span>);<span class="comment">// 表情的规则--[cool] 里面为纯字母</span></span><br><span class="line"><span class="keyword">var</span> atPattern= <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;@[0-9a-zA-Z\\u4e00-\\u9fa5]+&quot;</span>);<span class="comment">// @的规则</span></span><br><span class="line"><span class="keyword">var</span> topicPattern= <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;#[0-9a-zA-Z\\u4e00-\\u9fa5]+#&quot;</span>);<span class="comment">// #话题#的规则</span></span><br><span class="line"><span class="keyword">var</span> urlPattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b(([\\w-]+://?|www[.])[^\\s()&lt;&gt;]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))&quot;</span>);<span class="comment">// url链接的规则</span></span><br><span class="line"><span class="keyword">var</span> userName = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^[a-zA-Z][a-zA-Z0-9_]&#123;5,15&#125;$&quot;</span>);<span class="comment">// (由6-16位字母数字下划线组成,第一位不能为数字或下划线) </span></span><br><span class="line"><span class="keyword">var</span> passWorld = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^(?![0-9]&#123;0,24&#125;)[\\S]&#123;6,24&#125;$&quot;</span>);<span class="comment">// ( 6-24位,不能为纯数字,不能包含空格) </span></span><br><span class="line"><span class="keyword">var</span> phoneNum  = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^1[3|4|5|7|8][0-9]&#123;9&#125;$&quot;</span>);<span class="comment">// (1开头3，4，5，7，8区分运营商,由于变动较快，限制适当放宽点) 等同^1[3|4|5|7|8][0-9]\\d&#123;8&#125;$</span></span><br><span class="line"><span class="keyword">var</span> phoneNum2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^1[3|4|5|7|8][0-9]\\d&#123;8&#125;$&quot;</span>);<span class="comment">//\d&#123;8&#125; 相当于[0-9]&#123;8&#125; </span></span><br><span class="line"><span class="keyword">var</span> phoneNum3 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^1[3|4|5|7|8]\\d&#123;9&#125;$&quot;</span>);<span class="comment">//所以可以精简为这个</span></span><br><span class="line"><span class="keyword">var</span> validateNum = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^[0-9]+$&quot;</span>);<span class="comment">// 验证是否纯数字- ^表示开头 +表示至少1次 $表示结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Email1</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;</span>);<span class="comment">//用户名@邮箱网站.com   或   用户.名@邮箱网站.com.cn </span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Email2</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\.\\w+([-.]\\w+)*$&quot;</span>);<span class="comment">//利用元字符\w对上面正则简写</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">IdCard</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$)|(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)&quot;</span>);<span class="comment">//匹配身份证号码</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;¥(\\d+(?:\\.\\d+)?)&quot;</span>);<span class="comment">//匹配价格 只考虑人民币()表示子表达式 ¥3.15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(numberRex));</span><br><span class="line"><span class="comment">//PS：元字符注意加转义符，正则表达式中&#x27;\d&#x27;可以看作元字符，或者元字符序列，是一个完整的整体；但是因为Object-C语言中‘\&#x27;已经有了它的特殊意义了，所以&#x27;\b&#x27;会被先转义，所以就无法得到正则表达式真正想要的内容。</span></span><br></pre></td></tr></table></figure><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><p><a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a></p><p><a href="http://tool.lu/regex">http://tool.lu/regex</a></p><p>正则网上内容基本一样，关键在于理解掌握，下面是一些比较好的教程。</p><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><p><a href="http://www.ctolib.com/topics-102627.html">http://www.ctolib.com/topics-102627.html</a></p><p><a href="http://www.ctolib.com/topics-34117.html">http://www.ctolib.com/topics-34117.html</a></p><p><a href="https://www.zybuluo.com/demonly/note/443320">https://www.zybuluo.com/demonly/note/443320</a></p><p><a href="https://yq.aliyun.com/ziliao/99994?spm=5176.8246799.0.0.tuxn2y">https://yq.aliyun.com/ziliao/99994?spm=5176.8246799.0.0.tuxn2y</a></p><p><a href="http://www.infoq.com/cn/news/2011/01/regular-expressions-1">http://www.infoq.com/cn/news/2011/01/regular-expressions-1</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell自动打包IPA</title>
      <link href="/2017/03/19/shell%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85IPA/"/>
      <url>/2017/03/19/shell%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85IPA/</url>
      
        <content type="html"><![CDATA[<p>自动打包ipa，测试发现时间和用xcode打包差不多，但可以减少鼠标点击操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----------使用说明---</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将EnterpriseExportOptionsPlist放在.xcodeproj同级目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行脚本，直接拖放项目目录（.xcodeproj上级文件夹）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mac 下终端访问文件出现“Permission Denied”解决方案：<span class="built_in">chmod</span> a+x ./文件名</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----------使用说明 END---</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置信息--Start---------</span></span><br><span class="line">version_string=&quot;3.5.0&quot;   #版本号-空值不设置</span><br><span class="line">build_number=&quot;3.5.1286&quot; #版本号-空值不设置</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#企业(enterprise)证书名&amp;描述文件</span></span></span><br><span class="line">ENTERPRISECODE_SIGN_IDENTITY=&quot;iPhone Distribution: xxx Service Co., Ltd.&quot;</span><br><span class="line">EnterpriseBundleID=&quot;com.xxx.inhouse&quot;</span><br><span class="line">ENTERPRISEROVISIONING_PROFILE_NAME=&quot;73c2dfe3-ebc4-4801-bbd6-e4ba25f14fe9&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;请拖入项目文件目录(.xcodeproj文件的上层目录)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取用户输入并存到变量里</span></span><br><span class="line">read user_input</span><br><span class="line">Project_Path=$user_input</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EnterpriseExportOptionsPlist文件路径</span></span><br><span class="line">EnterpriseExportOptionsPlist=$Project_Path/EnterpriseExportOptionsPlist.plist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;$EnterpriseExportOptionsPlist&quot; </span><br><span class="line">echo &quot;$Project_Path&quot; </span><br><span class="line">cd $Project_Path</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查找项目名称</span></span><br><span class="line">Project_Name=`find . -name *.xcodeproj | awk -F &quot;[/.]&quot; &#x27;&#123;print $(NF-1)&#125;&#x27;`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############获取版本号,bundleID</span></span></span><br><span class="line">info_plist=$Project_Path/$Project_Name/Info.plist</span><br><span class="line">echo &quot;~~~0~$Project_Name~~~~~&quot;</span><br><span class="line">ipa_outPath=~/Desktop/$Project_Name    #保存ipa文件到桌面</span><br><span class="line"></span><br><span class="line">echo &quot;~~~~~开始编译~~~~~&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改plist 版本号，修改build号函数--放在调用前</span></span><br><span class="line">PlistBuddy_setting()&#123;</span><br><span class="line">echo &quot;~~~~~修改plist版本号~~~~~&quot;</span><br><span class="line">bundleVersion=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; $info_plist`</span><br><span class="line">bundleIdentifier=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleIdentifier&quot; $info_plist`</span><br><span class="line">bundleBuildVersion=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; $info_plist`</span><br><span class="line">echo &quot;~~~工程名~~~~~$Project_Name~~Bundle ID~~~$bundleIdentifier~~版本号~~~~~$bundleBuildVersion&quot;</span><br><span class="line"></span><br><span class="line">if [ ! -n $version_string ]; then</span><br><span class="line"> echo &quot;IS NULL&quot;</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改版本号</span></span><br><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleShortVersionString $version_string&quot; &quot;$&#123;info_plist&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -n $version_string ]; then</span><br><span class="line"> echo &quot;IS NULL&quot;</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改build号</span></span><br><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleVersion $build_number&quot; $&#123;info_plist&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xcodebuild_Archive()&#123;</span><br><span class="line">xcodebuild -project $Project_Name.xcodeproj -scheme $Project_Name -configuration Release -archivePath $Project_Name-enterprise.xcarchive clean archive build CODE_SIGN_IDENTITY=&quot;$&#123;ENTERPRISECODE_SIGN_IDENTITY&#125;&quot; PROVISIONING_PROFILE=&quot;$&#123;ENTERPRISEROVISIONING_PROFILE_NAME&#125;&quot; PRODUCT_BUNDLE_IDENTIFIER=&quot;$&#123;EnterpriseBundleID&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xcodebuild_ExportArchive()&#123;</span><br><span class="line">xcodebuild -exportArchive -archivePath $Project_Name-enterprise.xcarchive -exportOptionsPlist $EnterpriseExportOptionsPlist -exportPath $ipa_outPath</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清理工程</span></span><br><span class="line">xcodebuild -project $&#123;Project_Path&#125;/$&#123;Project_Name&#125;.xcodeproj clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">利用PlistBuddy修改plist信息</span></span><br><span class="line">PlistBuddy_setting;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">企业打包脚本</span></span><br><span class="line">xcodebuild_Archive;#第一步--archive-.xcarchive</span><br><span class="line">xcodebuild_ExportArchive;#第二步--exportArchive-ipa</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$ipa_outPath&quot; ]; then</span><br><span class="line">echo &quot;导出成功✅！！ $ipa_outPath&quot; </span><br><span class="line">open $ipa_outPath</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS如何进行高效率开发</title>
      <link href="/2017/03/16/iOS%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"/>
      <url>/2017/03/16/iOS%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h5 id="1-高效的利用工具"><a href="#1-高效的利用工具" class="headerlink" title="1.高效的利用工具"></a>1.高效的利用工具</h5><p><a href="http://www.ctolib.com/cheatsheets-Awesome-Mac.html">开发人员的Mac应用速查表</a></p><p><a href="http://huluo666.cn/2016/03/30/iOS%20%E9%AB%98%E6%95%88%E7%8E%87%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%AF%87/">iOS 高效率编程工具篇</a></p><h5 id="2-使用Xcode模板，Code-Snippets，代码生成工具"><a href="#2-使用Xcode模板，Code-Snippets，代码生成工具" class="headerlink" title="2.使用Xcode模板，Code Snippets，代码生成工具"></a>2.使用Xcode模板，Code Snippets，代码生成工具</h5><p>固定的代码不要浪费时间一行一行敲了，使用模板不会出错而且规范。</p><p><a href="http://www.jianshu.com/p/ba524b5a85d7">iOS自定义Xcode模板</a></p><p><strong>代码生成工具如</strong></p><p><a href="https://github.com/Ahmed-Ali/JSONExport">JSONExport</a>  —直接将json数据转成model文件</p><p>如果有必要写些适合自己项目的代码生成工具</p><h5 id="3、使用接口调试利器paw"><a href="#3、使用接口调试利器paw" class="headerlink" title="3、使用接口调试利器paw"></a>3、使用接口调试利器<code>paw</code></h5><p>Mac最好用的接口调试工具，支持Cookie，历史记录，请求时间等等，支持代码生成，还支持接口文档共享。几乎所有接口相关信息都有，个人觉得比什么Postman好用的多。</p><h5 id="4、MockAPI模拟数据"><a href="#4、MockAPI模拟数据" class="headerlink" title="4、MockAPI模拟数据"></a>4、<code>MockAPI</code>模拟数据</h5><p>一般情况，后台给数据都是比较慢的，给到再调试的时候一是错误多，也很可能忙不过来。</p><p>很多人是把模拟数据写死在代码中，反复修改编译不是个好方法。</p><p>在线MockAPi工具如：</p><p><a href="http://rap.taobao.org/org/index.do">http://rap.taobao.org/org/index.do</a></p><p><a href="https://testerhome.com/">https://testerhome.com/</a></p><p><a href="http://apizza.cc/?f=lv">http://apizza.cc/?f=lv</a></p><p><a href="http://mock-api.com/">http://mock-api.com/</a></p><p>个人最喜欢用的还是<a href="https://github.com/typicode/json-server">json-server</a>来模拟API，结合<a href="http://mockjs.com/">mock.js</a>模拟你想要数据。使用也很简单，基本能满足需要。如果有特殊需求，可以查找更高级的工具。</p><h5 id="5、使用谷歌搜索"><a href="#5、使用谷歌搜索" class="headerlink" title="5、使用谷歌搜索"></a>5、使用谷歌搜索</h5><p>有问题谷歌，搜不到想要结果翻译成英文搜，谷歌访问不了，可以用镜像或SS，SS太多不知哪个速度快，可以用个人写的<a href="http://www.jianshu.com/p/d98d5053db86">Mac批量Ping工具</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法学习备忘</title>
      <link href="/2017/02/28/Markdown%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/02/28/Markdown%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>来源于以下文章</p><p><a href="http://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a></p><p><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C">Markdown 语法手册 （完整整理版）</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><ol><li>斜体和粗体</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span>或<span class="emphasis">_斜体_</span></span><br><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*加粗斜体*</span>**</span></span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><strong>链接和图片</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">简书</span>](<span class="link">http://www.jianshu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">http://7xr7vj.com1.z0.glb.clouddn.com/tmp268b5eed.png</span>)</span><br><span class="line">http://example.com/</span><br><span class="line"><span class="language-xml">&lt;http://example.com/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我经常去的几个网站[<span class="string">Google</span>][<span class="symbol">1</span>]、[<span class="string">Leanote</span>][<span class="symbol">2</span>]以及[<span class="string">自己的博客</span>][<span class="symbol">3</span>]</span><br><span class="line">[<span class="string">Leanote 笔记</span>][<span class="symbol">2</span>]是一个不错的[<span class="string">网站</span>][<span class="symbol"></span>]。</span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">http://www.google.com &quot;Google&quot;</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">http://www.leanote.com &quot;Leanote&quot;</span></span><br><span class="line">[<span class="symbol">3</span>]:<span class="link">http://http://blog.leanote.com/freewalk &quot;梵居闹市&quot;</span></span><br><span class="line">[<span class="symbol">网站</span>]:<span class="link">http://http://blog.leanote.com/freewalk</span></span><br></pre></td></tr></table></figure><p>列表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表项 一</span><br><span class="line"><span class="bullet">-</span> 无序列表项 二</span><br><span class="line"><span class="bullet">-</span> 无序列表项 三</span><br></pre></td></tr></table></figure><p>引用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白</span><br><span class="line">&gt;&gt; 自己看教程！ - 愤青</span><br><span class="line"><span class="quote">&gt; 教程在哪？ - 小白</span></span><br></pre></td></tr></table></figure><h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><p>写文章时，我们常常希望能够<strong>首行缩进</strong>，这时可以在段首加入<code>&amp;ensp;</code>来输入一个空格.加入<code>&amp;emsp;</code>来输入两个空格。</p><h3 id="限制图片大小并居中"><a href="#限制图片大小并居中" class="headerlink" title="限制图片大小并居中"></a>限制图片大小并居中</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://7xr7vj.com1.z0.glb.clouddn.com/tmp268b5eed.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;效果图&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-admin使用测试</title>
      <link href="/2017/02/28/hexo-admin%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95/"/>
      <url>/2017/02/28/hexo-admin%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>​使用<code>hexo-admin</code>插件在线写博客，可以和简书一样方便吗。文章的编辑窗口是类似Mou的双栏，书写和预览效果。使用<code>hexo-admin</code>写博客，不用进行额外的保存。这款插件每隔几秒钟就会自动保存一次。</p><p>结论：测试效果还行，不如简书编辑器那样集成了markdown常用功能，但可以同步预览，还是可以的</p><p>–此文章来自hexo-admin</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 文本编辑器</title>
      <link href="/2017/02/28/Markdown-%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2017/02/28/Markdown-%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>免费<br>[Typora][1] -免费极简编辑器,非常好用，付费都值得<br><a href="https://boostnote.io/">https://boostnote.io</a> -为程序员量身定做的笔记应用</p><p><a href="http://marboo.io/zh_CN/">Marboo笔记</a>   提供文档管理</p><p><a href="http://zh.mweb.im/">MWeb</a> 提供文档管理</p><p>Versatil Markdown</p><p>付费</p><h3 id="Ulysses-2"><a href="#Ulysses-2" class="headerlink" title="[Ulysses][2]"></a>[Ulysses][2]</h3><p>支持OS X , iPad，售价 283元。堪称markdown编辑器中的佼佼者。</p><p>[1]:<a href="http://typora.io/">http://typora.io/</a><br>[2]:<a href="http://www.ulyssesapp.com/">http://www.ulyssesapp.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-admin的使用</title>
      <link href="/2017/02/28/hexo-admin%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/02/28/hexo-admin%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="http://hexo.io/">Hexo博客引擎</a>的管理用户界面。基于 <a href="http://ghost.org/">Ghost</a> 界面，灵感来自<a href="http://svbtle.com/">svbtle</a>和<a href="http://prose.io/">prose.io</a>。</p><p>本地使用vs部署</p><p>这个插件最初是作为本地编辑器设计的 - 您在本地运行hexo，用于<code>hexo-admin</code>创作帖子，然后使用<code>hexo generate</code>或<code>hexo deploy</code>将生成的静态HTML文件发送到github页面或其他静态服务器。</p><p>但是，<code>hexo-admin</code>只要您使用Heroku，DigitalOcean等非静态托管服务，就可以在您的实时博客上运行。静态托管服务（如Github页面和Surge.sh）不支持从以下位置运行hexo-admin：您的活网站。如果您使用的是直播博客中的Hexo管理员，则必须设置密码（请参阅下文） - 否则任何人都可以编辑您的内容。</p><p><img src="https://github.com/jaredly/hexo-admin/raw/master/docs/pasted-0.png?raw=true"></p><p><img src="https://github.com/jaredly/hexo-admin/raw/master/docs/pasted-1.png?raw=true"></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>（首先搭建好博客）</p><h3 id="1-安装Hexo-Admin插件"><a href="#1-安装Hexo-Admin插件" class="headerlink" title="1. 安装Hexo-Admin插件"></a>1. 安装Hexo-Admin插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd yourblog   #(xxxx.github.io目录)</span><br><span class="line">npm install --save hexo-admin  #安装Hexo-Admin插件</span><br><span class="line"></span><br><span class="line">#部署 调试，打开编辑页</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure><p>完成这步就可以在线编辑写文章发布了</p><p>2、设置密码，编辑Hexo<code>_config.yml</code>文件</p><p>打开 <a href="http://localhost:4000/admin/#/auth-setup">http://localhost:4000/admin/#/auth-setup</a></p><p>设置用户名，密码等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># hexo-admin authentification</span><br><span class="line">admin:</span><br><span class="line">  username: </span><br><span class="line">  password_hash:</span><br><span class="line">  secret:</span><br><span class="line">  deployCommand: &#x27;deploy.cmd&#x27;</span><br></pre></td></tr></table></figure><p>打开<a href="http://localhost:4000/admin/%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%BC%80%E9%9C%80%E8%A6%81%E6%AF%94%E8%BE%83%E9%95%BF%E7%9A%84%E6%97%B6%E9%97%B4">http://localhost:4000/admin/即可看到登录页面，第一次打开需要比较长的时间</a></p><p>3、在hexo博客目录下创建deploy.cmd文件。这个脚本的作用是渲染html、压缩html，css和js、部署文件到服务器端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">call hexo g</span><br><span class="line">call gulp</span><br><span class="line">call hexo d</span><br></pre></td></tr></table></figure><p>其它</p><p>升级版</p><p><a href="https://github.com/xbotao/hexo-admin-qiniu">https://github.com/xbotao/hexo-admin-qiniu</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac开发路径选择</title>
      <link href="/2017/02/13/shell%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BEfind%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/02/13/shell%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BEfind%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这条命令可以搜索Library文件夹中所有plist文件。<br>find 基本用法</p><p>常用的文件查找命令主要有locate和find。</p><p><code>find path -name &quot;(字符，可以用wildcard)&quot;</code></p><p>默认情况下搜寻<code>path</code>以及其所有子目录下的文件。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><code>find</code> 文件路径 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*蝙蝠侠*&quot;</span><br><span class="line"># 找出当前目录以及其所有子目录下所有名字中包含“蝙蝠侠”三字的文件</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.rmvb&quot; -maxdept 1</span><br><span class="line"># 找出当前目录（不包括子目录）下所有名字中后缀为&quot;.rmvb&quot;的文件</span><br><span class="line"></span><br><span class="line">find ~ -iname  &quot;screen*&quot;</span><br><span class="line">#在用户文件夹中搜索名字中包含screen的文件</span><br><span class="line"></span><br><span class="line"># find /etc -name &#x27;passwd&#x27;    ：表示匹配/etc目录下文件名为passwd的文件 </span><br><span class="line"># find /etc -name &#x27;passwd*&#x27;   ：表示匹配/etc目录下文件名中以passwd开头的文件 </span><br><span class="line"># find /etc -name &#x27;*passwd&#x27;   ：表示匹配/etc目录下文件名中以passwd结尾的文件 </span><br><span class="line"># find /etc -name &#x27;*passwd*&#x27;  ：表示匹配/etc目录下文件名中有passwd字符串的文件 </span><br></pre></td></tr></table></figure><p><strong>通过mdfind命令搜索文件</strong></p><p>mdfind -name 文件名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name &quot;Photo 1.PNG&quot;</span><br></pre></td></tr></table></figure><p>因为mdfind就是Spotlight功能的终端界面，你还可以使用mdfind寻找文件和文件夹的内容，比如通过以下命令寻找所有包含Will Pearson文字的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind &quot;Will Pearson&quot;</span><br></pre></td></tr></table></figure><p>mdfind命令还可以通过-onlyin参数搜索特定文件夹的内容，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -onlyin ~/Library plist</span><br></pre></td></tr></table></figure><p>这条命令可以搜索Library文件夹中所有plist文件。</p><p>搜索导出列表</p><p>sudo find &#x2F; -name *** &gt; Desktop&#x2F;find.txt</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用express创建自己第一个nodejs程序</title>
      <link href="/2017/02/10/%E4%BD%BF%E7%94%A8express%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%AC%AC%E4%B8%80%E4%B8%AAnodejs%E7%A8%8B%E5%BA%8F/"/>
      <url>/2017/02/10/%E4%BD%BF%E7%94%A8express%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%AC%AC%E4%B8%80%E4%B8%AAnodejs%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>1.安装Express</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure><p>说明：<code>express</code>是web框架</p><p>​<code>Express-generator</code> （Express 应用生成器）,通过该工具，可以快速创建一个express应用的骨架。</p><p>​    Express4.0+版后将<code>Express-generator</code>命令工具分离了，所以你必须安装<code>express-generator</code>才能生成express应用。</p><h5 id="2、创建项目基于express的项目"><a href="#2、创建项目基于express的项目" class="headerlink" title="2、创建项目基于express的项目"></a>2、创建项目基于express的项目</h5><p>使用命令进入创建文件夹的目录（~&#x2F;Documents&#x2F;iOSLive）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop //进入桌面</span><br><span class="line">express 项目名称 --view=ejs //创建app使用ejs模板-默认jade模板</span><br></pre></td></tr></table></figure><h5 id="3、node模块安装"><a href="#3、node模块安装" class="headerlink" title="3、node模块安装"></a>3、node模块安装</h5><p> 进入项目所在的目录下，执行命令npm install</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd package.json文件所在目录</span><br><span class="line">npm install   //安装依赖</span><br><span class="line">//若是想要加载其他模块，可在package.json中添加相应的信息</span><br></pre></td></tr></table></figure><h5 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start //或node ./bin/www</span><br></pre></td></tr></table></figure><p>浏览器输入<a href="http://127.0.0.1:3000/%E5%8F%AF%E7%9C%8B%E5%88%B0%60Welcome">http://127.0.0.1:3000/可看到`Welcome</a> to Express&#96;则表示成功。</p><h5 id="更多高级用法"><a href="#更多高级用法" class="headerlink" title="更多高级用法"></a>更多高级用法</h5><p><a href="http://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac">http://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac</a></p><p><a href="https://www.teakki.com/p/57dfa7fe3c20b02e90a0cfae">https://www.teakki.com/p/57dfa7fe3c20b02e90a0cfae</a></p><p><a href="https://itbilu.com/nodejs/npm/EJUJrGVsg.html">Express.js 创建Node.js Web应用</a></p><p><a href="https://www.zybuluo.com/XiangZhou/note/207341">https://www.zybuluo.com/XiangZhou/note/207341</a></p><p> <a href="http://jishu.y5y.com.cn/gamer_gyt/article/details/60151783">Node.js历险记之express框架入门篇</a></p><h5 id="Jade模板引擎教程"><a href="#Jade模板引擎教程" class="headerlink" title="Jade模板引擎教程"></a>Jade模板引擎教程</h5><p><a href="http://blog.jayself.com/2014/07/28/Jade/">http://blog.jayself.com/2014/07/28/Jade/</a></p><p><a href="http://cabins.github.io/2016/04/15/Jade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E6%95%99%E7%A8%8B/">http://cabins.github.io/2016/04/15/Jade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E6%95%99%E7%A8%8B/</a></p><p>天气demo</p><p><a href="http://a5566baga.cn/2017/02/15/Node-js%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E5%A4%A9%E6%B0%94%E7%9A%84%E6%9C%8D%E5%8A%A1/">http://a5566baga.cn/2017/02/15/Node-js%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E5%A4%A9%E6%B0%94%E7%9A%84%E6%9C%8D%E5%8A%A1/</a></p><p><a href="http://smallyard.cn/2015/11/04/tianqi/">http://smallyard.cn/2015/11/04/tianqi/</a></p><p><a href="http://wiliam.me/2016/12/22/20161222132357.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,VueJs,Mongodb运行环境教程(一)</a></p><p>Demo</p><p><a href="https://github.com/SilentSword69/website-demo/tree/master">https://github.com/SilentSword69/website-demo/tree/master</a></p><p><a href="https://github.com/popingpaul/movie">https://github.com/popingpaul/movie</a></p><h5 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h5><p>简要介绍 Bootstrap，以及如何下载、使用，还有基本模版和案例，等等。</p><p><a href="http://v3.bootcss.com/getting-started/">http://v3.bootcss.com/getting-started/</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用express创建自己第一个nodejs程序二</title>
      <link href="/2017/02/10/%E4%BD%BF%E7%94%A8express%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%AC%AC%E4%B8%80%E4%B8%AAnodejs%E7%A8%8B%E5%BA%8F%E4%BA%8C/"/>
      <url>/2017/02/10/%E4%BD%BF%E7%94%A8express%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%AC%AC%E4%B8%80%E4%B8%AAnodejs%E7%A8%8B%E5%BA%8F%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>一、添加和安装依赖</p><p><code>package.json</code>这个基本的JSON文件描述了我们的程序以及依赖，比如添加mongodb库，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;body-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.16.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cookie-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.4.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.14.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.11.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;morgan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;serve-favicon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mongodb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.2.31&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Note：如何使用npm 查询库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm view mongodb version  //mongodb库最新版本</span><br><span class="line">npm view mongodb versions //mongodb库所有版本号</span><br><span class="line">npm info mongodb  //mongodb库详细信息</span><br></pre></td></tr></table></figure><p>二、Mongodb创建数据库并读取数据</p><p>下载地址：<a href="http://www.mongodb.org/downloads">http://www.mongodb.org/downloads</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br><span class="line">mongod -version //验证是否安装了MongoDB</span><br></pre></td></tr></table></figure><p>使用robomongo连接数据库</p><p>下载：<a href="https://robomongo.org/download">https://robomongo.org/download</a></p><p>打开robomongo，创建<code>localhost:27017</code>连接并connect即可</p><p><a href="http://www.jianshu.com/p/99a92e077660">Node.js开发笔记-4:MAC安装 mongodb 以及可视化工具</a></p><p>加入数据库链接依赖，monk和mongoose都可以，具体看个人喜好，我选择了mongoose来操作数据，因为对数据库的一些基本操作mongoose也不是很复杂，以后深入学习也有一定的基础。</p><p><a href="https://codeday.me/bug/20170727/47313.html">https://codeday.me/bug/20170727/47313.html</a></p><p>monk轻量，简单。</p><p>mongoose定位在orm,相对复杂，功能更强。初学者建议使用monk，熟悉后可再用mongoose。</p><h5 id="三、mongoose安装与使用"><a href="#三、mongoose安装与使用" class="headerlink" title="三、mongoose安装与使用"></a>三、mongoose安装与使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose</span><br><span class="line">//建议app的依赖程序放在package.json包里，然后执行npm install安装</span><br></pre></td></tr></table></figure><p>1、创建一个db.js文件来连接数据库&#96;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引入mongoose模块*/</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>),</span><br><span class="line"><span class="variable constant_">DB_URL</span> = <span class="string">&#x27;mongodb://localhost:27017/mongoosesample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//mongoose.connection.openUri(&#x27;mongodb://localhost/test&#x27;)</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">openUri</span>(<span class="variable constant_">DB_URL</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 连接成功</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;connected&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection open to &#x27;</span> + <span class="variable constant_">DB_URL</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection error: &#x27;</span> + err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接断开</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;disconnected&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection disconnected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出mongoose对象　</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = mongoose;</span><br></pre></td></tr></table></figure><p>更多监听事件 <a href="http://mongoosejs.com/docs/api.html#connection_Connection">http://mongoosejs.com/docs/api.html#connection_Connection</a></p><p>验证是否连接成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node db.js</span><br></pre></td></tr></table></figure><p>输出<code>Mongoose connection open to mongodb://localhost:27017/mongoosesample</code>表示成功</p><p>2、创建一个含Schema的模型，命名为user.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**用户信息 */</span><br><span class="line">var mongoose = require(&#x27;./db.js&#x27;)</span><br><span class="line"></span><br><span class="line">//1、定义一个Schema，指定字段名和类型</span><br><span class="line">var UserSchema = new mongoose.Schema(&#123;</span><br><span class="line">  //用户账号-定义一个属性name，类型为String,required必须</span><br><span class="line">   username: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    userpwd: &#123; // 密码</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">  &#125;,</span><br><span class="line">logindate : &#123; type: Date&#125;              //最近登录时间</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//2、将该Schema发布为Model</span><br><span class="line">var userModel = mongoose.model(&#x27;User&#x27;,UserSchema);</span><br><span class="line"></span><br><span class="line">// 暴露接口,导出模型提供外部js文件引用</span><br><span class="line">module.exports = userModel;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://cnodejs.org/topic/504b4924e2b84515770103dd">Mongoose学习参考文档——基础篇</a></p><p>常用数据库操作</p><p>创建一个test.js文件做一些常用操作演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 1、引入`user`</span><br><span class="line">var User = require(&quot;./user.js&quot;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 插入</span><br><span class="line"> */</span><br><span class="line">function insert() &#123;</span><br><span class="line"></span><br><span class="line">    var user = new User(&#123;</span><br><span class="line">        username : &#x27;Tracy McGrady&#x27;,                 //用户账号</span><br><span class="line">        userpwd: &#x27;abcd&#x27;,                            //密码</span><br><span class="line">        userage: 37,                                //年龄</span><br><span class="line">        logindate : new Date()                      //最近登录时间</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    user.save(function (err, res) &#123;</span><br><span class="line"></span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.log(&quot;Error:&quot; + err);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            console.log(&quot;Res:&quot; + res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insert();</span><br></pre></td></tr></table></figure><p>其它操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">function update()&#123;</span><br><span class="line">    var wherestr = &#123;&#x27;username&#x27; : &#x27;Tracy McGrady&#x27;&#125;;</span><br><span class="line">    var updatestr = &#123;&#x27;userpwd&#x27;: &#x27;zzzz&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">    User.update(wherestr, updatestr, function(err, res)&#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.log(&quot;Error:&quot; + err);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            console.log(&quot;Res:&quot; + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function findByIdAndUpdate()&#123;</span><br><span class="line">    var id = &#x27;56f2558b2dd74855a345edb2&#x27;;</span><br><span class="line">    var updatestr = &#123;&#x27;userpwd&#x27;: &#x27;abcd&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">    User.findByIdAndUpdate(id, updatestr, function(err, res)&#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.log(&quot;Error:&quot; + err);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            console.log(&quot;Res:&quot; + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function del()&#123;</span><br><span class="line">    var wherestr = &#123;&#x27;username&#x27; : &#x27;Tracy McGrady&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">    User.remove(wherestr, function(err, res)&#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.log(&quot;Error:&quot; + err);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            console.log(&quot;Res:&quot; + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//update(); 更新</span><br><span class="line">//findByIdAndUpdate(); 根据_id更新</span><br><span class="line">//del(); 删除</span><br></pre></td></tr></table></figure><p>基本流程</p><ul><li>1、引入数据库连接，保证mongodb已经连接成功</li><li>2、引入模型（model）定义文件，即文档（表）结构定义</li><li>3、实例化UserModel，创建user实体</li><li>4、最后通过user实体对数据库进行操作，完成用户注册功能。</li></ul><p><a href="http://www.cnblogs.com/zhongweiv/p/mongoose.html">http://www.cnblogs.com/zhongweiv/p/mongoose.html</a></p><p><a href="https://i5ting.github.io/wechat-dev-with-nodejs/db/mongoose.html">https://i5ting.github.io/wechat-dev-with-nodejs/db/mongoose.html</a></p><p><strong>nodejs建立socket.io服务</strong></p><p>通过nodejs的http模块就可以方便的搭建websocket服务器环境，例如下面的代码：</p><h4 id="安装socket-io"><a href="#安装socket-io" class="headerlink" title="安装socket.io"></a>安装socket.io</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io</span><br></pre></td></tr></table></figure><p>官方示例<a href="https://socket.io/docs/server-api/">https://socket.io/docs/server-api/</a></p><p>socket.io+express多房间聊天应用<br><a href="http://www.jianshu.com/p/40d8bc17529f">http://www.jianshu.com/p/40d8bc17529f</a><br><a href="http://www.jianshu.com/p/4ea6fc68f5f8">利用socket.io+nodejs打造简单聊天室</a><br><a href="http://www.jianshu.com/p/6966f12284b5">第十二天 长连接(net和socket.io)</a><br><a href="http://js8.in/2011/09/29/%E5%9C%A8express%E5%92%8Csocket-io%E4%B8%AD%E4%BD%BF%E7%94%A8session/">在Express和Socket.IO中使用session</a><br><a href="http://www.moye.me/2015/01/02/node_socket-io/">基于Socket.IO 的私聊</a><br><a href="https://github.com/fengli12321/Socket.io-FLSocketIM-iOS">https://github.com/fengli12321/Socket.io-FLSocketIM-iOS</a><br><a href="https://github.com/HOWIE-CH/-You-guess-I-painted-_socket">https://github.com/HOWIE-CH/-You-guess-I-painted-_socket</a><br>SRSocket<br><a href="https://github.com/TheBloodElf/SocketIOChatDemo">https://github.com/TheBloodElf/SocketIOChatDemo</a><br><a href="https://github.com/jingtao910429/PomeloMessageCenterSocketIO">https://github.com/jingtao910429/PomeloMessageCenterSocketIO</a><br><a href="https://github.com/full-of-fire/Socket.IO_ChatDemo">https://github.com/full-of-fire/Socket.IO_ChatDemo</a><br><a href="https://github.com/saturngod/Socket.io-with-iOS">https://github.com/saturngod/Socket.io-with-iOS</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客导航</title>
      <link href="/2017/02/07/%E6%9E%81%E5%AE%A2%E5%AF%BC%E8%88%AA/"/>
      <url>/2017/02/07/%E6%9E%81%E5%AE%A2%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<p>专属程序的导航站</p><p><a href="http://www.gogeeks.cn/">http://www.gogeeks.cn/</a></p><p><a href="http://geek.animebz.com/">http://geek.animebz.com/</a></p><p><a href="http://www.c3z.cn/">http://www.c3z.cn/</a></p><p><a href="https://www.awesomes.cn/">https://www.awesomes.cn/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 极客导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell截图命令：screencapture</title>
      <link href="/2017/02/04/shell%E6%88%AA%E5%9B%BE%E5%91%BD%E4%BB%A4%EF%BC%9Ascreencapture/"/>
      <url>/2017/02/04/shell%E6%88%AA%E5%9B%BE%E5%91%BD%E4%BB%A4%EF%BC%9Ascreencapture/</url>
      
        <content type="html"><![CDATA[<p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screencapture -i test.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行后会调用系统默认的截图程序，也就是按<code>cmd-shift-4</code>出来的那个截图程序。截图完毕后，会保存到test.png中。</p><p><code>-i</code>模式默认是自由模式，按一下空格键，可以在自由模式和窗口模式间切换。按下control键，截图就不会保存到文件中，而是保存到剪贴板中。</p><p>screencapture命令的其他选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-c         强制截图保存到剪贴板而不是文件中</span><br><span class="line">-C         截图时保留光标（只在非交互模式下有效）</span><br><span class="line">-d         display errors to the user graphically（不知道啥意思）</span><br><span class="line">-i         交互模式截取屏幕。可以是选区或者是窗口。</span><br><span class="line">             control key - 截图保存到剪贴板</span><br><span class="line">             space key   - 在鼠标选区模式和窗口模式间切换</span><br><span class="line">             escape key  - 退出截图</span><br><span class="line">-m         只截取主显示器（-i模式下无效）</span><br><span class="line">-M         截图完毕后，会打开邮件客户端，图片就躺在邮件正文中</span><br><span class="line">-o         在窗口模式下，不截取窗口的阴影</span><br><span class="line">-P         截图完毕后，在图片预览中打开</span><br><span class="line">-s         只允许鼠标选择模式</span><br><span class="line">-S         窗口模式下，截取屏幕而不是窗口</span><br><span class="line">-t&lt;format&gt; 指定图片格式，模式是png。可选的有pdf, jpg, tiff等</span><br><span class="line">-T&lt;seconds&gt; 延时截取，默认为5秒。</span><br><span class="line">-w         只允许窗口截取模式</span><br><span class="line">-W         开始交互截取模式，默认为窗口模式（只是默认模式与-i不同）</span><br><span class="line">-x         不播放声效</span><br><span class="line">-a         do not include windows attached to selected windows（不懂）</span><br><span class="line">-r         不向图片中加入dpi信息</span><br><span class="line">-l&lt;windowid&gt; 抓取指定windowid的窗口截图</span><br><span class="line">-R&lt;x,y,w,h&gt; 抓取指定区域的截图</span><br><span class="line">-B&lt;bundleid&gt; 截图输出会被bundleid指出的程序打开</span><br></pre></td></tr></table></figure><p>cmd+shift+3：捕获整个屏幕</p><p>cmd+shift+4：捕获选择的区域</p><p>cmd+shift+4  再按space：捕获某个应用程序的窗口</p><p>如果在使用标准的截图快捷键的同时按下Control键，则不需要在桌面上生成文件，而是直接让图片进入剪贴板。</p><p>保存截图到桌面</p><p>按<code>Command＋shift＋4</code> 后 ,画一个抓取的区域，不要松开鼠标，接着</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 按住空格可以移动这个区域</span><br><span class="line">2. 按住 Shift后，将锁定X 或者 Y轴进行拖动</span><br><span class="line">3. 按住 Option后 将按照区域圆心进行放大.</span><br></pre></td></tr></table></figure><p>最后所有截图将直接显示在桌面上。</p><p>截图也可以在屏保的使用，操作如下</p><p>首先，进入“<code>系统偏好设置” -&gt; “桌面于屏幕保护” -&gt; “屏幕保护程序</code>”。选择你想截屏的屏幕保护，按住Command-Shift，然后点击“测试”按钮。</p><p>等屏幕保护开始运行后，不要松开<code>Command-Shift</code>键，再按照自己需求按3&#x2F;4键。一张屏幕保护的截屏就完成了。</p><p>这个可以应用到很多地方，发挥你的扩展思维吧~</p><p>默认截图文件名是中文的，如何截图文件名改成英文命名，文件名由两部分构成：前缀和时间戳。</p><p>首先来修改前缀。打开终端（可以在Spotlight中输入“Terminal”并点选“应用程序”右边的“终端”），输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture name Screenshot</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><p>将蓝色部分替换为任意所需的单词即可，例如“<code>Screenshot</code>”。要让前缀修改生效，需要重新启动系统。</p><p>如何弄掉阴影</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool true</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><p>恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool false</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Nginx服务器搭建</title>
      <link href="/2017/02/03/Mac%20Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/02/03/Mac%20Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>**1.使用<code>Homebrew</code>安装<code>Nginx**</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>出现<code>mkdir: /usr/local/var/log/nginx: Permission denied</code>问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R &quot;$USER&quot;:admin /usr/local</span><br><span class="line">或</span><br><span class="line">sudo chown -R &quot;$USER&quot;:admin /Library/Caches/Homebrew</span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions">http://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions</a></p><p><strong>2.启动Nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>然后在浏览器里输入<code>localhost:8080</code>，回车，出现<code>welcome to nginx</code>，说明成功</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><p><strong>安装Homebrew</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发者指南：从objectivec到Swift的学习</title>
      <link href="/2017/01/28/iOS%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8EObjective-C%E5%88%B0Swift%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/01/28/iOS%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8EObjective-C%E5%88%B0Swift%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>iOS开发者指南：从objectivec到Swift的学习【译】</p><p>原文 <a href="https://www.toptal.com/swift/from-objectivec-to-swift">https://www.toptal.com/swift/from-objectivec-to-swift</a></p><p>​     2008年，苹果宣布并发布了iPhone SDK 2.0。这一事件又引发了软件开发的又一次革命，诞生了一批新的开发者。他们现在被认可为iOS开发者。</p><p>其中许多开发者以前从未使用过objectivec，这是苹果公司向他们提出的第一个挑战。尽管不熟悉的语法和手动内存管理，但它是非常成功的，帮助成千上万的应用程序上架到App Store。每个版本中，Apple都不断改进objectivec，添加代码块blocks和常量，通过自动引用计数简化内存管理，以及许多指示现代编程语言的其他功能。</p><p>​经过6年对objectivec的改进和工作，苹果决定向开发者提出另一个挑战。 iOS开发者再一次需要学习一门新的编程语言：Swift。 Swift删除了不安全的指针管理，并引入了强大的新功能，同时保持与objectivec和C的交互。</p><p>​Swift 1.0已经是一个稳定而强大的开发平台，在未来几年肯定会以有趣的方式发展。开始探索这个新语言是一个完美的时刻，因为它显然是iOS开发的未来。</p><p>本教程的目的是让objectivec开发人员快速了解新的Swift语言特性，帮助您进行下一步，并在日常工作中使用Swift。我不会花太多时间来解释objectivec，我将假定您熟悉iOS开发。</p><h4 id="尝试使用Swift-VS-objectivec"><a href="#尝试使用Swift-VS-objectivec" class="headerlink" title="尝试使用Swift VS objectivec"></a>尝试使用Swift VS objectivec</h4><p>为了开始探索Swift，你需要做的就是从App Store下载Xcode，创建一个小程序来实验。本文中提到的所有示例都是这样完成的。</p><p>苹果的Swift主页是学习Swift编程的最佳参考。你会发现它是非常宝贵的，直到你完全按照Swift的发展速度，我相信你会经常回到这里。</p><h4 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h4><p>在Swift中声明变量是使用var关键字完成的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p>你会注意到两个变量x和s是不同的类型。 <code>x</code>是一个整数(Integer)，而<code>s</code>是一个字符串(String)。 Swift是一种类型安全的语言，它将从分配的值中推导出变量类型。如果你想让你的代码更具可读性，你可以选择注释变量的类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line">y <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>常量是相似的，但是用<code>let</code>而不是<code>var</code>声明它们。常量的值不需要在编译时知道，但是你必须给它赋值一次。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c1 <span class="operator">=</span> <span class="number">1</span>  <span class="comment">//在编译时已知的常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v <span class="operator">=</span> arc4random()</span><br><span class="line"><span class="keyword">let</span> c2 <span class="operator">=</span> v <span class="comment">// 只在运行时才知道的常量(Constant)</span></span><br></pre></td></tr></table></figure><p>顾名思义，它们是不可变的，所以下面的代码会导致编译时错误。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">c <span class="operator">=</span> <span class="number">3</span>        <span class="comment">// error Connot assign to value:&#x27;c&#x27; is a &#x27;let&#x27; constant</span></span><br></pre></td></tr></table></figure><p>其他类型也可以声明为常量。例如，下面的代码将数组声明为一个常量，如果您尝试修改任何元素，那么Swift编译器将报告一个错误：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 <span class="operator">=</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">arr2[<span class="number">0</span>] <span class="operator">=</span> <span class="number">8</span></span><br><span class="line">print (arr2)    <span class="comment">// [8, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a[<span class="number">0</span>] <span class="operator">=</span> <span class="number">5</span>    <span class="comment">// error Use of unresolved identifier &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="可选-Optionals-类型"><a href="#可选-Optionals-类型" class="headerlink" title="可选(Optionals)类型"></a>可选(Optionals)类型</h4><p>常量声明时需要初始化，变量需要在使用前初始化。 那么objectivec中<code>nil</code>等价在哪呢？ Swift引入了可选值。 可选的值可以有一个值或<code>nil</code>。 如果你看看下面的代码，你会注意到<code>x</code>被指定了一个2014的可选值。这意味着Swift编译器意识到x也可能是<code>nil</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="string">&quot;2014&quot;</span></span><br><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="type">Int</span>(s)</span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment">// Optional(2014)</span></span><br></pre></td></tr></table></figure><p>如果你在这个代码中进行了修改，并且把值<code>“abc”</code>赋值给<code>s</code>，而这个值不能被转换成Integer，你会注意到<code>x</code>现在是<code>nil</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="type">Int</span>(s)</span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment">// nil</span></span><br></pre></td></tr></table></figure><p> <code>Int()</code> 函数的返回类型是<code>Int</code>？，它是一个可选的<code>Int</code>。让我们试着在<code>x</code>上调用一个标准函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="type">Int</span>(<span class="string">&quot;2014&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x.successor()) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>编译器发出一个错误信号，因为x是可选的，可能是<code>nil</code>。我们必须首先测试<code>x</code>，并确保后继函数在实数上被调用，而不是<code>nil</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="type">Int</span>(<span class="string">&quot;2014&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> x <span class="operator">!=</span> <span class="literal">nil</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">print</span>(x<span class="operator">!</span>.successor())    <span class="comment">// 2015</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请注意，我们必须通过附加感叹号 (!)来解包<code>x</code><strong>。 当我们确定x包含一个值时，我们可以访问它。 否则，我们将得到一个运行时错误。 我们也可对Swift调用进行</strong>可选绑定</strong>，将可选变量转换为非可选变量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="string">&quot;123&quot;</span>.toInt()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> y <span class="operator">=</span> x</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">print</span>(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if语句中的代码只会在<code>x</code>有值时执行，并将其赋值给<code>y</code>。 请注意，我们不需要展开<code>y</code>，它的类型不是可选的，因为我们知道<code>x</code>不是<code>nil</code>。</p><p>苹果的Swift教程，阅读关于可选和新特性等更多细节</p><p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-XID_356">Optional Chaining</a></p><h4 id="字符串插值（拼接）"><a href="#字符串插值（拼接）" class="headerlink" title="字符串插值（拼接）"></a>字符串插值（拼接）</h4><p>在objectivec中，字符串通常用<code>stringWithFormat：</code>方法完成：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSString</span> <span class="operator">*</span>user <span class="operator">=</span> @<span class="string">&quot;Gabriel&quot;</span>;</span><br><span class="line">int days <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">NSString</span> <span class="operator">*</span>s <span class="operator">=</span> [<span class="type">NSString</span> stringWithFormat:@<span class="string">&quot;posted by %@ (%d days ago)&quot;</span>, user, days];</span><br></pre></td></tr></table></figure><p>您也可以使用表达式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> width <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> height <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> <span class="string">&quot;Area for square with sides <span class="subst">\(width)</span> and <span class="subst">\(height)</span> is <span class="subst">\(width<span class="operator">*</span>height)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>了解更多关于swift的字符串插值和其他新功能, <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/swift_programming_language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-XID_418">请点击这里 </a>。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>Swift中的函数定义与C不同。函数定义如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">someFunction</span>(<span class="params">s</span>:<span class="type">String</span>, <span class="params">i</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="operator">...</span>    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift函数是一流的类型。这意味着您可以将函数分配给变量，将它们作为参数传递给其他函数，或者使它们返回类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">stringLength</span>(<span class="params">s</span>:<span class="type">String</span>) -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> countElements(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">stringValue</span>(<span class="params">s</span>:<span class="type">String</span>) -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x <span class="operator">=</span> s.toInt()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">doSomething</span>(<span class="params">f</span>:<span class="type">String</span> -&gt; <span class="type">Int</span>, <span class="params">s</span>:<span class="type">String</span>) -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> f(s).successor()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f1 <span class="operator">=</span> stringLength</span><br><span class="line"><span class="keyword">let</span> f2 <span class="operator">=</span> stringValue</span><br><span class="line"></span><br><span class="line">doSomething(f1, <span class="string">&quot;123&quot;</span>)    <span class="comment">// 4</span></span><br><span class="line">doSomething(f2, <span class="string">&quot;123&quot;</span>)    <span class="comment">// 124</span></span><br></pre></td></tr></table></figure><p>同样，Swift推断f1和f2（String - &gt; Int）的类型，虽然我们可以明确地定义它们：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f1:<span class="type">String</span> -&gt; <span class="type">Int</span> <span class="operator">=</span> stringLength</span><br></pre></td></tr></table></figure><p>函数也可以返回其他函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">compareGreaterThan</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">&gt;</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">compareLessThan</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">&lt;</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">comparator</span>(<span class="params">greaterThan</span>:<span class="type">Bool</span>) -&gt; (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Bool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> greaterThan</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> compareGreaterThan</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> compareLessThan</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f <span class="operator">=</span> comparator(<span class="literal">true</span>)</span><br><span class="line">println(f(<span class="number">5</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure><p>Swift中的函数指南可以在<a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/swift_programming_language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_243">这里</a>找到。</p><h4 id="枚举（Enumerations）"><a href="#枚举（Enumerations）" class="headerlink" title="枚举（Enumerations）"></a>枚举（Enumerations）</h4><p>Swift中的枚举比objectivec中的枚举强大得多。 作为Swift的结构体(structs)，他们可以有方法，也可以传值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MobileDevice</span> : <span class="title class_ inherited__">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> iPhone <span class="operator">=</span> <span class="string">&quot;iPhone&quot;</span>, <span class="type">Android</span> <span class="operator">=</span> <span class="string">&quot;Android&quot;</span>, <span class="type">WP8</span> <span class="operator">=</span> <span class="string">&quot;Windows Phone8&quot;</span>, <span class="type">BB</span> <span class="operator">=</span> <span class="string">&quot;BlackBerry&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="type">String</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.toRaw()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> m <span class="operator">=</span> <span class="type">MobileDevice</span>.<span class="type">Android</span></span><br><span class="line"><span class="built_in">print</span>(m.name())    <span class="comment">// &quot;Android&quot;</span></span><br></pre></td></tr></table></figure><p>与objectivec不同，swift枚举可以为每个成员赋值字符串(Strings)，字符(characters)或浮点数(floats)，除了整数(integers)。<code>toraw()</code>方法很方便的返回分配给每个成员的值。</p><p>枚举也可以参数化:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Location</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Address</span>(street:<span class="type">String</span>, city:<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">LatLon</span>(lat:<span class="type">Float</span>, lon:<span class="type">Float</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">description</span>() -&gt; <span class="type">String</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Address</span>(street, city):</span><br><span class="line">            <span class="keyword">return</span> street <span class="operator">+</span> <span class="string">&quot;, &quot;</span> <span class="operator">+</span> city</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">LatLon</span>(lat, lon):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;(<span class="subst">\(lat)</span>, <span class="subst">\(lon)</span>)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loc1 <span class="operator">=</span> <span class="type">Location</span>.<span class="type">Address</span>(street: <span class="string">&quot;2070 Fell St&quot;</span>, city: <span class="string">&quot;San Francisco&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> loc2 <span class="operator">=</span> <span class="type">Location</span>.<span class="type">LatLon</span>(lat: <span class="number">23.117</span>, lon: <span class="number">45.899</span>)</span><br><span class="line"><span class="built_in">print</span>(loc1.description())        <span class="comment">// &quot;2070 Fell St, San Francisco&quot;</span></span><br><span class="line"><span class="built_in">print</span>(loc2.description())        <span class="comment">// &quot;(23.117, 45.988)&quot;</span></span><br></pre></td></tr></table></figure><p>更多关于枚举可用的信息 <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/swift_programming_language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-XID_223">在这里 </a>。</p><h4 id="元组（Tuples）"><a href="#元组（Tuples）" class="headerlink" title="元组（Tuples）"></a>元组（Tuples）</h4><p>元组将多个值组合为一个复合值。元组中的值可以是任何类型，不必是彼此相同的类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person <span class="operator">=</span> (<span class="string">&quot;Gabriel&quot;</span>, <span class="string">&quot;Kirkpatrick&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(person.<span class="number">0</span>) <span class="comment">// Gabriel</span></span><br></pre></td></tr></table></figure><p>你也可以命名单个的元组元素：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person <span class="operator">=</span> (first: <span class="string">&quot;Gabriel&quot;</span>, last: <span class="string">&quot;Kirkpatrick&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(person.first)</span><br></pre></td></tr></table></figure><p>元组对于需要返回多个值的函数返回类型非常方便：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">intDivision</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; (quotient: <span class="type">Int</span>, remainder: <span class="type">Int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (a<span class="operator">/</span>b, a<span class="operator">%</span>b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(intDivision(<span class="number">11</span>, <span class="number">3</span>))    <span class="comment">// (3, 2)</span></span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> intDivision(<span class="number">15</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(result.remainder)    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>不像objectivec，swift支持switch语句中的模式(pattern)匹配：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> complex <span class="operator">=</span> (<span class="number">2.0</span>, <span class="number">1.1</span>)    <span class="comment">// real and imaginary parts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> complex</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        println(<span class="string">&quot;Number is zero&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">_</span>, <span class="number">0</span>):</span><br><span class="line">        println(<span class="string">&quot;Number is real&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        println(<span class="string">&quot;Number is imaginary&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二种情况下，我们不关心数字的实际部分，所以我们使用<code>_</code>来匹配任何东西。您还可以检查每种情况下的附加条件。为此，我们需要将模式值绑定到常量：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> complex <span class="operator">=</span> (<span class="number">2.0</span>, <span class="number">1.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> complex</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        println(<span class="string">&quot;Number is zero&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">let</span> a, <span class="number">0</span>) <span class="keyword">where</span> a <span class="operator">&gt;</span> <span class="number">0</span>:</span><br><span class="line">        println(<span class="string">&quot;Number is real and positive&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">let</span> a, <span class="number">0</span>) <span class="keyword">where</span> a <span class="operator">&lt;</span> <span class="number">0</span>:</span><br><span class="line">        println(<span class="string">&quot;Number is real and negative&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> b) <span class="keyword">where</span> b <span class="operator">!=</span> <span class="number">0</span>:</span><br><span class="line">        println(<span class="string">&quot;Number has only imaginary part&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (a, b):</span><br><span class="line">        println(<span class="string">&quot;Number is imaginary with distance <span class="subst">\(a<span class="operator">*</span>a <span class="operator">+</span> b<span class="operator">*</span>b)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们只需要绑定我们要在比较或case语句中使用的值。阅读更多关于元组，<a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_483">点击这里</a>。</p><h4 id="类-Classes-和结构-Structures"><a href="#类-Classes-和结构-Structures" class="headerlink" title="类(Classes)和结构(Structures)"></a>类(Classes)和结构(Structures)</h4><p>与objectivec不同，swift不需要为自定义的类和结构创建单独的接口和实现文件。当你学习Swift，你将学会在一个单独的文件中定义一个类或者一个结构体，并且这个类或者结构体的外部接口被自动地提供给其他代码使用。</p><h3 id="定义类（Classes）"><a href="#定义类（Classes）" class="headerlink" title="定义类（Classes）"></a>定义类（Classes）</h3><p>类定义很简单:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> volume: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">description</span>() -&gt; <span class="type">String</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;This bottle has <span class="subst">\(volume)</span> ml&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="type">Bottle</span>()</span><br><span class="line"><span class="built_in">print</span>(b.description())</span><br></pre></td></tr></table></figure><p>正如你所看到的，声明(header)和实现(implementation)在同一个文件中。swift不再使用头文件和实现文件。让我们给我们的例子添加一个标签：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> volume: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line">   <span class="keyword">var</span> label:<span class="type">String</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">description</span>() -&gt; <span class="type">String</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;This bottle of <span class="subst">\(label)</span> has <span class="subst">\(volume)</span> ml&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会抱怨,因为是一个可选的变量标签和瓶时不会持有一个值实例化。 我们需要添加一个初始化程序:</p><p>编译器会抱怨，因为标签是一个非可选的变量，并且当一个Bottle被实例化时不会保存一个值。我们需要添加一个初始化程序(initializer)：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> volume: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line">   <span class="keyword">var</span> label:<span class="type">String</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">init</span>(<span class="params">label</span>:<span class="type">String</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">self</span>.label <span class="operator">=</span> label</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">description</span>() -&gt; <span class="type">String</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;This bottle of <span class="subst">\(label)</span> has <span class="subst">\(volume)</span> ml&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，我们可以使用可选类型的属性，它不会被初始化。在下面的例子中，我们将卷设为一个可选的整数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> volume: <span class="type">Int</span>?</span><br><span class="line">   <span class="keyword">var</span> label:<span class="type">String</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">init</span>(<span class="params">label</span>:<span class="type">String</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">self</span>.label <span class="operator">=</span> label</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">description</span>() -&gt; <span class="type">String</span></span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.volume <span class="operator">!=</span> <span class="literal">nil</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;This bottle of <span class="subst">\(label)</span> has <span class="subst">\(volume<span class="operator">!</span>)</span> ml&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;A bootle of <span class="subst">\(label)</span>&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构-Structures"><a href="#结构-Structures" class="headerlink" title="结构(Structures)"></a>结构(Structures)</h3><p>Swift语言也有 <code>结构体</code>,但是比objective - c更加灵活。 下面的代码教程定义了一个结构体：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Seat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> row: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> letter:<span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> (<span class="params">row</span>: <span class="type">Int</span>, <span class="params">letter</span>:<span class="type">String</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.row <span class="operator">=</span> row</span><br><span class="line">        <span class="keyword">self</span>.letter <span class="operator">=</span> letter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">description</span>() -&gt; <span class="type">String</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(row)</span>-<span class="subst">\(letter)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像swift中的类，结构可以有方法，属性，初始值设定项，并符合协议。类和结构之间的主要区别是类是通过引用传递的，而结构则是通过值传递的。</p><p>这个例子演示了通过引用传递类：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="type">Bottle</span>()</span><br><span class="line"><span class="built_in">print</span>(b.description())    <span class="comment">// &quot;b&quot; bottle has 1000 ml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b2 <span class="operator">=</span> b</span><br><span class="line">b.volume <span class="operator">=</span> <span class="number">750</span></span><br><span class="line"><span class="built_in">print</span>(b2.description())    <span class="comment">// &quot;b&quot; and &quot;b2&quot; bottles have 750 ml</span></span><br></pre></td></tr></table></figure><p>如果我们用struct来尝试类似的情况，你会注意到变量是按值传递的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 <span class="operator">=</span> <span class="type">Seat</span>(row: <span class="number">14</span>, letter:<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> s2 <span class="operator">=</span> s1</span><br><span class="line">s1.letter <span class="operator">=</span> <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1.description())    <span class="comment">// 14-B</span></span><br><span class="line"><span class="built_in">print</span>(s2.description())    <span class="comment">// 14-A</span></span><br></pre></td></tr></table></figure><p> 什么时候应该使用struct，什么时候应该使用class？</p><p>​       就像在objectivec和c中一样，当你需要对几个值进行分组时，使用结构体，并期望它们被复制而不是被引用。 例如，复数，，2d或3d点或RGB颜色。</p><p>​       一个类的实例传统上被称为对象。 然而，Swift类和结构在功能上比其他语言更接近，而且许多功能可以应用于类或结构类型的实例。 正因为如此，在Swift引用中使用的更一般的术语是实例(instance)，它适用于这两者中的任何一个。</p><h3 id="属性-Properties"><a href="#属性-Properties" class="headerlink" title="属性(Properties)"></a>属性(Properties)</h3><p>正如我们前面看到的，Swift中的属性在类或结构定义中用<code>var</code>关键字声明。 我们也可以用<code>let</code>语句声明常量。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FixedPointNumber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> digits: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> decimals: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n <span class="operator">=</span> <span class="type">FixedPointNumber</span>(digits: <span class="number">12345</span>, decimals: <span class="number">2</span>)</span><br><span class="line">n.digits <span class="operator">=</span> <span class="number">4567</span>    <span class="comment">// ok</span></span><br><span class="line">n.decimals <span class="operator">=</span> <span class="number">3</span>     <span class="comment">// error, decimals is a constant</span></span><br></pre></td></tr></table></figure><p>另外请记住，强类型属性是强引用的，除非用weak关键字作为前缀。 但是，有一些weak的非可选属性，所以请阅读苹果Swift指南中的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-XID_88">自动引用计数章节</a>。</p><h3 id="计算属性-Computed-Properties"><a href="#计算属性-Computed-Properties" class="headerlink" title="计算属性(Computed Properties)"></a>计算属性(Computed Properties)</h3><p>计算属性实际上并不存储一个值。 相反，它们提供了一个getter和一个可选的setter来间接检索和设置其他属性和值。</p><p>以下代码提供了一个计算<code>sign</code>值的示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Sign</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Positive</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Negative</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SomeNumber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> number:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> sign:<span class="type">Sign</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> number <span class="operator">&lt;</span> <span class="number">0</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Sign</span>.<span class="type">Negative</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Sign</span>.<span class="type">Positive</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> (newSign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (newSign <span class="operator">==</span> <span class="type">Sign</span>.<span class="type">Negative</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">self</span>.number <span class="operator">=</span> <span class="operator">-</span><span class="built_in">abs</span>(<span class="keyword">self</span>.number)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">self</span>.number <span class="operator">=</span> <span class="built_in">abs</span>(<span class="keyword">self</span>.number)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以通过执行一个getter来定义只读属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SomeNumber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> number:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> isEven:<span class="type">Bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> number <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在objectivec中，属性通常由一个实例变量持有，由编译器明确地声明或自动创建。 在Swift中，另一方面，一个属性没有相应的实例变量。 也就是说，属性的后备存储不能直接访问。 假设我们在objectivec中有这个</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .h</span></span><br><span class="line"><span class="meta">@interface</span> <span class="type">OnlyInitialString</span> : <span class="type">NSObject</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span>(strong) <span class="type">NSString</span> <span class="operator">*</span>string;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .m</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">OnlyInitialString</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (void)setString:(<span class="type">NSString</span> <span class="operator">*</span>newString)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (newString.length <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _string <span class="operator">=</span> [newString substringToIndex:<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _string <span class="operator">=</span> @<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure><p>因为在Swift中，计算属性没有后备存储，所以我们需要这样做：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OnlyInitialString</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> initial:<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> string:<span class="type">String</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> (newString)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> countElements(newString) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">self</span>.initial <span class="operator">=</span> newString.substringToIndex(advance(newString.startIndex, <span class="number">1</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">self</span>.initial <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.initial</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于属性更详细地解释 <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/swift_programming_language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-XID_368">在这里</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片无损压缩工具</title>
      <link href="/2016/12/28/Mac%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9_shell/"/>
      <url>/2016/12/28/Mac%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9_shell/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Mac-shell命令"><a href="#一、Mac-shell命令" class="headerlink" title="一、Mac shell命令"></a>一、Mac shell命令</h4><p>单张&#x2F;批量修改图片尺寸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sips -Z 640 *.jpg //批量 604*640</span><br><span class="line">sips -z 768 1024 example.png//单张 760*1024</span><br></pre></td></tr></table></figure><p>More From：<a href="http://www.ainotenshi.org/818/resizing-images-using-the-command-line">http://www.ainotenshi.org/818/resizing-images-using-the-command-line</a></p><p>图片格式转换</p><p>单张图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sips -s format [image <span class="built_in">type</span>] [file name] --out [output file]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sips -s format png test.jpg --out test.png</span></span><br></pre></td></tr></table></figure><p>批量转换,转换到当前目录中的一个新的Converted子文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span> i <span class="keyword">in</span> [filename]; <span class="keyword">do</span> sips -s format [image <span class="built_in">type</span>] <span class="variable">$i</span> --out [destination]/<span class="variable">$i</span>.[extension];<span class="keyword">done</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span> i <span class="keyword">in</span> *.jpeg; <span class="keyword">do</span> sips -s format png <span class="variable">$i</span> --out Converted/<span class="variable">$i</span>.png;<span class="keyword">done</span></span></span><br></pre></td></tr></table></figure><p>Mac应用</p><p><a href="https://imageoptim.com/mac">https://imageoptim.com/mac</a></p><p> <a href="https://medium.com/@yeong.crypto/optimizing-converting-images-8d10ae559586">https://medium.com/@yeong.crypto/optimizing-converting-images-8d10ae559586</a></p><p><a href="https://www.cnblogs.com/lhb25/p/12-best-image-compression-tools.html">https://www.cnblogs.com/lhb25/p/12-best-image-compression-tools.html</a></p><p><a href="https://www.uisdc.com/7-practical-compression-tool">图片压缩不求人7款超实用的压缩神器推荐</a></p><p><a href="http://zhengxiaoyong.me/2017/04/23/%E4%B9%9F%E8%B0%88%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/">也谈图片压缩</a></p><p><a href="https://www.jianshu.com/p/565e944bb594">在Mac上使用Google图片压缩工具Guetzli</a></p><h4 id="2、在线压缩"><a href="#2、在线压缩" class="headerlink" title="2、在线压缩"></a>2、在线压缩</h4><p>TinyPNG <a href="https://tinypng.com/">https://tinypng.com/</a> 【荐】</p><p><a href="https://goimg.io/">https://goimg.io/</a></p><p><strong>图好快</strong> <a href="http://www.tuhaokuai.com/">http://www.tuhaokuai.com/</a></p><p><a href="https://www.picdiet.com/">https://www.picdiet.com/</a></p><p><a href="https://compressionbear.com/">https://compressionbear.com/</a></p><p><a href="http://bigjpg.com/">http://bigjpg.com/</a></p><p><a href="http://isparta.github.io/index.html">http://isparta.github.io/index.html</a></p><p><strong>GIF压缩</strong></p><p>soogif <a href="http://www.soogif.com/compress">http://www.soogif.com/compress</a></p><p><a href="http://www.piggif.com/">http://www.piggif.com/</a></p><p><a href="https://ezgif.com/optimize">https://ezgif.com/optimize</a></p><p><a href="http://gifcompressor.com/zh/">http://gifcompressor.com/zh/</a></p><p><a href="https://shortpixel.com/online-image-compression">https://shortpixel.com/online-image-compression</a></p><p><a href="http://nullice.com/limitPNG/">http://nullice.com/limitPNG/</a></p><p><a href="https://github.com/leecade/imagine">https://github.com/leecade/imagine</a></p><p><a href="https://imageoptim.com/">https://imageoptim.com/</a></p><p><a href="http://imgonline.com.ua/eng/compress-image.php">http://imgonline.com.ua/eng/compress-image.php</a></p><p><a href="http://stackoverflow.com/questions/19153122/image-compression-tools-via-command-line">Image Compression tools via command line</a></p><p><a href="http://danielhordern.com/2014/os-x-compress-jpeg-images-via-the-command-line/">jpegoptim – the compression tool extraordinaire</a></p><p><a href="http://www.creativebloq.com/design/image-compression-tools-1132865">http://www.creativebloq.com/design/image-compression-tools-1132865</a></p><p><a href="https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick/">Efficient Image Resizing With ImageMagick</a></p><p><a href="http://www.jackenhack.com/image-compression-tools-web/">图像压缩JPEG工具对比</a></p><p><a href="https://www.zhihu.com/question/19779256/answer/226924316">图片无损压缩工具都有哪些？</a>【知乎】</p><p><a href="https://zhuanlan.zhihu.com/p/29803076">8 款免费的图片压缩服务 &amp; 工具推荐</a></p><p>开源工具</p><p><a href="https://github.com/saitjr/STTinyPNG-Python">https://github.com/saitjr/STTinyPNG-Python</a></p><p><a href="https://juejin.im/entry/587f14378d6d810058a18e1f">https://juejin.im/entry/587f14378d6d810058a18e1f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PingBox -Mac批量ping工具</title>
      <link href="/2016/12/22/PingBox%20-Mac%E6%89%B9%E9%87%8Fping%E5%B7%A5%E5%85%B7/"/>
      <url>/2016/12/22/PingBox%20-Mac%E6%89%B9%E9%87%8Fping%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><strong>PingBox</strong>是一款Mac平台小巧的批量Ping工具 ,允许Ping多个主机名和IP 地址的一个小工具, 并且可以在同一个显示器上观看结果。支持ping结果排序。</p><p><code>PS:</code>样式仿superping，由于superping免费版不支持多个IP，使用发现CPU占用率近100%，而Mac上又没有其它替代工具，所以自己写了个。并加入ping结果排序功能。CPU，内存，还是文件大小均很小。</p><p>如果有发现Bug或新的需求建议等欢迎反馈。</p><p>下载：<a href="http://pan.baidu.com/s/1slcYARV">http://pan.baidu.com/s/1slcYARV</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP开发接口数据模拟</title>
      <link href="/2016/12/18/APP%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/"/>
      <url>/2016/12/18/APP%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>测试API的模拟主要分以下2块</p><ul><li><strong>1.模拟服务器</strong> </li><li><strong>2.模拟测试数据</strong></li></ul><h3 id="一、模拟服务器解决方案"><a href="#一、模拟服务器解决方案" class="headerlink" title="一、模拟服务器解决方案"></a>一、模拟服务器解决方案</h3><h4 id="1）-使用Apache开启-Web-Server"><a href="#1）-使用Apache开启-Web-Server" class="headerlink" title="1）.使用Apache开启 Web Server"></a>1）.使用<code>Apache</code>开启 <code>Web Server</code></h4><p>Mac自己集成了<code>Python</code>和<code>Apache</code></p><p>启动：<code>sudo apachectl start</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">停止：sudo apachectl stop</span><br><span class="line">重启：sudo apachectl restart</span><br><span class="line">查看 Apache 版本： httpd -v</span><br></pre></td></tr></table></figure><p>浏览器打开 <a href="http://127.0.0.1/">http://127.0.0.1</a> 可以看到 <strong>It works!</strong> 的页面.</p><ol><li>使用本地回环测试地址<a href="http://127.0.0.1/">http://127.0.0.1</a></li><li>使用<a href="http://locahost/">http://locahost</a></li></ol><p>mac下Apache的默认文件夹为<code>/Library/WebServer/Documents</code></p><p>在该目录添加一个名为test.json文件</p><p>浏览器输入<a href="http://127.0.0.1/test">http://127.0.0.1/test</a> 即可看到test.json文件内容</p><p><strong>修改Apache目录</strong></p><p>以上说的有点杂，折腾很久还是出现<code>Forbidden You don&#39;t have permission to access / on this server.</code></p><p>　上面说到了mac下Apache的默认文件夹为<code>/Library/WebServer/Documents</code>，该目录默认是隐藏的，操作不是很方便，我们可以将其修改成自定义的目录。</p><ul><li><strong>1.1</strong>、打开终端，输入命令：<code>sudo vim /etc/apache2/httpd.conf</code></li></ul><p>也可以找到<code>httpd.conf</code>文件进行编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /etc/apache2   <span class="comment">#进入文件夹</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">open .    <span class="comment">#打开文件夹</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>1.2</strong>、找到如下两处</li></ul><p>　　<code>DocumentRoot &quot;/Library/WebServer/Documents&quot;</code><br>　　<code>&lt;Directory &quot;/Library/WebServer/Documents&quot;&gt;</code></p><ul><li><strong>1.3</strong>、将两处中引号中的目录替换为自定义的目录，如”<code>/Library/apacheWeb</code>“</li></ul><p>完成以上三步后，重启Apache，浏览器输入<a href="http://127.0.0.1/">http://127.0.0.1</a></p><p><code>Forbidden You don&#39;t have permission to access / on this server.</code></p><p>这个折腾了好久，修改权限<code>sudo chmod -R 777 apacheWeb</code>也不行，灵机一动把<code>/Library/WebServer/Documents</code>目录中的<code>index.html.en</code>文件拷贝到自定义的目录，<code>sudo  apachectl restart</code> 后就可以看到 <strong>It works!</strong> 的页面！</p><p>访问某一文件如：<a href="http://127.0.0.1/db">http://127.0.0.1/db</a></p><p><strong>其它修改方式参考</strong></p><p><a href="http://www.saitjr.com/php/php-mac-yosemite-locahost-path.html">Mac 下修改 PHP 本地服务器路径</a></p><p><a href="http://www.jianshu.com/p/baa1102490eb">mac 升级后配置 apache 到个人目录</a></p><h4 id="2）-使用Python开启-Web-Server"><a href="#2）-使用Python开启-Web-Server" class="headerlink" title="2）.使用Python开启 Web Server"></a>2）.使用Python开启 <code>Web Server</code></h4><p>相比Apache更简单不需要改本地服务器路径，随便进入一个目录即可开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -m SimpleHTTPServer  <span class="comment">#默认8000端口</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -m SimpleHTTPServer 8080    <span class="comment">#指定端口为8080</span></span></span><br></pre></td></tr></table></figure><p><code>python</code>会以当前目录作为根目录起一个本地server, 访问<code>localhost:8000</code>就可以看到效果了。</p><h4 id="3）使用Node-js-模拟服务器"><a href="#3）使用Node-js-模拟服务器" class="headerlink" title="3）使用Node.js 模拟服务器"></a>3）使用Node.js 模拟服务器</h4><h5 id="3-1-json-server"><a href="#3-1-json-server" class="headerlink" title="3.1 json-server"></a><strong>3.1</strong> <a href="https://github.com/typicode/json-server">json-server</a></h5><p>3.1.1、全局<code>json-server</code>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> npm install json-server -g</span></span><br></pre></td></tr></table></figure><p>安装完成后可以用 <code>json-server -h</code> 命令检查是否安装成功，成功后会出现帮助命令选项。</p><p>3.1.2.启动server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>  ~/Desktop/mock <span class="comment">#进入db.js文件目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">json-server --watch db.json    <span class="comment">#启动监听服务,当然也可以监听js,json，text，md等文本文件</span></span></span><br></pre></td></tr></table></figure><p>如果成功会出现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\&#123;^_^&#125;/ hi!</span><br><span class="line">&#123;xxx: &#x27;xxx&#x27;&#125;</span><br><span class="line"> Home</span><br><span class="line"> http://localhost:3000</span><br></pre></td></tr></table></figure><p><code>json-server</code>启动默认端口为3000；</p><p>这个时候访问 <a href="http://localhost:3000/db%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%89%80%E5%AE%9A%E4%B9%89%E7%9A%84%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%E3%80%82">http://localhost:3000/db可以查看所定义的全部数据。</a></p><p>更多：<a href="http://fnpyud.com/2016/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E4%B8%8B%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/">前后端分离下的接口数据模拟</a></p><p>3.2 <strong>使用http-server搭建静态服务器</strong></p><p>1.安装http-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure><p>2.启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http-server -a 127.0.0.1#默认端口8080</span><br><span class="line">http-server -a 127.0.0.1 -p 9999#指定端口9999</span><br></pre></td></tr></table></figure><p>更多：<a href="https://www.npmjs.com/package/http-server">https://www.npmjs.com/package/http-server</a></p><h5 id="3-2-ohana"><a href="#3-2-ohana" class="headerlink" title="3.2 ohana"></a>3.2 <a href="https://github.com/Allenice/ohana">ohana</a></h5><p><code>ohana</code> 是一个返回模拟 json 数据的 node http 服务器，默认集成了 mockjs 生成动态的 json 数据，支持 POST, GET, PUT, DELETE 四种请求。</p><p><strong>特点：</strong></p><ul><li><p>使用 mockjs 生成 json 数据</p></li><li><p>支持路由规则</p></li><li><p>可跨域访问</p><p>如何使用：</p><p>作者主页<a href="http://blog.allenice233.com/2014/12/01/ohana-node-server/">http://blog.allenice233.com/2014/12/01/ohana-node-server/</a></p></li></ul><p>常用web服务器框架</p><ul><li><a href="http://expressjs.com/">express</a></li><li><a href="http://hapijs.com/">hapi</a></li><li><a href="http://koajs.com/">koa</a></li><li><a href="http://restify.com/">restify</a></li></ul><p>开源项目：</p><ul><li><p><a href="https://github.com/kliuj/local-ajax-api">local-ajax-api</a></p></li><li><p><a href="https://github.com/hanan198501/imitator">imitator</a></p></li><li><p><a href="https://www.npmjs.com/package/esky-mock">esky-mock</a></p></li><li><p><a href="https://www.npmjs.com/package/aspserver">aspserver</a>  帮助快速搭建一个服务器，并自动拥有目录浏览等功能。</p></li><li><p><a href="https://github.com/fieteam/fie-plugin-mock">fie-plugin-mock</a></p><p>以上是个人使用过的一些库，还有更多好用的库可以在<a href="https://www.npmjs.com中搜索/">https://www.npmjs.com中搜索</a></p><p>​</p></li></ul><h3 id="二、模拟数据生成"><a href="#二、模拟数据生成" class="headerlink" title="二、模拟数据生成"></a>二、模拟数据生成</h3><h5 id="1-常用node-js数据模拟库"><a href="#1-常用node-js数据模拟库" class="headerlink" title="1.常用node.js数据模拟库"></a>1.常用node.js数据模拟库</h5><p><a href="https://github.com/marak/Faker.js/">faker.js</a></p><p><a href="http://mockjs.com/">mock.js</a></p><h5 id="2-生成模拟-JSON-在线工具"><a href="#2-生成模拟-JSON-在线工具" class="headerlink" title="2.生成模拟 JSON 在线工具:"></a>2.生成模拟 JSON 在线工具:</h5><ul><li><p><a href="http://www.json-generator.com/">JSON Generator</a></p></li><li><p><a href="https://www.mockaroo.com/">Mockaroo</a></p><p>​</p></li></ul><h5 id="3-JSON-API-在线模拟工具"><a href="#3-JSON-API-在线模拟工具" class="headerlink" title="3.JSON API 在线模拟工具:"></a>3.JSON API 在线模拟工具:</h5><ul><li><p><a href="http://www.mocky.io/">Mocky</a></p></li><li><p><a href="http://www.jsonohyeah.com/">jsonohyeah</a></p></li><li><p><a href="http://jsonplaceholder.typicode.com/">JSONPlaceholder</a></p></li><li><p><a href="https://www.mockable.io/">mockable.io</a></p></li><li><p><a href="http://www.filltext.com/">FillText.com</a></p><p>​</p><p>商业化方案</p><ul><li><a href="http://apizza.cc/?f=lv">http://apizza.cc/?f=lv</a></li><li><a href="https://apiary.io/">https://apiary.io/</a></li><li><a href="http://www.easyapi.com/">http://www.easyapi.com/</a></li><li><a href="http://mock-api.com/">http://mock-api.com/</a></li><li><a href="https://www.xgllseo.com/%20http://rap.taobao.org/org/index.do"> http://rap.taobao.org/org/index.do</a></li></ul></li></ul><h5 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h5><ul><li>使用 <a href="http://www.charlesproxy.com/">charles</a>作为代理服务器</li><li>使用代理服务器的 map（映射）&amp; rewrite（重写）功能</li></ul><p><strong>示例代码：</strong></p><p><code>mock.js</code> 生成模拟数据，其它如json-server，koa，express等直接引用生成的数据就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Mock 保存为mock_users.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateCustomers</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> total=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> customers = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> id = <span class="number">0</span>; id &lt; total; id++) &#123;</span><br><span class="line"><span class="keyword">var</span> firstName =<span class="title class_">Random</span>.<span class="title function_">cname</span>();</span><br><span class="line"><span class="keyword">var</span> email =<span class="title class_">Random</span>.<span class="title function_">email</span>(<span class="string">&quot;pconline.com.cn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gender = <span class="title class_">Random</span>.<span class="title function_">pick</span>([<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>]);</span><br><span class="line">customers.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: id,</span><br><span class="line"><span class="string">&quot;first_name&quot;</span>: firstName,</span><br><span class="line"><span class="string">&quot;Gender&quot;</span>: gender,</span><br><span class="line"><span class="string">&#x27;email&#x27;</span>: email,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123; <span class="string">&quot;customers&quot;</span>: customers&#125;)</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="string">&quot;customers&quot;</span>: customers,</span><br><span class="line"><span class="string">&quot;stateCode&quot;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line"><span class="string">&quot;total&quot;</span>:<span class="string">&quot;85&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">generateCustomers</span>());<span class="comment">//转换为json字符格式,在服务器端直接解析req.body  </span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">mockJson</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jsonData;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">mockJson2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">generateCustomers</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">mockJsonTest</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span>  &#123;<span class="string">&quot;customers&quot;</span>:<span class="string">&quot;hello world&quot;</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用<code>json-server</code>模拟http server</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存为 jsonserverMockAPI.js</span></span><br><span class="line"><span class="keyword">var</span> customUser = <span class="built_in">require</span>(<span class="string">&#x27;./mock_users2.js&#x27;</span>);<span class="comment">//引入模拟数据js文件</span></span><br><span class="line"><span class="comment">// 如果你要用json-server的话，就需要export这个生成fake data的function</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//var jsonData = JSON.stringify(generateCustomers2());//转换为json字符格式,在服务器端直接解析req.body  </span></span><br><span class="line"><span class="keyword">return</span> customUser.<span class="title function_">mockJson3</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行服务 <code>json-server --watch jsonserverMockAPI.js</code></p><p>使用<code>express</code>模拟http server</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存为 expressMockAPI.js</span></span><br><span class="line"><span class="comment">// 引入 `express` 模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用 express 实例</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> customUser = <span class="built_in">require</span>(<span class="string">&#x27;./mock_users.js&#x27;</span>);<span class="comment">//引入模拟数据js文件</span></span><br><span class="line"><span class="comment">//console.log( &#x27;生成模拟数据\n&#x27; + customUser.mockJson());</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonData1 = customUser.<span class="title function_">mockJson</span>();<span class="comment">//转换为json字符格式,在服务器端直接解析req.body  </span></span><br><span class="line"><span class="comment">// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。</span></span><br><span class="line"><span class="comment">// req和res是reques和response的缩写</span></span><br><span class="line"><span class="keyword">var</span> jsonData = customUser.<span class="title function_">mockJson2</span>();<span class="comment">//转换为json字符格式,在服务器端直接解析req.body  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">res.<span class="title function_">contentType</span>(<span class="string">&#x27;json&#x27;</span>);<span class="comment">//返回的数据类型  </span></span><br><span class="line">res.<span class="title function_">send</span>(jsonData);<span class="comment">//给客户端返回一个json格式的数据  </span></span><br><span class="line">res.<span class="title function_">end</span>();  </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 监听本地的 3000 端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听3000端口&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>express服务器启动 <code>$ node expressMockAPI.js</code></p><p>使用<code>koa</code>模拟http server</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存为如：KoaMockAPI001.js</span></span><br><span class="line"><span class="comment">//使用教程 https://cnodejs.org/topic/5709959abc564eaf3c6a48c8 </span></span><br><span class="line"><span class="keyword">var</span> customUser = <span class="built_in">require</span>(<span class="string">&#x27;./mock_users.js&#x27;</span>);<span class="comment">//引入模拟数据js文件</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;生成模拟数据\n&#x27;</span> + customUser.<span class="title function_">mockJson</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="comment">// 此处开始堆叠各种中间件</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">ctx.<span class="property">body</span> = customUser.<span class="title function_">mockJson</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>如何自动化</p><p>可以用如<code>nodemon</code> 去启动你的 express</p><p> <a href="https://github.com/remy/nodemon">https://github.com/remy/nodemon</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts:"></a>Related Posts:</h3><ul><li><p><a href="http://www.cnblogs.com/lewo/p/mock-json-server-install.html">用JSON-server模拟REST API(一) 安装运行系列</a></p></li><li><p><a href="http://blog.allenice233.com/2014/12/01/ohana-node-server/">ohana - 一个返回模拟 json 数据的 node http server</a></p></li><li><p><a href="https://cnodejs.org/topic/5021c2cff767cc9a51e684e3">forever让NodeJs应用后台执行</a></p></li><li><p><a href="https://www.zhihu.com/question/23010264">网站后台要做客户端API接口，接口文档如何写?</a>  知乎</p><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoLayout 库</title>
      <link href="/2016/12/02/AutoLayout/"/>
      <url>/2016/12/02/AutoLayout/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/robertmryan/autolayout-category">https://github.com/robertmryan/autolayout-category</a></p><p><a href="https://github.com/danramteke/DRAutolayout">https://github.com/danramteke/DRAutolayout</a></p><p><a href="https://github.com/robotmedia/Lyt">https://github.com/robotmedia/Lyt</a></p><p><a href="https://github.com/mobitar/AutolayoutHelpers">https://github.com/mobitar/AutolayoutHelpers</a></p><p><a href="https://github.com/HomeSchoolDev/MAConstraint">https://github.com/HomeSchoolDev/MAConstraint</a></p><p><a href="https://github.com/codesourse/autolayout">https://github.com/codesourse/autolayout</a></p><p><a href="https://github.com/yaole/AutoLayout">https://github.com/yaole/AutoLayout</a></p><p><a href="https://github.com/yaoqi-github/AutoLayout">https://github.com/yaoqi-github/AutoLayout</a></p><p> 插入广告</p><p><a href="http://stackoverflow.com/questions/142282/how-do-i-tell-if-a-uiview-is-visible-and-on-screen">http://stackoverflow.com/questions/142282/how-do-i-tell-if-a-uiview-is-visible-and-on-screen</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code</title>
      <link href="/2016/11/28/Visual%20Studio%20Code%20/"/>
      <url>/2016/11/28/Visual%20Studio%20Code%20/</url>
      
        <content type="html"><![CDATA[<p><code>fn+F1</code> 或 <code>⌘+Shift+P</code>: 打开命令面板。</p><p><a href="https://lzw.me/a/vscode-visual-studio-code-shortcut.html">https://lzw.me/a/vscode-visual-studio-code-shortcut.html</a></p><p>将ctr键换成⌘键</p><p><a href="https://www.zhihu.com/question/40640654">Visual Studio Code有哪些你常用的插件？</a></p><p>插件</p><p><strong>Live HTML Previewer</strong></p><p>html快捷键预览：</p><p>command+Q   F 全屏</p><p>command+Q   S 边栏</p><p><code>⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘⌘</code></p>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 终端下运行shell/applescript等脚本Permission denied问题</title>
      <link href="/2016/11/18/mac%20%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BF%90%E8%A1%8Cshell:applescript%E7%AD%89%E8%84%9A%E6%9C%ACPermission%20denied%E9%97%AE%E9%A2%98/"/>
      <url>/2016/11/18/mac%20%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BF%90%E8%A1%8Cshell:applescript%E7%AD%89%E8%84%9A%E6%9C%ACPermission%20denied%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>运行脚本</strong></p><p>1、写好自己的 脚本，比如aa.sh </p><p>2、打开终端 执行，方法一： 输入命令    .&#x2F;aa.sh     ,方法二：直接把 aa.sh 拖入到终端里面。</p><p><strong>Permission denied问题</strong></p><p>修改该文件aa.sh 的权限 ：使用命令： <code>chmod 777 aa.sh</code> 。</p><p>或<code>sudo chmod 755 &#39;filename&#39;</code>   <code>chmod a+x ./&#39;filename&#39;</code></p><p>然后再执行 上面第二步的操作 就 OK .</p><p><strong>批量修改</strong></p><p>如果有N多个文件，或者文件夹，如何批量修改呢？答案是使用chmod -R 777  [FolderName]（中括号里是你的文件夹名，实际输入不包括中括号</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App开发目录结构参考</title>
      <link href="/2016/11/14/App%E5%BC%80%E5%8F%91%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%82%E8%80%83/"/>
      <url>/2016/11/14/App%E5%BC%80%E5%8F%91%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%82%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.samirchen.com/ios-project-structure/">http://www.samirchen.com/ios-project-structure/</a></p><p><a href="http://www.jianshu.com/p/2fb4dd080aef">iOS架构师之路：工程文件组织结构设计</a></p><p><a href="http://www.jianshu.com/p/77a948bcbc38">iOS 项目的目录结构能看出你的开发经验</a></p><p><a href="http://mtydev.net/2014/12/18/%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B(%E4%B8%80)%EF%BC%8DiOS%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E5%8F%8A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/">http://mtydev.net/2014/12/18/%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B(%E4%B8%80)%EF%BC%8DiOS%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E5%8F%8A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</a></p><p><a href="http://sun_tongsheng.coding.me/iOS/iOS/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%9E%B6%E6%9E%84/iOS%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/">http://sun_tongsheng.coding.me/iOS/iOS/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%9E%B6%E6%9E%84/iOS%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/</a></p><p><a href="https://www.zhihu.com/question/26664772">https://www.zhihu.com/question/26664772</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ThirdParty（第三方类 / 库）　　</span><br><span class="line">|- UMessage　　　</span><br><span class="line">    |- UMessage.h　　</span><br><span class="line">    |- ...　</span><br><span class="line"> Utils（工具类）　　</span><br><span class="line"> |-Network（网络工具，比如 HTTP、Socket 封装等）　</span><br><span class="line"> |- UI（UI 工具，封装一些动画等）　　　　</span><br><span class="line"> |- FLUIUtils.h　　</span><br><span class="line"> |- ...　</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字闪烁效果</title>
      <link href="/2016/11/12/%E6%96%87%E5%AD%97%E9%97%AA%E7%83%81%E6%95%88%E6%9E%9C/"/>
      <url>/2016/11/12/%E6%96%87%E5%AD%97%E9%97%AA%E7%83%81%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="http://qa.helplib.com/523867">http://qa.helplib.com/523867</a></p><p><a href="http://www.devtalking.com/articles/calayer-animation-gradient-animation/">http://www.devtalking.com/articles/calayer-animation-gradient-animation/</a></p><p> <a href="https://github.com/spagosx/iOS-Glowing-Label">https://github.com/spagosx/iOS-Glowing-Label</a></p><p><a href="https://github.com/GabrielMassana/GM_FSHighlightAnimationAdditions">https://github.com/GabrielMassana/GM_FSHighlightAnimationAdditions</a></p><p><a href="http://stackoverflow.com/questions/438046/iphone-slide-to-unlock-animation">http://stackoverflow.com/questions/438046/iphone-slide-to-unlock-animation</a></p><p><a href="https://github.com/jhurray/AnimatedLabelExample">https://github.com/jhurray/AnimatedLabelExample</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS谓词NSPredicate 筛选过滤</title>
      <link href="/2016/11/04/NSPredicate%20%E7%AD%9B%E9%80%89%E8%BF%87%E6%BB%A4/"/>
      <url>/2016/11/04/NSPredicate%20%E7%AD%9B%E9%80%89%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>NSPredicate 筛选过滤</p><p>基本用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.创建NSPredicate（相当于创建一个过滤条件）</span><br><span class="line">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;过滤条件&quot;];</span><br><span class="line"></span><br><span class="line">2.判断指定的对象是否满足NSPredicate创建的过滤条件</span><br><span class="line">[predicate evaluateWithObject:person];</span><br><span class="line"></span><br><span class="line">3.过滤出符合条件的对象（返回所有符合条件的对象）</span><br><span class="line">NSArray *persons = [array filteredArrayUsingPredicate:predicate];</span><br></pre></td></tr></table></figure><p><code>+predicateWithFormat:来实际创建谓词。</code>可以使用单引号，双引号需要进行转义</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本的查询</span></span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate;</span><br><span class="line"><span class="comment">//方法一：</span></span><br><span class="line">predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;name == &#x27;Herbie&#x27;&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line">predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;name == %@&quot;</span>, <span class="string">@&quot;Herbie&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：%K表示key</span></span><br><span class="line">predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;%K == %@&quot;</span>, <span class="string">@&quot;name&quot;</span>, <span class="string">@&quot;Herbie&quot;</span>];</span><br><span class="line"><span class="type">BOOL</span> match = [predicate evaluateWithObject:car];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, (match) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以上为对象属性匹配，如果数组中都是字符串如何匹配－－<span class="keyword">self</span></span><br><span class="line"><span class="built_in">NSArray</span> *array=[<span class="built_in">NSArray</span> arrayWithObjects: <span class="string">@&quot;abc&quot;</span>, <span class="string">@&quot;def&quot;</span>, <span class="string">@&quot;ghi&quot;</span>,<span class="string">@&quot;jkl&quot;</span>, <span class="literal">nil</span> <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSPredicate</span> *pre = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF==&#x27;abc&#x27;&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *array2 = [array filteredArrayUsingPredicate:pre];</span><br></pre></td></tr></table></figure><h5 id="1-比较运算符"><a href="#1-比较运算符" class="headerlink" title="1.比较运算符(&gt;,&lt;,&#x3D;&#x3D;,&gt;&#x3D;,&lt;&#x3D;,!&#x3D;)"></a>1.比较运算符(&gt;,&lt;,&#x3D;&#x3D;,&gt;&#x3D;,&lt;&#x3D;,!&#x3D;)</h5><p>可用于数值及字符串 例：@”number &gt; 100”</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>,@<span class="number">5</span>,@<span class="number">2</span>,@<span class="number">6</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF &gt;4&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *fliterArray = [array filteredArrayUsingPredicate:predicate];</span><br><span class="line">[fliterArray enumerateObjectsWithOptions:<span class="built_in">NSEnumerationConcurrent</span> usingBlock:^(<span class="type">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;fliterArray = %@&quot;</span>,obj);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h5 id="2、运算符"><a href="#2、运算符" class="headerlink" title="2、运算符"></a>2、运算符</h5><h5 id="比较和逻辑运算符"><a href="#比较和逻辑运算符" class="headerlink" title="比较和逻辑运算符"></a>比较和逻辑运算符</h5><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D; (&#x3D;&gt;)</td><td>大于或等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D; (&#x3D;&lt;)</td><td>小于或等于</td></tr><tr><td>!&#x3D; (&lt;&gt;)</td><td>不等于</td></tr></tbody></table><p>括号和逻辑运算AND、OR、NOT或者C样式的等效表达式&amp;&amp;、||、!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//输出完整的信息，在整个数组里寻找匹配的结果</span><br><span class="line">predicate = [NSPredicate predicateWithFormat:@&quot;age &gt; 100&quot;];</span><br><span class="line">NSArray *results = [self.cars filteredArrayUsingPredicate: predicate];</span><br><span class="line">NSLog (@&quot;%@&quot;, results);</span><br><span class="line"></span><br><span class="line">//谓词字符窜还支持C语言中一些常用的运算符</span><br><span class="line">predicate = [NSPredicate predicateWithFormat:@&quot;(age &gt; 50) AND (age &lt; 100)&quot;];</span><br><span class="line">results = [self.cars filteredArrayUsingPredicate: predicate];</span><br><span class="line">NSLog (@&quot;C语言中一些常用的运算符~~~~~~~%@&quot;, results);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//比较字符串的大小</span><br><span class="line">predicate = [NSPredicate predicateWithFormat:@&quot;name &lt; &#x27;Newton&#x27;&quot;];</span><br></pre></td></tr></table></figure><h6 id="2-1-范围运算符-IN、BETWEEN"><a href="#2-1-范围运算符-IN、BETWEEN" class="headerlink" title="2.1.范围运算符(IN、BETWEEN)"></a>2.1.范围运算符(IN、BETWEEN)</h6><p>@”number BETWEEN {1,5}” @”address IN {‘shanghai’,’beijing’}”</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>,@<span class="number">5</span>,@<span class="number">2</span>,@<span class="number">6</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF in &#123;2,5&#125;&quot;</span>]; <span class="comment">//找到 in 的意思是array中&#123;2,5&#125;的元素</span></span><br><span class="line"><span class="comment">//NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF BETWEEN &#123;2,5&#125;&quot;];</span></span><br><span class="line"><span class="built_in">NSArray</span> *fliterArray = [array filteredArrayUsingPredicate:predicate];</span><br><span class="line">[fliterArray enumerateObjectsWithOptions:<span class="built_in">NSEnumerationConcurrent</span> usingBlock:^(<span class="type">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;fliterArray = %@&quot;</span>,obj);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h5 id="3-字符串本身-SELF"><a href="#3-字符串本身-SELF" class="headerlink" title="3.字符串本身(SELF)"></a>3.字符串本身(SELF)</h5><blockquote><p>类似于SQL语句<br>NOT 不是<br>SELF 代表字符串本身<br>IN 范围运算符<br>那么NOT (SELF IN %@) 意思就是：不是这里所指定的字符串的值</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *placeArray = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;Shanghai&quot;</span>,<span class="string">@&quot;Hangzhou&quot;</span>,<span class="string">@&quot;Beijing&quot;</span>,<span class="string">@&quot;Macao&quot;</span>,<span class="string">@&quot;Taishan&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF == &#x27;Beijing&#x27;&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *tempArray = [placeArray filteredArrayUsingPredicate:predicate];</span><br><span class="line">[tempArray enumerateObjectsUsingBlock:^(<span class="type">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;obj == %@&quot;</span>,obj);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSPredicate</span> * filterPredicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:@”NOT (SELF IN %@)”,filteredArray];</span><br><span class="line"><span class="comment">//    //过滤数组</span></span><br><span class="line"><span class="built_in">NSArray</span> * reslutFilteredArray = [dataArray filteredArrayUsingPredicate:filterPredicate];</span><br><span class="line"><span class="built_in">NSLog</span>(@”Reslut Filtered Array = %@”,reslutFilteredArray);</span><br></pre></td></tr></table></figure><h5 id="4字符串相关（BEGINSWITH、ENDSWITH、CONTAINS）"><a href="#4字符串相关（BEGINSWITH、ENDSWITH、CONTAINS）" class="headerlink" title="4字符串相关（BEGINSWITH、ENDSWITH、CONTAINS）"></a>4字符串相关（BEGINSWITH、ENDSWITH、CONTAINS）</h5><blockquote><p>@”name CONTAIN[cd] ‘ang’”   &#x2F;&#x2F;包含某个字符串<br>@”name BEGINSWITH[c] ‘sh’”     &#x2F;&#x2F;以某个字符串开头<br>@”name ENDSWITH[d] ‘ang’”      &#x2F;&#x2F;以某个字符串结束</p></blockquote><p><code>注:[c]不区分大小写[d]不区分发音符号即没有重音符号[cd]既不区分大小写，也不区分发音符号。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSArray *placeArray = [NSArray arrayWithObjects:@&quot;Shanghai&quot;,@&quot;Hangzhou&quot;,@&quot;Beijing&quot;,@&quot;Macao&quot;,@&quot;Taishan&quot;, nil];</span><br><span class="line">//    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF CONTAINS [cd] &#x27;an&#x27; &quot;];</span><br><span class="line">    NSPredicate *predicate1 = [NSPredicate predicateWithFormat:@&quot;SELF Beginswith [cd] &#x27;sh&#x27; &quot;];</span><br><span class="line"> NSArray *tempArray = [placeArray filteredArrayUsingPredicate:predicate1];</span><br><span class="line">    [tempArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">        NSLog(@&quot;obj == %@&quot;,obj);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h5 id="5通配符：LIKE"><a href="#5通配符：LIKE" class="headerlink" title="5通配符：LIKE"></a>5通配符：LIKE</h5><blockquote><p>@”name LIKE[cd] ‘er’” &#x2F;&#x2F;代表通配符,Like也接受[cd]. @”name LIKE[cd] ‘???er’”</p><p>“*”：表示任意多个字符匹配</p><p>“?”：表示一个字符匹配</p></blockquote><figure class="highlight plaintext"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSArray *placeArray = [NSArray arrayWithObjects:@&quot;Shanghai&quot;,@&quot;Hangzhou&quot;,@&quot;Beijing&quot;,@&quot;Macao&quot;,@&quot;Taishan&quot;, nil];</span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF  like &#x27;*ai*&#x27; &quot;];</span><br><span class="line"></span><br><span class="line">NSArray *tempArray = [placeArray filteredArrayUsingPredicate:predicate];</span><br><span class="line">[tempArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">    NSLog(@&quot;obj == %@&quot;,obj);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h5 id="6正则表达式"><a href="#6正则表达式" class="headerlink" title="6正则表达式"></a>6正则表达式</h5><p>MATCHES例：</p><p>NSString *regex &#x3D; @”^A.+e$”; &#x2F;&#x2F;以A开头，e结尾</p><p> @”name MATCHES %@”,regex (还是用于其他的正则表达式)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NSString *regex = @&quot;^A.+e$&quot;;   //以A开头，e结尾  @&quot;name MATCHES %@&quot;,regex</span><br><span class="line">  NSPredicate *presdicate =[NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];</span><br><span class="line">  NSString *content = @&quot;Alkdjflse&quot;;</span><br><span class="line"> BOOL result = [presdicate evaluateWithObject:content];</span><br><span class="line">  NSLog(@&quot;%d&quot;,result);</span><br><span class="line"></span><br><span class="line"> NSPredicate *exists = [NSPredicate predicateWithFormat:</span><br><span class="line">                         @&quot;%K MATCHES[c] %@&quot;, key, value];</span><br></pre></td></tr></table></figure><p>其它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 判断首个字符是否为字母</span><br><span class="line">- (BOOL)isStartWithWord &#123;</span><br><span class="line">  NSString *regex = @&quot;[A-Za-z]+&quot;;</span><br><span class="line">  NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];</span><br><span class="line">  return [predicate evaluateWithObject:aString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//用户名是否为字母和数字组成</span><br><span class="line">- (BOOL)isUserName</span><br><span class="line">&#123;</span><br><span class="line">  NSString *regex = @&quot;(^[A-Za-z0-9]&#123;3,20&#125;$)&quot;;</span><br><span class="line">  NSPredicate *pred = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];</span><br><span class="line">  return [pred evaluateWithObject:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//密码是否合法</span><br><span class="line">NSString *regex = @&quot;(^[A-Za-z0-9]&#123;6,20&#125;$)&quot;;</span><br><span class="line">//邮箱是否合法</span><br><span class="line">NSString *regex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;;</span><br><span class="line">//url是否合法</span><br><span class="line">NSString *regex = @&quot;http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- .\\/?%&amp;=]*)?&quot;;</span><br></pre></td></tr></table></figure><p>多规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isTelephone</span><br><span class="line">&#123;</span><br><span class="line">    NSString * MOBILE = @&quot;^1(3[0-9]|5[0-35-9]|8[025-9])\\d&#123;8&#125;$&quot;;</span><br><span class="line">    NSString * CM = @&quot;^1(34[0-8]|(3[5-9]|5[017-9]|8[278])\\d)\\d&#123;7&#125;$&quot;;</span><br><span class="line">    NSString * CU = @&quot;^1(3[0-2]|5[256]|8[56])\\d&#123;8&#125;$&quot;;</span><br><span class="line">    NSString * CT = @&quot;^1((33|53|8[09])[0-9]|349)\\d&#123;7&#125;$&quot;;</span><br><span class="line">    NSString * PHS = @&quot;^0(10|2[0-5789]|\\d&#123;3&#125;)\\d&#123;7,8&#125;$&quot;;</span><br><span class="line">    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, MOBILE];</span><br><span class="line">    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CM];</span><br><span class="line">    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CU];</span><br><span class="line">    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CT];</span><br><span class="line">    NSPredicate *regextestphs = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, PHS];</span><br><span class="line"></span><br><span class="line">    return  [regextestmobile evaluateWithObject:self]   ||</span><br><span class="line">            [regextestphs evaluateWithObject:self]      ||</span><br><span class="line">            [regextestct evaluateWithObject:self]       ||</span><br><span class="line">            [regextestcu evaluateWithObject:self]       ||</span><br><span class="line">            [regextestcm evaluateWithObject:self];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>查询字字典，模型属性</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 字符串中查出保函某个字节</span></span><br><span class="line">   <span class="built_in">NSArray</span>  *array =@[<span class="string">@&quot;123&quot;</span>, <span class="string">@&quot;234&quot;</span> , <span class="string">@&quot;345&quot;</span>];</span><br><span class="line">   <span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF contains [cd] %@&quot;</span>, <span class="string">&quot;2&quot;</span>];</span><br><span class="line">   <span class="built_in">NSArray</span> *filterdArray1 = [array filteredArrayUsingPredicate:predicate];</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, filterdArray1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.查找封装model对象的数组，根据model的一个属性</span></span><br><span class="line">   <span class="built_in">NSPredicate</span> *predicate2 = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;fileName == %@&quot;</span>, <span class="string">&quot;Ansel&quot;</span>];</span><br><span class="line">   <span class="built_in">NSArray</span> *filteredArray2 = [array filteredArrayUsingPredicate:predicate2];</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;filteredArray2：%@&quot;</span>, filteredArray2);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.查询数组中字典莫一个Key的值</span></span><br><span class="line">   <span class="built_in">NSArray</span> *array3 = @[ @&#123; <span class="string">@&quot;lastName&quot;</span> : <span class="string">@&quot;Turner&quot;</span> &#125;,</span><br><span class="line">                        @&#123; <span class="string">@&quot;firstName&quot;</span> : <span class="string">@&quot;Ben&quot;</span>, <span class="string">@&quot;lastName&quot;</span> : <span class="string">@&quot;Ballard&quot;</span>,</span><br><span class="line">                           <span class="string">@&quot;birthday&quot;</span>: <span class="string">@&quot;1972-03-24 10:45:32 +0600&quot;</span></span><br><span class="line">                           &#125;</span><br><span class="line">                   ];</span><br><span class="line">   <span class="built_in">NSPredicate</span> *predicate3 =</span><br><span class="line">   [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;firstName like %@&quot;</span>, <span class="string">@&quot;firstName&quot;</span>];</span><br><span class="line">   <span class="built_in">NSArray</span> *filteredArray3 = [array3 filteredArrayUsingPredicate:predicate3];</span><br></pre></td></tr></table></figure><p>谓词去重</p><figure class="highlight plaintext"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NSMutableSet *seenDates = [NSMutableSet set];</span><br><span class="line">NSPredicate *dupDatesPred = [NSPredicate predicateWithBlock: ^BOOL(id obj, NSDictionary *bind) &#123;</span><br><span class="line">    Event *e = (Event*)obj;</span><br><span class="line">    BOOL seen = [seenDates containsObject:e.date];</span><br><span class="line">    if (!seen) &#123;</span><br><span class="line">        [seenDates addObject:e.date];</span><br><span class="line">    &#125;</span><br><span class="line">    return !seen;</span><br><span class="line">&#125;];</span><br><span class="line">NSArray *events = ... // This is your array which needs to be filtered</span><br><span class="line">NSArray *filtered = [events filteredArrayUsingPredicate:dupDatesPred];</span><br></pre></td></tr></table></figure><p>参考文档</p><p><a href="http://nshipster.cn/nspredicate/">http://nshipster.cn/nspredicate/</a></p><p><a href="https://stackoverflow.com/questions/805547/how-to-sort-an-nsmutablearray-with-custom-objects-in-it?rq=1">https://stackoverflow.com/questions/805547/how-to-sort-an-nsmutablearray-with-custom-objects-in-it?rq=1</a></p><p><a href="https://stackoverflow.com/questions/111866/best-way-to-remove-from-nsmutablearray-while-iterating?rq=1">https://stackoverflow.com/questions/111866/best-way-to-remove-from-nsmutablearray-while-iterating?rq=1</a></p><p><a href="https://stackoverflow.com/questions/19373936/how-do-i-get-unique-values-from-an-array%E3%80%81">https://stackoverflow.com/questions/19373936/how-do-i-get-unique-values-from-an-array、</a></p><p><a href="https://stackoverflow.com/questions/1025674/the-best-way-to-remove-duplicate-values-from-nsmutablearray-in-objectivec">https://stackoverflow.com/questions/1025674/the-best-way-to-remove-duplicate-values-from-nsmutablearray-in-objectivec</a></p><p><a href="https://stackoverflow.com/questions/4007427/removing-duplicates-from-array-in-objectivec">https://stackoverflow.com/questions/4007427/removing-duplicates-from-array-in-objectivec</a></p><p><a href="https://stackoverflow.com/questions/19865936/finding-a-duplicate-numbers-in-an-array-and-then-counting-the-number-of-duplicat">https://stackoverflow.com/questions/19865936/finding-a-duplicate-numbers-in-an-array-and-then-counting-the-number-of-duplicat</a></p><p><a href="https://stackoverflow.com/questions/5978574/removing-duplicates-from-nsmutablearray">https://stackoverflow.com/questions/5978574/removing-duplicates-from-nsmutablearray</a></p><p><a href="https://stackoverflow.com/questions/20909709/removing-duplicate-profiles-loaded-from-an-xml-file-using-nspredicate">https://stackoverflow.com/questions/20909709/removing-duplicate-profiles-loaded-from-an-xml-file-using-nspredicate</a></p><p><a href="https://stackoverflow.com/questions/43798167/to-get-duplicate-as-well-as-original-items-from-an-array-in-ios">https://stackoverflow.com/questions/43798167/to-get-duplicate-as-well-as-original-items-from-an-array-in-ios</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alfred web搜索配置</title>
      <link href="/2016/11/03/Alfred%20web%E6%90%9C%E7%B4%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/11/03/Alfred%20web%E6%90%9C%E7%B4%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="http://alfredtips.com/s/popular/1/">http://alfredtips.com/s/popular/1/</a></p><p><a href="https://www.google.com.hk/#q={query}+site:stackoverflow.com">https://www.google.com.hk/#q={query}+site:stackoverflow.com</a><br><a href="https://www.google.com.hk/#q={query}+site:github.com">https://www.google.com.hk/#q={query}+site:github.com</a></p><p><a href="http://blog.okeyang.com/blog/2015/07/15/alfredpei-zhi/">http://blog.okeyang.com/blog/2015/07/15/alfredpei-zhi/</a></p><p><a href="http://www.alfredforum.com/forum/3-share-your-workflows/">http://www.alfredforum.com/forum/3-share-your-workflows/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">百度：<span class="attr">https</span>:<span class="comment">//www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;ch=&amp;tn=baiduerr&amp;bar=&amp;wd=&#123;query&#125;</span></span><br><span class="line">简书：<span class="attr">http</span>:<span class="comment">//www.jianshu.com/search?utf8=%E2%9C%93&amp;q=&#123;query&#125;</span></span><br><span class="line">淘宝：<span class="attr">http</span>:<span class="comment">//s.taobao.com/search?oe=utf-8&amp;f=8&amp;q=&#123;query&#125;</span></span><br><span class="line">京东：<span class="attr">http</span>:<span class="comment">//search.360buy.com/Search?keyword=&#123;query&#125;&amp;enc=utf-8&amp;area=15</span></span><br><span class="line">微信文章：<span class="attr">http</span>:<span class="comment">//weixin.sogou.com/weixin?type=2&amp;query=&#123;query&#125;</span></span><br><span class="line">stackoverflow：<span class="attr">http</span>:<span class="comment">//www.stackoverflow.com/search?q=&#123;query&#125;</span></span><br><span class="line">github：<span class="attr">https</span>:<span class="comment">//github.com/search?utf8=%E2%9C%93&amp;q=&#123;query&#125;</span></span><br><span class="line">maven：<span class="attr">http</span>:<span class="comment">//mvnrepository.com/search?q=&#123;query&#125;</span></span><br><span class="line"><span class="title class_">Android</span> <span class="variable constant_">API</span> <span class="title class_">Search</span>：<span class="attr">https</span>:<span class="comment">//developer.android.com/reference/classes.html#q=&#123;query&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读helloworld</title>
      <link href="/2016/11/03/essayHelloworld/"/>
      <url>/2016/11/03/essayHelloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阅读helloworld</title>
      <link href="/2016/11/03/liveHelloworld/"/>
      <url>/2016/11/03/liveHelloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello Mac</title>
      <link href="/2016/11/03/macHelloworld/"/>
      <url>/2016/11/03/macHelloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      <categories>
          
          <category> macapp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>essay1</title>
      <link href="/2016/11/03/readHelloworld/"/>
      <url>/2016/11/03/readHelloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell命令- Mac上的home目录（用户主目录）在哪里呢？</title>
      <link href="/2016/11/01/shell%E5%91%BD%E4%BB%A4-%20Mac%E4%B8%8A%E7%9A%84home%E7%9B%AE%E5%BD%95%EF%BC%88%E7%94%A8%E6%88%B7%E4%B8%BB%E7%9B%AE%E5%BD%95%EF%BC%89%E5%9C%A8%E5%93%AA%E9%87%8C%E5%91%A2%EF%BC%9F/"/>
      <url>/2016/11/01/shell%E5%91%BD%E4%BB%A4-%20Mac%E4%B8%8A%E7%9A%84home%E7%9B%AE%E5%BD%95%EF%BC%88%E7%94%A8%E6%88%B7%E4%B8%BB%E7%9B%AE%E5%BD%95%EF%BC%89%E5%9C%A8%E5%93%AA%E9%87%8C%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">or</span><br><span class="line">//在 cd 中可以使用 ~ 来表示主目录，例如：</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">查看HOME目录</span><br><span class="line">echo $HOME</span><br><span class="line">open . </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AppleScript笔记</title>
      <link href="/2016/10/09/AppleScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/10/09/AppleScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取输入框文本</span></span><br><span class="line">set dialogString to  &quot;请输入&quot;</span><br><span class="line">set returnedString to display dialog dialogString default answer &quot;&quot;</span><br><span class="line">set yourInputText to the text returned of returnedString</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印<span class="built_in">log</span></span></span><br><span class="line">display dialog returnedNumber</span><br><span class="line">log returnedNumber</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">字符串链接</span></span><br><span class="line">set str1 to &quot;hello&quot;</span><br><span class="line">set str2 to &quot;world&quot;</span><br><span class="line">set str3 to str1 &amp; &quot;, &quot; &amp; str1</span><br><span class="line">display dialog str3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择打开文件夹</span></span><br><span class="line">set FolderPath to (choose folder) -- sets file path to folder you select</span><br><span class="line">display dialog FolderPath as text</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">tell application <span class="string">&quot;Finder&quot;</span> to open FolderPath--打开文件</span></span><br><span class="line">tell application &quot;Finder&quot; to reveal FolderPath--在文件夹中显示</span><br></pre></td></tr></table></figure><p><strong>do shell script in AppleScript</strong></p><p><a href="https://developer.apple.com/library/content/technotes/tn2065/_index.html">https://developer.apple.com/library/content/technotes/tn2065/_index.html</a></p><p>系列参考教程</p><p><a href="http://blog.csdn.net/jymn_chen/article/details/19755895">AppleScript学习笔记（一）初识AppleScript</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display dialog &quot;请输入&quot; default answer linefeed</span><br><span class="line"></span><br><span class="line">display dialog &quot;What is your name?&quot; default answer &quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">set dialogString to &quot;Input a number here&quot;</span><br><span class="line"></span><br><span class="line">set returnedString to display dialog dialogString default answer &quot;&quot;</span><br><span class="line"></span><br><span class="line">set returnedNumber to the text returned of returnedString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try</span><br><span class="line"></span><br><span class="line">set returnedNumber to returnedNumber as number</span><br><span class="line"></span><br><span class="line">set calNumber to returnedNumber * 100</span><br><span class="line"></span><br><span class="line">﻿  display dialog calNumber</span><br><span class="line"></span><br><span class="line">on error the error_message number the error_number</span><br><span class="line"></span><br><span class="line">display dialog &quot;Error:&quot; &amp; the error_number &amp; &quot; Details:&quot; &amp; the error_message</span><br><span class="line"></span><br><span class="line">end try</span><br><span class="line"></span><br><span class="line">beep</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AppleScrips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AppleScrips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS常用计算</title>
      <link href="/2016/10/01/iOS%20%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97/"/>
      <url>/2016/10/01/iOS%20%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/2912779/how-to-calculate-a-point-with-an-given-center-angle-and-radius">How to calculate a point with an given center, angle and radius?</a></p><p><a href="http://stackoverflow.com/questions/27759116/ios-derive-angle-of-tap-point-given-a-circle">iOS: derive angle of tap point given a circle</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define   DEGREES_TO_RADIANS(degrees)  ((pi * degrees)/ 180)  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 手势之滑动清屏等</title>
      <link href="/2016/09/30/iOS%20%E6%89%8B%E5%8A%BF%E4%B9%8B%E6%BB%91%E5%8A%A8%E6%B8%85%E5%B1%8F%E7%AD%89/"/>
      <url>/2016/09/30/iOS%20%E6%89%8B%E5%8A%BF%E4%B9%8B%E6%BB%91%E5%8A%A8%E6%B8%85%E5%B1%8F%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p><code>translationInView</code>:（获取当前拖拽位置）<br><code>translationInView</code> 返回父视图系统当中，返回横坐标，纵坐标上拖动了多少像素</p><p>可以判断拖动方向</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGPoint</span> translantion = [<span class="built_in">UIPanGestureRecognizer</span> translationInView:<span class="built_in">UIView</span>];</span><br><span class="line">ABS(translantion.x)/ABS(translantion.y) &gt; <span class="number">1</span></span><br><span class="line"><span class="comment">//即判断是否水平移动(x轴拖动距离大于y轴拖动距离)</span></span><br></pre></td></tr></table></figure><p><code>velocityInView</code>:（设置拖拽速度，单位：像素&#x2F;秒）<br><code>velocityInView</code> 返回指定坐标系统当中拖动的速度，x,y分别代表x轴y轴的拖动速度(矢量)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGPoint</span> velocity = [<span class="built_in">UIPanGestureRecognizer</span> velocityInView:<span class="built_in">UIView</span>];</span><br><span class="line">velocity.x &gt; <span class="number">0</span> <span class="comment">//向右 x,y正负值 判断上下左右</span></span><br></pre></td></tr></table></figure><p>实例应用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举值，包含水平移动方向和垂直移动方向</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, PanDirection)&#123;</span><br><span class="line">    PanDirectionHorizontalMoved, <span class="comment">//横向移动</span></span><br><span class="line">    PanDirectionVerticalMoved    <span class="comment">//纵向移动</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PanDirection panDirection;</span><br><span class="line">- (<span class="type">void</span>)panGestureOnMainVC2:(<span class="built_in">UIPanGestureRecognizer</span> *)sender&#123;</span><br><span class="line">    <span class="keyword">if</span> (sender.numberOfTouches == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;手指离开屏幕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据在view上Pan的位置，确定是跳音量、亮度</span></span><br><span class="line">    <span class="comment">// CGPoint locationPoint = [pan locationInView:self];</span></span><br><span class="line">    <span class="comment">// 我们要响应水平移动和垂直移动</span></span><br><span class="line">    <span class="comment">// 根据上次和本次移动的位置，算出一个速率的point</span></span><br><span class="line">    <span class="built_in">CGPoint</span> veloctyPoint = [sender velocityInView:<span class="keyword">self</span>.view];</span><br><span class="line">    <span class="built_in">CGPoint</span> transPoint = [sender translationInView:<span class="keyword">self</span>.view];</span><br><span class="line">    <span class="keyword">switch</span> (sender.state) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>:&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;x:%f  y:%f   aaa:%f,bbb:%f&quot;</span>,veloctyPoint.x, veloctyPoint.y,transPoint.x,transPoint.y);</span><br><span class="line">            <span class="comment">// 使用绝对值来判断移动的方向</span></span><br><span class="line">            <span class="built_in">CGFloat</span> x = fabs(veloctyPoint.x);</span><br><span class="line">            <span class="built_in">CGFloat</span> y = fabs(veloctyPoint.y);</span><br><span class="line">            <span class="keyword">if</span> (x &gt; y) &#123; <span class="comment">// 水平移动</span></span><br><span class="line">                panDirection = PanDirectionHorizontalMoved;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x &lt; y)&#123; <span class="comment">// 垂直移动</span></span><br><span class="line">                panDirection = PanDirectionVerticalMoved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>:&#123;</span><br><span class="line">            <span class="keyword">switch</span> (panDirection) &#123;</span><br><span class="line">                <span class="keyword">case</span> PanDirectionHorizontalMoved:&#123;</span><br><span class="line"></span><br><span class="line">                    [<span class="keyword">self</span> horizontalMoved:veloctyPoint.x]; <span class="comment">// 水平移动的方法只要x方向的值</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> PanDirectionVerticalMoved:&#123;</span><br><span class="line">                    [<span class="keyword">self</span> verticalMoved:veloctyPoint.y]; <span class="comment">// 垂直移动方法只要y方向的值</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:&#123;</span><br><span class="line">            <span class="comment">// 移动结束也需要判断垂直或者平移</span></span><br><span class="line">            <span class="comment">// 比如水平移动结束时，要快进到指定位置，如果这里没有判断，当我们调节音量完之后，会出现屏幕跳动的bug</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;UIGestureRecognizerStateEnded&quot;</span>);</span><br><span class="line">            <span class="keyword">switch</span> (panDirection) &#123;</span><br><span class="line">                <span class="keyword">case</span> PanDirectionHorizontalMoved:&#123;<span class="comment">//快进结束</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> PanDirectionVerticalMoved:&#123; <span class="comment">//垂直移动结束后，隐藏音量控件 且，把状态改为不再控制音量</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置最小滑动距离，相比用屏幕宽度*0.5为或滑动方向为标准判断是否清屏体验要好。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *bottomView;</span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor=[<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIView</span> *panview =[[<span class="built_in">UIView</span> alloc]initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">    panview.backgroundColor=[<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:panview];</span><br><span class="line">    bottomView=panview;</span><br><span class="line">    [<span class="keyword">self</span>.view addGestureRecognizer:[[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureOnMainVC:)]];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark---滑动清屏幕功能</span></span><br><span class="line"><span class="comment">//最小滑动间距</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> MIN_SPACE_VALUE= <span class="number">50.0</span>;</span><br><span class="line">-(<span class="type">void</span>)panGestureOnMainVC:(<span class="built_in">UIPanGestureRecognizer</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  获取平移值(//这个是获取手指从初始位置移动的偏移量)</span></span><br><span class="line">    <span class="built_in">CGPoint</span> translation = [sender translationInView:<span class="keyword">self</span>.view];</span><br><span class="line">    <span class="keyword">if</span> (sender.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIView</span> *panView= bottomView;</span><br><span class="line">    panView.transform = <span class="built_in">CGAffineTransformTranslate</span>(panView.transform, translation.x, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零移动叠加</span></span><br><span class="line">    <span class="comment">//再把形变设置为0，不然会因为不断调用这个方法，值会不断叠加，，</span></span><br><span class="line">    <span class="comment">//例如从0 - 3的距离应该只移动3，但是却变1+2+3 = 6，移动了6的距离</span></span><br><span class="line">    [sender setTranslation:<span class="built_in">CGPointZero</span> inView:<span class="keyword">self</span>.view];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取右边极限位置</span></span><br><span class="line">    <span class="built_in">CGAffineTransform</span>  rightScopeTransform=<span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="keyword">self</span>.view.frame.size.width, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//右边极限位置</span></span><br><span class="line">    <span class="keyword">if</span> (panView.transform.tx &gt; rightScopeTransform.tx) &#123;</span><br><span class="line">        panView.transform = rightScopeTransform;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (panView.transform.tx &lt; <span class="number">0.0</span>)&#123;</span><br><span class="line">    <span class="comment">//左边极限位置</span></span><br><span class="line">        panView.transform=<span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGPoint</span> veloctyPoint = [sender velocityInView:<span class="keyword">self</span>.view];</span><br><span class="line">    <span class="comment">//    当托拽手势结束时执行</span></span><br><span class="line">    <span class="keyword">if</span> (sender.state == <span class="built_in">UIGestureRecognizerStateEnded</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> delay:<span class="number">0</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseIn</span> animations:^&#123;</span><br><span class="line">            <span class="keyword">if</span> (veloctyPoint.x&gt;<span class="number">0</span>) &#123;<span class="comment">//向右</span></span><br><span class="line">                <span class="keyword">if</span> (panView.transform.tx&lt;MIN_SPACE_VALUE) &#123;</span><br><span class="line">                    panView.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    panView.transform=rightScopeTransform;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//向左</span></span><br><span class="line">                <span class="keyword">if</span> (panView.transform.tx&gt;(<span class="keyword">self</span>.view.frame.size.width-MIN_SPACE_VALUE)) &#123;</span><br><span class="line">                    panView.transform=rightScopeTransform;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    panView.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; completion:^(<span class="type">BOOL</span> finished) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习 类型转换与运算 02</title>
      <link href="/2016/09/28/Java%E5%AD%A6%E4%B9%A0%20%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BF%90%E7%AE%97%2002/"/>
      <url>/2016/09/28/Java%E5%AD%A6%E4%B9%A0%20%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BF%90%E7%AE%97%2002/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Untitled &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">int x;</span><br><span class="line">double y;</span><br><span class="line">x = (int)34.56 + (int)11.2;  // 丢失精度 34 + 11 =45</span><br><span class="line">y = (double)x + (double)10 + 1;  // 提高精度 35 +10 +1</span><br><span class="line">System.out.println(&quot;x=&quot; + x); //输出结果 x=45</span><br><span class="line">System.out.println(&quot;y=&quot; + y);//输出结果 y=56.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//自增减法</span><br><span class="line">int a=10;</span><br><span class="line">int b=10;</span><br><span class="line">       </span><br><span class="line">System.out.println(&quot;后自加 a=&quot; + (a++));//10</span><br><span class="line">System.out.println(&quot;a的值 a=&quot; + a);</span><br><span class="line">System.out.println(&quot;c的值 c=&quot; + c);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;前自加 b=&quot; + (++b));</span><br><span class="line">//++VAR被称为前自加，其后面的变量执行自加操作，其运算为，先执行自加操作，再引用VAR值。</span><br><span class="line">//VAR++被称为后自加，其前面的变量执行自加操作，其运算为，先引用VAR值，再进行自加操作。</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java语法学习 1</title>
      <link href="/2016/09/23/java%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%201/"/>
      <url>/2016/09/23/java%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%201/</url>
      
        <content type="html"><![CDATA[<p>学习来源：<a href="http://www.weixueyuan.net/java/rumen_1/">http://www.weixueyuan.net/java/rumen_1/</a></p><p>创建Test.java 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.lang.*;<span class="comment">//编译器默认已导入jar包，System类可使用</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;gghgh&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 字符型</span></span><br><span class="line"><span class="type">char</span> <span class="variable">webName1</span> <span class="operator">=</span> <span class="string">&#x27;微&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">webName2</span> <span class="operator">=</span> <span class="string">&#x27;学&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">webName3</span> <span class="operator">=</span> <span class="string">&#x27;苑&#x27;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;网站的名字是：&quot;</span> + webName1 + webName2 + webName3);</span><br><span class="line">       </span><br><span class="line"><span class="comment">// 整型</span></span><br><span class="line"><span class="type">short</span> x=<span class="number">22</span>;  <span class="comment">// 十进制</span></span><br><span class="line"><span class="type">int</span> y=<span class="number">022</span>;  <span class="comment">// 八进制</span></span><br><span class="line"><span class="type">long</span> z=<span class="number">0x22L</span>;  <span class="comment">// 十六进制</span></span><br><span class="line">System.out.println(<span class="string">&quot;转化成十进制：x = &quot;</span> + x + <span class="string">&quot;, y = &quot;</span> + y + <span class="string">&quot;, z = &quot;</span> + z);</span><br><span class="line">       </span><br><span class="line"><span class="comment">// 浮点型</span></span><br><span class="line"><span class="type">float</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">22.45f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;计算乘积：&quot;</span> + m + <span class="string">&quot; * &quot;</span> + n + <span class="string">&quot;=&quot;</span> + m*n);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">aa</span> <span class="operator">=</span><span class="number">100</span> &gt; <span class="number">10</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">bb</span> <span class="operator">=</span><span class="number">100</span> &lt; <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;100&gt;10 = &quot;</span> + aa);</span><br><span class="line">System.out.println(<span class="string">&quot;100&lt;10 = &quot;</span> + bb);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(aa)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;100&lt;10是对的&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;100&lt;10是错的&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个名为student类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;  <span class="comment">// 通过class关键字类定义类</span></span><br><span class="line"><span class="comment">// 类包含的变量</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">float</span> score;</span><br><span class="line"><span class="comment">// 类包含的函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println( name + <span class="string">&quot;的年龄是 &quot;</span> + age + <span class="string">&quot;，成绩是 &quot;</span> + score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sayhelloworld</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print(name + <span class="string">&quot;年龄 &quot;</span> +age +<span class="string">&quot;成绩 &quot;</span> +score);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过类来定义变量，即创建对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 必须使用new关键字</span></span><br><span class="line"><span class="comment">// 操作类的成员</span></span><br><span class="line">stu1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">stu1.age = <span class="number">15</span>;</span><br><span class="line">stu1.score = <span class="number">92.5f</span>;</span><br><span class="line">stu1.say();</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 必须使用new关键字</span></span><br><span class="line"><span class="comment">// 操作类的成员</span></span><br><span class="line">stu2.name = <span class="string">&quot;小吉&quot;</span>;</span><br><span class="line">stu2.age = <span class="number">16</span>;</span><br><span class="line">stu2.score = <span class="number">94.7f</span>;</span><br><span class="line">stu2.sayhelloworld();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java中print、printf、println的区别</strong></p><p>printf主要是继承了C语言的printf的一些特性，可以进行格式化输出<br>print就是一般的标准输出，但是不换行<br>println和print基本没什么差别，就是最后会换行<br>System.out.printf(“the number is: d”,t);</p><p><strong>参照JAVA API的定义如下：</strong>‘d’ 整数 结果被格式化为十进制整数<br>‘o’ 整数 结果被格式化为八进制整数<br>‘x’, ‘X’ 整数 结果被格式化为十六进制整数<br>‘e’, ‘E’ 浮点 结果被格式化为用计算机科学记数法表示的十进制数<br>‘f’ 浮点 结果被格式化为十进制数<br>‘g’, ‘G’ 浮点 根据精度和舍入运算后的值，使用计算机科学记数形式或十进制格式对结果进行格式化。<br>‘a’, ‘A’ 浮点 结果被格式化为带有效位数和指数的十六进制浮点数<br>println(“test”)相当于print(“testn”)就是一般的输出字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.print(<span class="string">&quot;用print输出i:&quot;</span>+ i);</span><br><span class="line">System.out.println( <span class="string">&quot;用println输出i:&quot;</span>+ i);</span><br><span class="line">System.out.printf(<span class="string">&quot;i的值为%d,j的值为%f&quot;</span>, i,j);</span><br></pre></td></tr></table></figure><p>断点调试命令</p><p>直接在控制台输入help，即可看到相关调试命令</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下拉刷新—上拉加载Github记录</title>
      <link href="/2016/09/04/iOS%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
      <url>/2016/09/04/iOS%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>下拉刷新—上拉加载 开源记录</p><p>KVO</p><p><a href="https://github.com/coderyi/YiRefresh">https://github.com/coderyi/YiRefresh</a></p><p><a href="https://www.jianshu.com/p/21837c99100e">https://www.jianshu.com/p/21837c99100e</a></p><p><a href="https://www.jianshu.com/p/ed228f8a5c3c">https://www.jianshu.com/p/ed228f8a5c3c</a></p><p><a href="https://www.jianshu.com/p/74e7103aa156">https://www.jianshu.com/p/74e7103aa156</a></p><p><a href="https://www.jianshu.com/p/8a658d0a6654">https://www.jianshu.com/p/8a658d0a6654</a></p><p><a href="https://github.com/jijiawei/JWRefresh/tree/master/MYJWRefresh">https://github.com/jijiawei/JWRefresh/tree/master/MYJWRefresh</a></p><p><a href="https://github.com/wangzhaomeng/LLRefresh">https://github.com/wangzhaomeng/LLRefresh</a></p><p>代理</p><p><a href="https://www.jianshu.com/p/228a1098e4bc">https://www.jianshu.com/p/228a1098e4bc</a></p><p><a href="http://blog.csdn.net/x6587305x/article/details/42640291">http://blog.csdn.net/x6587305x/article/details/42640291</a></p><p>刷新</p><p><a href="https://www.jianshu.com/p/8a658d0a6654">https://www.jianshu.com/p/8a658d0a6654</a></p><p><a href="https://github.com/isaced/ISRefresh">https://github.com/isaced/ISRefresh</a></p><p><a href="https://github.com/liyuechun/YCRefreshControl">https://github.com/liyuechun/YCRefreshControl</a></p><p><a href="https://github.com/pgbo/UpRefreshControl">https://github.com/pgbo/UpRefreshControl</a></p><p><a href="https://github.com/inspace-io/INSPullToRefresh">https://github.com/inspace-io/INSPullToRefresh</a></p><p><a href="https://github.com/Elliotsomething/PulldownRefreshDemo">https://github.com/Elliotsomething/PulldownRefreshDemo</a></p><p><a href="https://gist.github.com/kreeger/4612414">https://gist.github.com/kreeger/4612414</a></p><p><a href="https://github.com/dskyu/LNRefresh">https://github.com/dskyu/LNRefresh</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS直播-美颜</title>
      <link href="/2016/09/04/iOS%E7%9B%B4%E6%92%AD%20%E7%BE%8E%E9%A2%9C/"/>
      <url>/2016/09/04/iOS%E7%9B%B4%E6%92%AD%20%E7%BE%8E%E9%A2%9C/</url>
      
        <content type="html"><![CDATA[<p>直播美颜</p><span id="more"></span><p><a href="https://www.ctolib.com/LiveExplanation.html">[iOS] 直播技术总结</a><br><a href="http://www.jianshu.com/p/6bdb4cb50f14">iOS开发直播app-美颜滤镜GPUImageBeautifyFilter</a><br><a href="http://www.saberismywife.com/2016/10/26/iOS%E7%BE%8E%E9%A2%9C%E5%AE%9E%E7%8E%B0/">iOS美颜实现</a><br><a href="https://github.com/Maru-zhang/MARFaceBeauty">https://github.com/Maru-zhang/MARFaceBeauty</a><br><a href="https://github.com/easefun/PLVLiveDemo">https://github.com/easefun/PLVLiveDemo</a><br><a href="https://github.com/chenliming777/LMLiveStreaming">https://github.com/chenliming777/LMLiveStreaming</a><br><a href="http://blog.ypli.xyz/ios/ios-rtmpzhi-bo-tui-liu-xue-xi-bi-ji">iOS RTMP直播推流学习笔记 &amp; VideoCore源码梳理</a><br><a href="http://www.jianshu.com/p/83da490c0f95">iOS直播-基于RTMP的视频推送</a></p>]]></content>
      
      
      <categories>
          
          <category> 直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2016/09/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2016/09/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>微博，朋友圈常用正则匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">匹配粗体中括号间的内容（也带上两边的粗体中括号）</span><br><span class="line">【[^】]+】</span><br><span class="line"></span><br><span class="line">匹配粗体中括号间的内容（不带两边的粗体中括号）的正则表达式：</span><br><span class="line">(?&lt;=【)([^】]+)(?=】)</span><br><span class="line"></span><br><span class="line">匹配书名号之间的内容（不带两边的书名号）的正则表达式：</span><br><span class="line">(?&lt;=《)([^》]+)(?=》)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=xxx)是以xxx开头的字符串, 但不包含xxx本身。</span><br><span class="line"></span><br><span class="line">(?=xxx)就匹配以xxx结尾的字符串, 但不包含xxx本身。</span><br><span class="line"></span><br><span class="line">(?&lt;=《)即以《开头, 但不包含《</span><br><span class="line"></span><br><span class="line">(?=》)即以》结尾，但不包含》</span><br></pre></td></tr></table></figure><p>转义字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正斜杠（/）与反斜杠（\）</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>转义序列</strong></th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>\’</td><td>单引号</td></tr><tr><td>\”</td><td>双引号</td></tr><tr><td>\</td><td>反斜杠</td></tr><tr><td>\0</td><td>空</td></tr><tr><td>\a</td><td>警告</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>加车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr></tbody></table><p>正斜杠&#x2F;，网址、Url地址。</p><p>正则表达式-问号的用法</p><p>1、匹配问号</p><p>因为<code>?</code>在正则表达式中有特殊的含义，所以如果想匹配?本身，则需要转义，<code>\?</code></p><p>2、有无量词</p><p>问号可以表示重复前面内容的0次或一次，也就是要么不出现，要么出现一次。</p><p>3、贪婪\非贪婪匹配</p><p>在满足匹配时，匹配尽可能长的字符串，默认情况下，采用贪婪匹配</p><p>示例：匹配字符串abcabcabc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.*c     结果：abcabcabc</span><br><span class="line">a.*c     结果：abc</span><br></pre></td></tr></table></figure><p>4、 预见匹配</p><p>   简单说，就是匹配时考虑预见匹配的那一部分，不符合的不能算匹配上，但匹配的结果部分(变量$&amp;)要除去预见匹配部分，又分两种。</p><p>1）肯定预见匹配  &#x2F;pattern(?&#x3D;string)&#x2F;;匹配时，要考虑符合string</p><p><strong>遇见功能，”?&#x3D;”，意识说目标串中肯定存在什么，比如：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;ab45555&quot;;</span><br><span class="line">正则 ab(?=\d)</span><br><span class="line">结果： ab(yes) </span><br></pre></td></tr></table></figure><p>2 否定预见匹配  &#x2F;pattern(?!string)&#x2F;;匹配时，要考虑不符合string的才行，结果$&amp;仍然只是取patern部分，不包括string<br><strong>“?!”，意思说目标串中不应该存在什么</strong>var str&#x3D;”ab1”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;ab45555&quot;;</span><br><span class="line">正则 ab(?!\d)</span><br><span class="line">//结果为false</span><br><span class="line"></span><br><span class="line">var str=&quot;abccc&quot;;</span><br><span class="line">//结果为 ab(yes) </span><br><span class="line">意思是目标串中的第三位不应该是数字</span><br></pre></td></tr></table></figure><p><code>(?=p)</code> ：零宽正向先行断言，要求接下来的字符串都与 <code>p</code> 匹配，但不能包含匹配 <code>p</code> 的那些字符</p><p><code>(?!p)</code> ：零宽负向先行断言，要求接下来的字符串不与 <code>p</code> 匹配</p><p>（出自《JavaScript权威指南》）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=xxx)是以xxx开头的字符串, 但不包含xxx本身。  </span><br><span class="line">(?=xxx)就匹配以xxx结尾的字符串, 但不包含xxx本身。</span><br><span class="line">(?!xxx)就匹配不以xxx结尾的字符串, 但不包含xxx本身</span><br><span class="line"></span><br><span class="line">匹配内容 abccdd</span><br><span class="line">正则 (?&lt;=ab)[a-z]*(?=dd) </span><br><span class="line">输出：cc </span><br><span class="line">解释：1、(?&lt;=ab)以ab开头 2、[a-z]* a到z重复任意次  3、(?=dd) 以dd结尾</span><br></pre></td></tr></table></figure><p>几个常用的非贪婪匹配Pattern</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- *? 重复任意次，但尽可能少重复</span><br><span class="line">- +? 重复1次或更多次，但尽可能少重复</span><br><span class="line">- ?? 重复0次或1次，但尽可能少重复</span><br><span class="line">- &#123;n,m&#125;? 重复n到m次，但尽可能少重复</span><br><span class="line">- &#123;n,&#125;? 重复n次以上，但尽可能少重复</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#([^@]+?)#   #不以@开头字符重复1次或更多#</span><br><span class="line">话题 (例如#奇葩说#哈哈#天天向上#节目):</span><br><span class="line">\[([^\[]*?)]</span><br><span class="line">表情 (例如[哈哈]and[呵呵]):</span><br><span class="line"></span><br><span class="line"> At (例如 @王思聪 ):</span><br><span class="line"> @([\x&#123;4e00&#125;-\x&#123;9fa5&#125;A-Za-z0-9_\-]+)</span><br></pre></td></tr></table></figure><h3 id="正则表达式基本语法"><a href="#正则表达式基本语法" class="headerlink" title="正则表达式基本语法"></a>正则表达式基本语法</h3><h4 id="1、正则表达式常见字符"><a href="#1、正则表达式常见字符" class="headerlink" title="1、正则表达式常见字符"></a>1、正则表达式常见字符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test            # 匹配包含test的字符串</span><br><span class="line">.               # 匹配除换行符外任意字符</span><br><span class="line">\               # 转义字符</span><br><span class="line">[abc]或[a-c]    # 匹配字符类，如例子匹配a,b,c中的任何一个</span><br><span class="line">[^x] # 匹配除了x以外的任意字符</span><br><span class="line">[^abc]          # 匹配除了a,b,c以外的所有字符</span><br></pre></td></tr></table></figure><h4 id="2、正则表达式特殊字符"><a href="#2、正则表达式特殊字符" class="headerlink" title="2、正则表达式特殊字符"></a>2、正则表达式特殊字符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\d                  # 数字，等同于[0-9]</span><br><span class="line">\D                  # 非数字</span><br><span class="line">\s                  # 空白字符（包括换行、Tab等）</span><br><span class="line">\S                  # 非空白字符</span><br><span class="line">\w                  # 单词，等用于[a-zA-Z0-9_]</span><br><span class="line">\W                  # 非单词</span><br></pre></td></tr></table></figure><h4 id="3、正则表达式数量词（重复）"><a href="#3、正则表达式数量词（重复）" class="headerlink" title="3、正则表达式数量词（重复）"></a>3、正则表达式数量词（重复）</h4><p>贪婪量词<code>*</code>和<code>+</code><br>惰性(非贪婪)（最少重复匹配）量词<code>?</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c*                  # 匹配字符&quot;c&quot; 0或无限次    *=重复0次或更多次</span><br><span class="line">c+                  # 匹配字符&quot;c&quot; 1次以上 +=重复1次或更多次</span><br><span class="line">c?                  # 匹配字符&quot;c&quot; 0或1次   ?=重复0次或1次</span><br><span class="line">c&#123;3&#125;                # 匹配字符&quot;c&quot; 3次  &#123;n&#125;=重复n次</span><br><span class="line">c&#123;3,5&#125;              # 匹配字符&quot;c&quot; 3到5次   &#123;n,m&#125;=重复n到m次</span><br></pre></td></tr></table></figure><h4 id="4、正则表达式逻辑或分组"><a href="#4、正则表达式逻辑或分组" class="headerlink" title="4、正则表达式逻辑或分组"></a>4、正则表达式逻辑或分组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c|b                 # 匹配&quot;c&quot;或&quot;b&quot;</span><br><span class="line">(ab|cd)             # 匹配&quot;ab&quot;或&quot;cd&quot;</span><br><span class="line">(?P&lt;name&gt;abc)       # 匹配&quot;abc&quot;并命名为name</span><br><span class="line">(?P=name)           # 前文中的name组</span><br></pre></td></tr></table></figure><h4 id="5、定位点（锚字符、边界）"><a href="#5、定位点（锚字符、边界）" class="headerlink" title="5、定位点（锚字符、边界）"></a>5、定位点（锚字符、边界）</h4><p><code>^</code> 匹配开始的位置。将 <code>^</code> 用作括号<code>[]</code>表达式中的第一个字符，则会对字符集求反。<br><code>$</code> 匹配结尾的位置。<br><code>\b</code> 与一个字边界匹配，如er\b 与“never”中的“er”匹配，但与“verb”中的“er”不匹配。<br><code>\B</code> 非边界字匹配。</p><p>正则在OC中，在遇到<code>\d</code>，<code>\.</code>等情况需要转义 <code>\\d</code> ，<code>\\.</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">匹配手机号--手机号以13，14-18开头，9个 \d 数字字符</span><br><span class="line">单独字符串验证   # ^1[34578]\d&#123;9&#125;$ </span><br><span class="line">全文匹配        # 1[34578]\d&#123;9&#125;</span><br><span class="line">用户名(英文+数字)  # ^[A-Za-z0-9]&#123;6,20&#125;+$</span><br><span class="line">密码# ^[a-zA-Z0-9]&#123;6,20&#125;+$</span><br><span class="line">昵称# ^[u4e00-u9fa5]&#123;4,8&#125;$</span><br><span class="line">QQ号 # [1-9][0-9]&#123;4,14&#125;</span><br><span class="line">@用户名 # @\w+  或 @[\u4e00-\u9fa5a-zA-Z0-9_-]&#123;2,30&#125;  或@[0-9a-zA-Z\\u4e00-\\u9fa5]+   </span><br><span class="line">#话题#  # #[^#]+#</span><br><span class="line">标签&lt;id&gt;content&lt;/id&gt;中间的内容 #(?&lt;=&lt;id&gt;).*?(?=&lt;/id&gt;)</span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. \w 匹配包括下划线的任何单词字符，但不包含标点符号如&#x27;,&#x27;,它等价于[A-Za-z0-9_]；(也即字母，数字，下划线)</span><br><span class="line">2. [\w,]除了能匹配\w能匹配的所有单词字符外，还能匹配&#x27;,&#x27;, 它等价于[A-Za-z0-9_,];</span><br><span class="line">3. [\w-] 除了能匹配\w能匹配的所有单词字符外，还能匹配&#x27;,&#x27;,常见于匹配URL链接</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[\u4e00-\u9fa5]&#123;0,&#125;$   全中文</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="正则工具"><a href="#正则工具" class="headerlink" title="正则工具"></a>正则工具</h5><p><a href="http://regex.zjmainstay.cn/">http://regex.zjmainstay.cn/</a></p><p><a href="http://regexr.com/">http://regexr.com/</a></p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p><a href="http://myregexp.com/">http://myregexp.com/</a></p><p><a href="https://www.debuggex.com/">https://www.debuggex.com/</a></p><p><a href="https://www.regextester.com/">https://www.regextester.com/</a>  正则错误有提示</p><p>可视化，用来验证正则是否正确</p><p><a href="https://jex.im/regulex/">https://jex.im/regulex/</a></p><p><a href="https://www.regexplanet.com/support/similar.html">https://www.regexplanet.com/support/similar.html</a></p><p>生成代码</p><p><a href="http://tools.guardui.net/regex/create_reg.html">http://tools.guardui.net/regex/create_reg.html</a></p><p>参考</p><p><a href="https://github.com/aloisdg/awesome-regex">https://github.com/aloisdg/awesome-regex</a></p><p><a href="http://www.jianshu.com/p/cca5519a9367">http://www.jianshu.com/p/cca5519a9367</a></p><p><a href="http://www.cnblogs.com/hustskyking/archive/2014/01/18/how-regular-expressions-work.html">http://www.cnblogs.com/hustskyking/archive/2014/01/18/how-regular-expressions-work.html</a></p><p><a href="https://www.qcloud.com/community/article/675364001489391659?fromSource=gwzcw.92887.92887.92887">https://www.qcloud.com/community/article/675364001489391659?fromSource=gwzcw.92887.92887.92887</a></p><p><a href="https://www.zhihu.com/question/48219401">https://www.zhihu.com/question/48219401</a></p><p><a href="http://www.jianshu.com/p/a3dd72eadfa3">iOS开发——正则表达式验证手机号、密码</a></p><p><a href="http://www.jianshu.com/p/1a641056853d">iOS 正则匹配手机号和固定电话</a></p><p><a href="https://aotu.io/notes/2016/11/17/regexp-theory/index.html">正则表达式理论篇</a></p><p><a href="https://aotu.io/notes/2016/12/07/regexp-practice/">正则表达式实践篇</a></p><p><a href="http://www.jb51.net/tools/regex.htm">http://www.jb51.net/tools/regex.htm</a></p><p>[正则表达式<a href="http://blog.csdn.net/sinat_34719507/article/details/54434312">\w]+,\w+,[\w+] 三者区别？ [],[ABC]+,[\w.&#x2F;-]+ 表达什么？</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">mozilla正则表达式</a></p><p>escapeRegExp</p><p><a href="https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url">https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url</a></p><p><a href="https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript">https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript</a></p><p><a href="https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex">https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS  模糊效果实现方式</title>
      <link href="/2016/08/15/iOS%E5%AE%9E%E7%8E%B0%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
      <url>/2016/08/15/iOS%E5%AE%9E%E7%8E%B0%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="4种方式实现iOS模糊效果"><a href="#4种方式实现iOS模糊效果" class="headerlink" title="4种方式实现iOS模糊效果"></a>4种方式实现iOS模糊效果</h4><ul><li><p><code>CoreImage</code>中的模糊滤镜</p></li><li><p><code>UIImage + ImageEffects</code>的category模糊效果</p></li><li><p>iOS8中<code>UIVisualEffectView</code>模糊效果</p></li><li><p>iOS7以后通过<code>UIToolBar</code>实现模糊效果</p><p><a href="http://blog.wangruofeng007.com/blog/2016/01/31/3chong-fang-shi-shi-xian-iosmo-hu-xiao-guo/">http://blog.wangruofeng007.com/blog/2016/01/31/3chong-fang-shi-shi-xian-iosmo-hu-xiao-guo/</a></p></li></ul><p><a href="http://www.jianshu.com/p/70d3af876909">http://www.jianshu.com/p/70d3af876909</a></p><p>&#x2F;&#x2F;透明模糊</p><ul><li><p>(UIImage *)applyLightEffect;</p></li><li><p>白色模糊</p></li><li><p>(UIImage *)applyExtraLightEffect;</p></li><li><p>黑色模糊</p></li><li><p>(UIImage *)applyDarkEffect;</p></li><li><p>指定颜色模糊</p></li><li><p>(UIImage *)applyTintEffectWithColor:(UIColor *)tintColor;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  默认透明模糊  不用这个方法了</span><br><span class="line"> */</span><br><span class="line">- (void)refreshBlurViewForNewImage</span><br><span class="line">&#123;</span><br><span class="line">    // 得到截屏</span><br><span class="line">    UIImage *screenShot = [self screenShotOfView:self];</span><br><span class="line">    /**</span><br><span class="line">     *  模糊的速度  模糊层的最终透明度  --默认</span><br><span class="line">     */</span><br><span class="line">    //    screenShot = [screenShot applyBlurWithRadius:30 tintColor:[UIColor colorWithWhite:0.6 alpha:0.2] saturationDeltaFactor:1.0 maskImage:nil];</span><br><span class="line">    screenShot = [screenShot applyLightEffect];</span><br><span class="line">    // 虚化层设置图片</span><br><span class="line">    self.blurryImgView.image = screenShot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 自定义NSLog</title>
      <link href="/2016/08/10/iOS%20%E8%87%AA%E5%AE%9A%E4%B9%89NSLog/"/>
      <url>/2016/08/10/iOS%20%E8%87%AA%E5%AE%9A%E4%B9%89NSLog/</url>
      
        <content type="html"><![CDATA[<p>宏定义、NSLog我们经常用到，但系统默认的NSLog往往不能满足我们开发的需求。譬如以下开发常见自定义NSLog就可以帮助我们获取更多的相关信息。</p><h4 id="1、自定义NSLog代码示例"><a href="#1、自定义NSLog代码示例" class="headerlink" title="1、自定义NSLog代码示例"></a>1、自定义NSLog代码示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef DEBUG</span><br><span class="line">#define NSLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)</span><br><span class="line">#else</span><br><span class="line">#define NSLog(...)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#define NSLog(format, ...) \</span><br><span class="line">    do &#123; \</span><br><span class="line">        NSLog(@&quot;&lt;%@ : %d : %s&gt;-: %@&quot;, \</span><br><span class="line">        [[NSString stringWithUTF8String:__FILE__] lastPathComponent], \</span><br><span class="line">        __LINE__, \</span><br><span class="line">        __FUNCTION__, \</span><br><span class="line">        [NSString stringWithFormat:format, ##__VA_ARGS__]); \</span><br><span class="line">    &#125; while(0)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#ifdef DEBUG</span><br><span class="line">#define NSLog(format, ...) \</span><br><span class="line">    //Log定义...</span><br><span class="line">#else</span><br><span class="line">    #define NSLog(format, ...) do&#123; &#125; while(0)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h4 id="2、如何控制调试-发布模式开关"><a href="#2、如何控制调试-发布模式开关" class="headerlink" title="2、如何控制调试&#x2F;发布模式开关"></a>2、如何控制调试&#x2F;发布模式开关</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef DEBUG</span><br><span class="line">#   define NSLog(...) NSLog(__VA_ARGS__)</span><br><span class="line">#else </span><br><span class="line">#   define NSLog(...)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>建议使用自定义Release&#x2F;DEBUG 模式开关，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#warning 发布时，将APP_CUSTOM_DEBUG设置为0！!(0-发布  1-生产)</span><br><span class="line"></span><br><span class="line">#define APP_CUSTOM_DEBUG 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#if APP_CUSTOM_DEBUG</span><br><span class="line">#define NEWS_NOTIFY_URL   @&quot;http://192.168.240.113.xxx&quot;//测试环境URL</span><br><span class="line">#else</span><br><span class="line">#define NEWS_NOTIFY_URL   @&quot;http://xxxxbbbb.com.cn/xxx&quot;//正式环境URL 线上地址</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#if APP_CUSTOM_DEBUG</span><br><span class="line">#   define NSLog(...) NSLog(__VA_ARGS__)</span><br><span class="line">#else</span><br><span class="line">#   define NSLog(...)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h4 id="3-相关参数释义"><a href="#3-相关参数释义" class="headerlink" title="3.相关参数释义"></a>3.相关参数释义</h4><p><strong>1）ifdef #ifndef #if…含义</strong></p><ul><li><code>#ifdef</code> - If this macro is defined（该宏已定义）</li><li><code>#ifndef</code> - If this macro is not defined（该宏未定义）</li><li><code>#if</code> - Test if a compile time condition is true（如果一个编译时条件是真的）</li><li><code>#else</code> - The alternative for #if （选择-如果）</li><li><code>#elif</code> - #else an #if in one statement（#其他#如果一个语句）</li><li><code>#endif</code> - End preprocessor conditional（结束预处理条件）</li></ul><p><strong>2）宏定义参数释义</strong></p><p>1、<code>__FILE__</code>   宏在预编译时会替换成当前的<code>源文件名</code></p><p>2、<code>__LINE__</code>宏在预编译时会替换成当前的<code>行号</code><br>3、<code>__FUNCTION__</code>宏在预编译时会替换成当前的<code>函数名称</code></p><p>4、<code>__VA_ARGS__</code>是一个<code>可变参数</code>的宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支（VC6.0的编译器不支持）。宏前面加上<code>##</code>的作用在于，当可变参数的个数为0时，这里的<code>##</code>起到把前面多余的”<code>,</code>“去掉的作用,否则会编译出错。</p><p><code>相关扩展阅读</code>：</p><p>Swift Log <a href="https://gist.github.com/xmzio/fccd29fc945de7924b71">https://gist.github.com/xmzio/fccd29fc945de7924b71</a></p><p><a href="http://www.knowstack.com/swift-print-println-nslog/">Swift print, println, NSLog</a></p><p><a href="http://stackoverflow.com/questions/6552197/enable-and-disable-nslog-in-debug-mode">Enable and Disable NSLog in DEBUG mode</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发 Xcode高级调试</title>
      <link href="/2016/06/14/iOS%E5%BC%80%E5%8F%91%20Xcode%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95/"/>
      <url>/2016/06/14/iOS%E5%BC%80%E5%8F%91%20Xcode%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>第三方库</p><p><a href="https://github.com/square/PonyDebugger"><strong>PonyDebugger</strong></a></p><p>通过Chrom浏览器可以监控网络，还可以查看Core Data对象，view的层级查看</p><p>PS：在从App Store上下载Xcode后，默认是不会安装Command Line Tools的，Command Line Tools是在Xcode中的一款工具，可以在命令行中运行C程序。</p><p><strong>验证是否安装：</strong></p><p>打开Xcode，创建一个新的项目，在OS X下面选择Application,如果右侧出现Command line tool图标，表示已经安装成功。</p><p><strong>安装方法：</strong></p><p>终端中输入以下命令：<code>xcode-select --install</code>  按回车，根据提示操作。</p><p><a href="http://lucifer1988.github.io/blog/2014/03/03/diao-shi-li-qi-ponydebugger/">调试利器-PonyDebugger</a></p><p><a href="http://xiongzenghuidegithub.github.io/blog/2016/03/21/ponydebuggeran-zhuang-shi-bai/">ponyDebugger安装失败</a></p><p>[Safari 前端开发调试 iOS 完美解决方案（iPhone&#x2F;iTouch 等）](Safari 前端开发调试 iOS 完美解决方案（iPhone&#x2F;iTouch 等）)</p><p><strong>Bug排查</strong></p><p>dSYM文件–位于打包时的xcarchive包内容中</p><ul><li>将打包发布软件时的xcarchive文件拖入软件窗口内的任意位置(支持多个文件同时拖入，注意：文件名不要包含空格)</li></ul><p>相关文章推荐</p><p><a href="http://www.jianshu.com/p/f888db82fc27">久违的的LLDB篇一，让lldb提升你的效率</a></p><p><a href="http://www.jianshu.com/p/b2371dd4443b">LLdb篇2教你使用faceBook的chisel来提高调试效率</a></p><p><a href="https://blog.cnbluebox.com/blog/2015/03/05/chisel/">Chisel-LLDB命令插件，让调试更Easy</a></p><p><a href="https://github.com/Flipboard/FLEX">https://github.com/Flipboard/FLEX</a></p><p><a href="https://github.com/coderyi/NetworkEye">https://github.com/coderyi/NetworkEye</a></p><p><a href="https://github.com/KnuffApp/Knuff">https://github.com/KnuffApp/Knuff</a></p><p><a href="https://github.com/ryanolsonk/LLDB-QuickLook">https://github.com/ryanolsonk/LLDB-QuickLook</a></p><p><a href="https://github.com/huang303513/Debug-Instruments">https://github.com/huang303513/Debug-Instruments</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UITableViewHeaderFooterView复用</title>
      <link href="/2016/05/29/UITableViewHeaderFooterView%20%E5%A4%8D%E7%94%A8/"/>
      <url>/2016/05/29/UITableViewHeaderFooterView%20%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>1.首先要自定义一个sectionHeadView／sectionFootView继承自 UITableViewHeaderFooterView，如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CircleHeaderFooterView</span> : <span class="title">UITableViewHeaderFooterView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>2.在自定义的sectionHeadView／sectionFootView中重写这个方法，设置复用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;CircleHeaderFooterView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CircleHeaderFooterView</span></span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">instancetype</span>)initWithReuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> initWithReuseIdentifier:reuseIdentifier];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">//表示初始化方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>3.在需要调用自定义sectionHeadView／sectionFootView的VC里面调用table的代理方法，用法跟cell的复用相似</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *viewIdentfier = <span class="string">@&quot;headView&quot;</span>;</span><br><span class="line">    CircleHeaderFooterView *sectionHeadView = [tableViewdequeueReusableHeaderFooterViewWithIdentifier:viewIdentfier];</span><br><span class="line">    <span class="keyword">if</span>(!sectionHeadView)&#123;</span><br><span class="line">        sectionHeadView = [[CircleHeaderFooterView alloc]initWithReuseIdentifier:viewIdentfier];</span><br><span class="line">        sectionHeadView.contentView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sectionHeadView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新写法</p><figure class="highlight plaintext"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1：注册headerView</span><br><span class="line">[self.tableView registerClass:[CircleHeaderFooterView class] forHeaderFooterViewReuseIdentifier:@&quot;section&quot;];</span><br><span class="line"></span><br><span class="line">2：使用</span><br><span class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section</span><br><span class="line">&#123;</span><br><span class="line">    CircleHeaderFooterView *headView = [tableView dequeueReusableHeaderFooterViewWithIdentifier:@&quot;section&quot;];</span><br><span class="line">    headView.textLabel.text = [NSString stringWithFormat:@&quot;section %ld&quot;, section];</span><br><span class="line">    return headView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统自带</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UITableViewHeaderFooterView</span> *headView = [tableView dequeueReusableHeaderFooterViewWithIdentifier:<span class="string">@&quot;section&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!headView) &#123;</span><br><span class="line">        headView = [[<span class="built_in">UITableViewHeaderFooterView</span> alloc] initWithReuseIdentifier:<span class="string">@&quot;section&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    headView.textLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;section %ld&quot;</span>, section];</span><br><span class="line">    <span class="keyword">return</span> headView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 多线程</title>
      <link href="/2016/05/27/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2016/05/27/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、iOS的三种多线程技术"><a href="#一、iOS的三种多线程技术" class="headerlink" title="一、iOS的三种多线程技术"></a>一、iOS的三种多线程技术</h3><p>1.NSThread 每个NSThread对象对应一个线程，量级较轻（真正的多线程）</p><p>2.以下两点是苹果专门开发的“并发”技术，使得程序员可以不再去关心线程的具体使用问题</p><ul><li><p>NSOperation&#x2F;NSOperationQueue 面向对象的线程技术</p></li><li><p>GCD —— Grand Central Dispatch（派发） 是基于C语言的框架，可以充分利用多核，是苹果推荐使用的多线程技术</p></li></ul><h3 id="二、三种多线程技术的对比"><a href="#二、三种多线程技术的对比" class="headerlink" title="二、三种多线程技术的对比"></a>二、三种多线程技术的对比</h3><p>•NSThread:</p><p>–优点：NSThread 比其他两个轻量级，使用简单</p><p>–缺点：需要自己管理线程的生命周期、线程同步、加锁、睡眠以及唤醒等。线程同步对数据的加锁会有一定的系统开销</p><p> </p><p>•NSOperation：</p><p>–不需要关心线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上</p><p>–NSOperation是面向对象的</p><p> </p><p>•GCD：</p><p>–Grand Central Dispatch是由苹果开发的一个多核编程的解决方案。iOS4.0+才能使用，是替代NSThread， NSOperation的高效和强大的技术</p><p>–GCD是基于C语言的</p><p><img src="https://o8ouygf5v.qnssl.com/Tables/ralationship.jpg" alt="总结"></p><p><a href="http://www.jianshu.com/p/6e6f4e005a0b">谈iOS多线程(NSThread、NSOperation、GCD)编程</a></p><p><a href="http://www.iosxxx.com/blog/2016-06-02-GCD%E9%82%A3%E4%BA%9B%E4%BA%8B.html">http://www.iosxxx.com/blog/2016-06-02-GCD%E9%82%A3%E4%BA%9B%E4%BA%8B.html</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用runtime进行自动归档解档</title>
      <link href="/2016/05/24/%E5%88%A9%E7%94%A8runtime%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%BD%92%E6%A1%A3%E8%A7%A3%E6%A1%A3/"/>
      <url>/2016/05/24/%E5%88%A9%E7%94%A8runtime%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%BD%92%E6%A1%A3%E8%A7%A3%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基本流程–利用runtime获取属性(成员变量)—遍历元素利用KVC逐个赋值取值。</p></blockquote><h3 id="1、归档解档runtime具体实现"><a href="#1、归档解档runtime具体实现" class="headerlink" title="1、归档解档runtime具体实现"></a>1、归档解档runtime具体实现</h3><p>1.重写<code>-(void)encodeWithCoder:(NSCoder *)aCoder</code>和<code>-(id)initWithCoder:(NSCoder *)aDecoder</code>方法。</p><p>2.自定义方法，然后在encodeWithCoder与initWithCoder中调用</p><p>虽然第一个方法省事，但不建议使用重写覆盖系统方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> -解档</span></span><br><span class="line">- (<span class="type">void</span>)decode: (<span class="built_in">NSCoder</span> *)decoder&#123;</span><br><span class="line">    Class cla = <span class="keyword">self</span>.class;</span><br><span class="line">    <span class="keyword">while</span> (cla &amp;&amp; cla != [<span class="built_in">NSObject</span> <span class="keyword">class</span>]) &#123; <span class="comment">//不归档NSObject的属性</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> outCount = <span class="number">0</span>;</span><br><span class="line">        objc_property_t *pList = class_copyPropertyList(cla, &amp;outCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outCount; ++i) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:property_getName(pList[i])];</span><br><span class="line">            <span class="comment">//添加不解档的属性</span></span><br><span class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(ignoredNames)]) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([[<span class="keyword">self</span> ignoredNames] containsObject:name]) <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">id</span> value = [decoder decodeObjectForKey:name];<span class="comment">//进行解档取值</span></span><br><span class="line">            <span class="keyword">if</span> (value) &#123;</span><br><span class="line">                [<span class="keyword">self</span> setValue:value forKey:name];   <span class="comment">//利用KVC对属性赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        free(pList);</span><br><span class="line">        <span class="comment">//获得父类</span></span><br><span class="line">        cla = [cla superclass];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark-归档</span></span><br><span class="line">- (<span class="type">void</span>)encode: (<span class="built_in">NSCoder</span> *)encoder&#123;</span><br><span class="line">    Class cla = <span class="keyword">self</span>.class;</span><br><span class="line">    <span class="keyword">while</span> (cla &amp;&amp; cla != [<span class="built_in">NSObject</span> <span class="keyword">class</span>]) &#123; <span class="comment">//不归档NSObject的属性</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> outCount = <span class="number">0</span>;</span><br><span class="line">        objc_property_t *pList = class_copyPropertyList(cla, &amp;outCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outCount; ++i) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:property_getName(pList[i])];</span><br><span class="line">            <span class="comment">//添加不归档的属性</span></span><br><span class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(ignoredNames)]) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([[<span class="keyword">self</span> ignoredNames] containsObject:name]) <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">id</span> value = [<span class="keyword">self</span> valueForKeyPath:name];</span><br><span class="line">            <span class="keyword">if</span> (value) &#123;</span><br><span class="line">                [encoder encodeObject:value forKey:name];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        free(pList);</span><br><span class="line">        <span class="comment">//获得父类</span></span><br><span class="line">        cla = [cla superclass];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-为减少模型中重复代码使用，可以直接宏定义"><a href="#2-为减少模型中重复代码使用，可以直接宏定义" class="headerlink" title="2.为减少模型中重复代码使用，可以直接宏定义"></a>2.为减少模型中重复代码使用，可以直接宏定义</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AutoCodingImplementation \</span></span><br><span class="line"><span class="meta">-(id)initWithCoder:(NSCoder *)aDecoder&#123;\</span></span><br><span class="line"><span class="meta"><span class="keyword">if</span> (self = [super init]) &#123;\</span></span><br><span class="line"><span class="meta">[self decode:aDecoder];\</span></span><br><span class="line"><span class="meta">&#125;\</span></span><br><span class="line"><span class="meta">return self;\</span></span><br><span class="line"><span class="meta">&#125;\</span></span><br><span class="line"><span class="meta">\</span></span><br><span class="line"><span class="meta">- (void)encodeWithCoder:(NSCoder *)aCoder&#123;\</span></span><br><span class="line"><span class="meta">[self encode:aCoder];\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h4><p>比如User模型</p><p>第1步:遵守协议 <code>User.h</code>中<br> <code>@interface User : NSObject&lt;NSCoding&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@interface User : NSObject&lt;NSCoding&gt;</span><br><span class="line">@property (nonatomic,copy) NSString *name;</span><br><span class="line">@property (nonatomic,assign) double height;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>第2步: 添加忽略属性 <code> User.m</code></p><p>第3步: 添加自动归档解档宏<code>User.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">User</span></span></span><br><span class="line"><span class="comment">// 设置需要忽略的属性</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)ignoredNames &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@&quot;height&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">AutoCodingImplementation</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>第4步：归档,解档</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 归档，解档*/</span></span><br><span class="line">-(<span class="type">void</span>)autoCodingWithModel:(User *)user</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.归档</span></span><br><span class="line">    <span class="built_in">NSData</span> *modelData = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:user];</span><br><span class="line">    <span class="comment">//2.解档</span></span><br><span class="line">    User *model = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:modelData];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建Xcode模板</title>
      <link href="/2016/05/23/%E5%88%9B%E5%BB%BAXcode%E6%A8%A1%E6%9D%BF/"/>
      <url>/2016/05/23/%E5%88%9B%E5%BB%BAXcode%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="一、为什么要自定义模板"><a href="#一、为什么要自定义模板" class="headerlink" title="一、为什么要自定义模板"></a>一、为什么要自定义模板</h4><p>1.节省重复代码手写时间</p><p>2.统一规范代码，提高代码可读性<br>3.减少手写代码,XIB或修改相关配置等不必要的时间</p><p>如我们要求所有的viewController的代码都得按照一下代码结构来写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - def</span><br><span class="line">#pragma mark - override</span><br><span class="line">#pragma mark - api</span><br><span class="line">#pragma mark - model event </span><br><span class="line">#pragma mark - view event</span><br><span class="line">#pragma mark - private</span><br><span class="line">#pragma mark - getter / setter</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/08be5b30ff82">iOS代码编程规范-根据项目经验汇总</a></p><h4 id="二、模板存放位置"><a href="#二、模板存放位置" class="headerlink" title="二、模板存放位置"></a>二、模板存放位置</h4><p>Xcode模板主要分为2种，系统默认模板和用户自定模板，对iOS App开发者而言，一般用到的是系统模板中的<code>/Applications/Xcode.app/Contents/Developer/Platforms</code>目录下的<code>iPhoneOS.platform</code>中的模板</p><p><img src="http://upload-images.jianshu.io/upload_images/328273-4c4941288e786bfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p><strong>1、Xcode系统模板位置</strong></p><p>(1) iOS开发系统模板位置</p><ul><li>里面包含文件模板（File Templates）和工程模板（Project Templates）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates</span><br></pre></td></tr></table></figure><p>(2) MacOSX的系统文件模板位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates</span><br></pre></td></tr></table></figure><p><strong>2.用户自定义模板位置</strong><br> <code>~/Library/Developer/Xcode/Templates</code> </p><p>终端命令打开文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Library/Developer/Xcode/Templates //进入目录</span><br><span class="line">open .     //打开目前目录</span><br><span class="line">等价于</span><br><span class="line">open ~/Library/Developer/Xcode/Templates</span><br></pre></td></tr></table></figure><p>或者点击Finder菜单栏的<code>前往&gt;前往文件夹</code>(<code>shift + command + G</code>) ，<br>输入：<code>~/Library/Developer/Xcode/Templates</code></p><p>会看到<code>File Templates</code>，<code>Project Templates</code>2个文件夹，分别代表<code>文件模板</code>和<code>工程模板</code>目录。</p><h4 id="三、如何速创建、修改Xcode模板"><a href="#三、如何速创建、修改Xcode模板" class="headerlink" title="三、如何速创建、修改Xcode模板"></a>三、如何速创建、修改Xcode模板</h4><p> Xcode没有提供直接的工具或者是向导给你创建一个工程模板，,但是我们可以找到Xcode内置的几个模板,这里以iPhone开发为说明,介绍模板的创建修改过程.</p><p><strong>iOS模板目录</strong></p><p><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates</code></p><p>终端命令打开方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates</span><br></pre></td></tr></table></figure><p>或者点击Finder菜单栏的<code>前往&gt;前往文件夹</code>(<code>shift + command + G</code>)</p><p>输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates</span><br></pre></td></tr></table></figure><p><strong>1）基于现成模板修改或使用</strong></p><p>拷贝<code>iOS系统模板目录</code>中的模板进行修改。</p><p>为Xcode添加<code>Empty Application</code>、<code>category</code>、<code>protocol</code>等模板</p><p>现成下载：<a href="https://github.com/NSFish/AddMissingTemplates">https://github.com/NSFish/AddMissingTemplates</a></p><p>​   <a href="https://github.com/ChenYilong/XcodeMissingTemplates">https://github.com/ChenYilong/XcodeMissingTemplates</a></p><p>也可以利用<code>AlcaAtraz</code>安装相关模板，<code>shift+command+9</code> &gt;<code>Templates</code>模板</p><p>推荐：<a href="https://github.com/zubco/PZCustomView">https://github.com/zubco/PZCustomView</a></p><p> 复制模板文件夹到用户自定义模板目录 <code>~/Library/Developer/Xcode/Templates/</code> ，重启即可</p><p><strong>2）完全自定义模板</strong><br>例如创建一个带有导航栏和标签栏控制器的工程<br>1、进入模板目录<br><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project\\ Templates/iOS</code></p><p>2、手动创建<code>CustomTemplate</code>文件夹<br><img src="http://upload-images.jianshu.io/upload_images/328273-c013cfd53a4b00c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><p>将原来XCode6中的“Empty Application”模板拷贝过来（可以从上文提到的Github中下载），修改增加一些必要字段。<br>Plist文件内容如下图<br><img src="http://upload-images.jianshu.io/upload_images/328273-f9cd3a40efa73169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><p>PS:基于标签栏和导航栏工程模板文件相关内容详见文末<a href="https://github.com/huluo666/CustomTemplate">Github</a><br>相关字段含义查阅3.1</p><p><strong>3.1 Xcode模板 文件宏</strong></p><table><thead><tr><th align="left">占位符</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>___FILENAME___</code></td><td align="left">文件名包括后缀</td></tr><tr><td align="left"><code>___PROJECTNAME___</code></td><td align="left">当前工程名，在创建工程时设置的</td></tr><tr><td align="left"><code>___FULLUSERNAME___</code></td><td align="left">当前登录用户的名字</td></tr><tr><td align="left"><code>___DATE___</code></td><td align="left">当前日期 ，格式为MM&#x2F;DD&#x2F;YY</td></tr><tr><td align="left"><code>___FILEBASENAMEASIDENTIFIER___</code></td><td align="left">不带后缀的文件名</td></tr><tr><td align="left"><code>___projectnameasidentifier___</code></td><td align="left">项目名称转换为有效的C风格的标识符</td></tr><tr><td align="left"><code>___organizationname___</code></td><td align="left">在Xcode项目定义的组织名称</td></tr><tr><td align="left"><code>___time___</code></td><td align="left">当前时间</td></tr><tr><td align="left"><code>___year___</code></td><td align="left">前四位数的年份</td></tr></tbody></table><p>From:<a href="http://see.sl088.com/wiki/Xcode%E6%A8%A1%E6%9D%BF_%E6%96%87%E4%BB%B6%E5%AE%8F">http://see.sl088.com/wiki/Xcode%E6%A8%A1%E6%9D%BF_%E6%96%87%E4%BB%B6%E5%AE%8F</a></p><p><strong>3.2文件组成</strong><br>–TemplateInfo.plist（<code>必要</code>）：所有的模板属性设置都在这里。<br>–TemplateIcon.tiff（<code>可选</code>）：定义显示在new project的dialog中的模板图标。<br>– Main_iPhone.storyboard、Main_iPad.storyboard：要添加在项目中的文件。</p><p><strong>3.3TemplateInfo.plist字段详解</strong></p><ul><li><code>Kind</code>（必须） 模板类型<br>Xcode.Xcode3.ProjectTemplateUnitKind –指定该模板是工程(项目)模板<br>Xcode.IDEFoundation.TextSubstitutionFileTemplateKind –指定该模板是文件模板</li><li><code>SortOrder</code> 这个是排序的值，该模板显示在new project的dialog中的位置索引,可以设置在界面中的摆放位置，值越大越前面</li><li><code>Ancestors</code>：要继承的模板。也就是模板的“父类”，从父类那里继承一些模板的基础属性，可以有多个父类。</li><li><code>Concrete</code>：设置为YES的模板才可以显示在new project的dialog中，此时这个模板不能被其他模板继承。</li><li><code>Description</code>：就是Description描述信息。</li><li><code>Identifier</code>：模板的唯一标示符，若模板B要继承模板A，就在模板B的Ancestors中写上模板A的Identifier。</li><li><code>Nodes</code>：定义要添加到项目中的文件，目标结构节点。</li><li><code>Definitions</code>：将Nodes中定义的文件添加到项目中（相关.h&#x2F;.m文件）。</li><li><code>Options</code>：定义在new project中选择模板后点击next后的dialog中的内容，如Product Name、Organization Name、Company Identifier、Bundle Identifier等。</li><li>在Suffixes里面添加自定义的模板类的类名以及模板类所继承的类名</li></ul><h4 id="四、其它应用实例"><a href="#四、其它应用实例" class="headerlink" title="四、其它应用实例"></a>四、其它应用实例</h4><p><strong>iOS开发网络适配https，修改模板方式解决</strong><br>iOS9让所有的HTTP默认使用了HTTPS，App无法正常访问HTTP链接。<br><code>1、常规解决方法</code>：<br> <a href="https://segmentfault.com/a/1190000002933776">iOS9 HTTP 不能正常使用的解决办法</a><br><code>2、Xcode模板修改步骤</code><br><strong>步骤1、：进入工程模板目录或直接打开编辑</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open  /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project\\ Templates/iOS/Application/Cocoa\\ Touch\\ Application\\ Base.xctemplate/TemplateInfo.plist</span><br></pre></td></tr></table></figure><p>编辑<code>Cocoa Touch Application Base.xctemplate/TemplateInfo.plist</code>文件</p><p><strong>步骤2、添加key&amp;value值</strong></p><ul><li><p>在Nodes中增加一个item， 值（右侧）设置为Info.plist:NSAppTransportSecurity  。</p></li><li><p>在Definitions字段下增加item， 键（左侧）设置为Info.plist:NSAppTransportSecurity ，值（右侧）设置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/328273-daa93a71cc9df9f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p><p>注意第4点，里面内容不仅仅是所见的<code>NSAppTransportSecurity</code>，包含以上字典所有内容</p><p><code>Github</code> <strong><a href="https://github.com/huluo666/CustomTemplate">CustomTemplate</a></strong></p><p>下载安装：<br>打开&#x2F;ios文件目录，将<code>UITbaBar&amp;Nav.xctemplate</code>模板放置在<code>CustomTemplate</code>目录,如图3所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project\\ Templates/iOS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用数据类型对应字节数</title>
      <link href="/2016/05/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F/"/>
      <url>/2016/05/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>常用数据类型对应字节数</strong>  可用如<code>sizeof（char),sizeof(char*)</code>等得出</p><p> <code>32位编译器：</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">char ：1个字节</span><br><span class="line">char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）</span><br><span class="line">short int : 2个字节</span><br><span class="line">int：  4个字节</span><br><span class="line">unsigned int : 4个字节</span><br><span class="line">float:  4个字节</span><br><span class="line">double:   8个字节</span><br><span class="line">long:   4个字节</span><br><span class="line">long long:  8个字节</span><br><span class="line">unsigned long:  4个字节</span><br></pre></td></tr></table></figure><p>  <code>64位编译器：</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">char ：1个字节</span><br><span class="line">char*(即指针变量): 8个字节</span><br><span class="line">short int : 2个字节</span><br><span class="line">int：  4个字节</span><br><span class="line">unsigned int : 4个字节</span><br><span class="line">float:  4个字节</span><br><span class="line">double:   8个字节</span><br><span class="line">long:   8个字节</span><br><span class="line">long long:  8个字节</span><br><span class="line">unsigned long:  8个字节</span><br></pre></td></tr></table></figure><p>固定字符串建议使用（字符串全局静态常量）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> OSSXMLDictionaryAttributesKey   = <span class="string">@&quot;__attributes&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> OSSXMLDictionaryCommentsKey     = <span class="string">@&quot;__comments&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> OSSXMLDictionaryTextKey         = <span class="string">@&quot;__text&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> OSSXMLDictionaryNodeNameKey     = <span class="string">@&quot;__name&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac隐藏/显示桌面图标</title>
      <link href="/2016/05/12/Mac%E9%9A%90%E8%97%8F:%E6%98%BE%E7%A4%BA%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/"/>
      <url>/2016/05/12/Mac%E9%9A%90%E8%97%8F:%E6%98%BE%E7%A4%BA%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F;隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder CreateDesktop -bool FALSE;killall Finder</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete com.apple.finder CreateDesktop;killall Finder</span><br></pre></td></tr></table></figure><p>实用工具-AppleScript编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">display dialog &quot;桌面图标设置为可见或隐藏?&quot; buttons &#123;&quot;可见&quot;, &quot;隐藏&quot;&#125; with icon 2 with title &quot;Switch to presentation mode&quot; default button 1</span><br><span class="line">set switch to button returned of result</span><br><span class="line">if switch is &quot;隐藏&quot; then</span><br><span class="line">do shell script &quot;defaults write com.apple.finder CreateDesktop -bool FALSE;killall Finder&quot;</span><br><span class="line">else</span><br><span class="line">do shell script &quot;defaults delete com.apple.finder CreateDesktop;killall Finder&quot;</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><p>显示隐藏文件&#x2F;文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//显示</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</span><br><span class="line"></span><br><span class="line">//隐藏</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</span><br><span class="line"></span><br><span class="line"> //OS X Mountain Lion </span><br><span class="line"> defaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder</span><br><span class="line"> defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shell脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">STATUS=`defaults read com.apple.finder AppleShowAllFiles` </span><br><span class="line">if [ $STATUS == YES ]; </span><br><span class="line">then </span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles NO </span><br><span class="line">else </span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles YES </span><br><span class="line">fi </span><br><span class="line">killall Finderß</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell文件操作： pushd,popd,dirs</title>
      <link href="/2016/05/11/Shell%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%9Apushd%E3%80%81popd%EF%BC%8Cdirs/"/>
      <url>/2016/05/11/Shell%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%9Apushd%E3%80%81popd%EF%BC%8Cdirs/</url>
      
        <content type="html"><![CDATA[<p><strong>目录切换</strong></p><p>“-“等同于 <code>$OLDPWD</code>变量。<code>$OLDPWD</code>变量就是bash所记录的前一个目录</p><p>cd - 的作用是可以回到前一个目录</p><p><strong>多个目录之间切换 pushd popd dirs</strong></p><ul><li><code>pushd</code> : 切换到作为参数的目录，并把原目录和当前目录压入到一个虚拟的堆栈中；如果不指定参数，则会回到前一个目录，并把堆栈中最近的两个目录作交换</li><li><code>popd</code>： 弹出堆栈中最近的目录</li><li><code>dirs</code>:    列出当前堆栈中保存的目录列表</li></ul><p><code>dirs</code>说明:<br>1、 -p参数可以每行一个目录的形式显示堆栈中的目录列表；-v参数可以在目录前加上编号<br>2、 有 -v时，不添加 -p也可以每行一个目录的形式显示<br>3、 最近压入堆栈的目录位于最上面</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用runtime进行夜间模式图片加载</title>
      <link href="/2016/05/11/%E5%88%A9%E7%94%A8runtime%E8%BF%9B%E8%A1%8C%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
      <url>/2016/05/11/%E5%88%A9%E7%94%A8runtime%E8%BF%9B%E8%A1%8C%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>项目之前利用自定义类方法实现夜间模式图片的加载，但是用的自定义方法显然没有系统方法看起来舒服，代码移植性好，更重要的是不能使用KSImageNamed插件提示图片，相比之前各种前后缀，分辨率等判断，利用<code>runtime</code>看起来简洁多了,使用方法与系统一样。</p><p>说明：对于大部分图片是不分白天，夜间模式的，所有首先查找正常图片，如果没有找到，判断App为哪种模式进行加载。白天模式-图片加上后缀<code>_day</code>，夜间<code>_night</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;UIImage+imageNamed.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">imageNamed</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)load&#123;</span><br><span class="line">    <span class="comment">//方法交换应该被保证，在程序中只会执行一次</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">//方法交换</span></span><br><span class="line">        Method m1 = class_getClassMethod([<span class="built_in">UIImage</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(imageNamed:));</span><br><span class="line">        Method m2 =  class_getClassMethod([<span class="built_in">UIImage</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(HJ_imageNamed:));</span><br><span class="line">        method_exchangeImplementations(m1, m2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义加载方法</span></span><br><span class="line">+(<span class="built_in">UIImage</span> *)HJ_imageNamed:(<span class="built_in">NSString</span> *)imageName&#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *result = <span class="literal">nil</span>;</span><br><span class="line">    result = [<span class="built_in">UIImage</span> HJ_imageNamed:imageName];</span><br><span class="line">    <span class="type">BOOL</span> isNight=<span class="literal">YES</span>;</span><br><span class="line">    <span class="comment">//2、白天、夜间模式</span></span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNight) &#123;</span><br><span class="line">            imageName = [imageName stringByAppendingString:<span class="string">@&quot;_night&quot;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            imageName = [imageName stringByAppendingString:<span class="string">@&quot;_day&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        result = [<span class="built_in">UIImage</span> HJ_imageNamed:imageName];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js学习之 控制台打印console</title>
      <link href="/2016/05/10/js%E5%AD%A6%E4%B9%A0%E4%B9%8B%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0console/"/>
      <url>/2016/05/10/js%E5%AD%A6%E4%B9%A0%E4%B9%8B%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0console/</url>
      
        <content type="html"><![CDATA[<h4 id="一、所支持打印类型"><a href="#一、所支持打印类型" class="headerlink" title="一、所支持打印类型"></a>一、所支持打印类型</h4><p>%s：代替字符串，%d：代替整数，%f：代替浮点值，%o：代替Object</p><p>console清空控制台–<code>console.clear()</code></p><h4 id="二、console-debug，info，warn，error"><a href="#二、console-debug，info，warn，error" class="headerlink" title="二、console.debug，info，warn，error"></a>二、console.debug，info，warn，error</h4><p>一、显示信息的命令<br>console.log();  &#x2F;&#x2F;控制台输入 网页中不会输出<br>console.info();  &#x2F;&#x2F;一般信息<br>console.debug();  &#x2F;&#x2F;除错信息<br>console.warn();  &#x2F;&#x2F;警告提示<br>console.error();  &#x2F;&#x2F;错误提示</p><p> “console.log();” 可以用来取代 “alert();” 或 “document.write();” 比如，在网页中写入 “console.log(“Hello World”);” 然后会在控制台输入，但是网页中并不会输入。方法使用一模一样，只是显示的图标和文字颜色不一样。</p><h4 id="三、-console-assert-expression-object-…"><a href="#三、-console-assert-expression-object-…" class="headerlink" title="三、 console. assert(expression[, object, …])"></a>三、 console. assert(expression[, object, …])</h4><p>assert 方法类似于单元测试中的断言，当 expression 表达式为 false 的时候，输出后面的信息,e.g：<br>注：assert 方法在 firebuglite 不支持，Chrome 和 FireBug 支持<br>console.clear() -该方法清空 console 中的所有信息<br>console.dir(object)-以列表的方式打印 object 对象中的所有属性，e.g：<br>console.dirxml(node)-把 <a href="http://liuxiaofan.com/">html</a> 元素的<a href="http://liuxiaofan.com/">html</a> 代码打印出来，e.g:<br>console.trace()<br>trace 方法可以查看当前函数的调用堆栈信息，即当前函数是如何调用的。</p><p><a href="http://es6.ruanyifeng.com/#docs/destructuring">http://es6.ruanyifeng.com/#docs/destructuring</a></p><p><a href="http://www.leixuesong.cn/1849">JS console方法详解</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html">Firebug控制台详解</a></p><p><a href="http://liuxiaofan.com/2013/12/12/1582.html">控制台命令Console详解</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime text 编译javascript</title>
      <link href="/2016/05/09/sublime%20text%20%E7%BC%96%E8%AF%91javascript/"/>
      <url>/2016/05/09/sublime%20text%20%E7%BC%96%E8%AF%91javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>使用Brew安装</strong></p><p>安装Node and NPM <code>brew uninstall node</code></p><p>升级  <code>brew upgrade node</code></p><h3 id="一、添加node-js的build-system设置方法"><a href="#一、添加node-js的build-system设置方法" class="headerlink" title="一、添加node.js的build system设置方法"></a>一、添加node.js的build system设置方法</h3><p>打开 Tools -&gt; Build System -&gt; New Build System <br>新建 node.sublime-build 编译系统配置文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;cmd&quot;: [&quot;/usr/local/bin/node&quot;, &quot;$file&quot;],</span><br><span class="line">  &quot;selector&quot;: &quot;source.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存为，node.sublime-build <br>以后，写完node.js测试代码后，可以直接 Command + B 运行代码</p><p>如果需要运行ES6</p><p>参考：<a href="https://segmentfault.com/a/1190000002291126">Sublime Text内运行javascript(ES6)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cmd&quot;: [&quot;/usr/local/bin/node&quot;, &quot;--use-strict&quot;, &quot;--harmony&quot;, &quot;$file&quot;],</span><br><span class="line">    &quot;selector&quot;: &quot;source.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、系统"><a href="#二、系统" class="headerlink" title="二、系统"></a>二、系统</h3><p>注意用<code>debug()</code>替换<code>console.log()</code>，可支持到es5。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;cmd&quot;: [&quot;jsc&quot;, &quot;$file&quot;],</span><br><span class="line">&quot;selector&quot;: &quot;source.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译配置文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Users/pconline/Library/Application\ Support/Sublime\ Text\ 3/Packages/User</span></span><br></pre></td></tr></table></figure><p><a href="http://www.wikihow.com/Create-a-Javascript-Console-in-Sublime-Text">How to Create a Javascript Console in Sublime Text</a></p><p><a href="https://blog.netsh.org/posts/sublime-text-javascript-console_1820.netsh.html#-jsc-javascript-mac-os-x">https://blog.netsh.org/posts/sublime-text-javascript-console_1820.netsh.html#-jsc-javascript-mac-os-x</a></p><p>插件</p><p><a href="http://www.cnblogs.com/hykun/p/sublimeText3.html">http://www.cnblogs.com/hykun/p/sublimeText3.html</a></p><p>SublimeText-Nodejs</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript学习之始：听大神建议，少走弯路</title>
      <link href="/2016/05/08/javascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A7%8B%EF%BC%9A%E5%90%AC%E5%A4%A7%E7%A5%9E%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%91%E8%B5%B0%E5%BC%AF%E8%B7%AF/"/>
      <url>/2016/05/08/javascript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A7%8B%EF%BC%9A%E5%90%AC%E5%A4%A7%E7%A5%9E%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%91%E8%B5%B0%E5%BC%AF%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/20459873">若想要学习 JavaScript，有哪些最值得推荐的书籍或教程？</a></p><p><a href="https://www.zhihu.com/question/19809484?rf=20315724">有哪些关于前端开发技术（HTML、CSS 和 JavaScript 等）的值得推荐的书籍？</a></p><p><a href="https://www.zhihu.com/question/19834302">零基础的前端开发初学者应如何系统地学习？</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></p><p><a href="http://www1.w3cfuns.com/topic-64.html">http://www1.w3cfuns.com/topic-64.html</a></p><p><a href="http://www.liaoxuefeng.com/">http://www.liaoxuefeng.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode插件开发</title>
      <link href="/2016/05/05/XCode%208%20%20%E5%8D%87%E7%BA%A7%E5%90%8E%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/"/>
      <url>/2016/05/05/XCode%208%20%20%E5%8D%87%E7%BA%A7%E5%90%8E%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://onevcat.com/2013/02/xcode-plugin/">https://onevcat.com/2013/02/xcode-plugin/</a></p><p><strong>插件位置</strong></p><p>在 Xcode 启动的时候，它会检查插件目录</p><p><code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Users/pconline/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">open .</span></span><br></pre></td></tr></table></figure><p>由于开发测试会生成N多插件，直接删除.xcplugin后缀名文件即可。</p><p><code>defaults delete com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcode-7.2.1</code></p><h3 id="通过模板实现"><a href="#通过模板实现" class="headerlink" title="通过模板实现"></a>通过模板实现</h3><p> 1）Xcode插件开发模板</p><p>可通过<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>直接安装</p><p>地址：<a href="https://github.com/kattrali/Xcode-Plugin-Template">https://github.com/kattrali/Xcode-Plugin-Template</a></p><p><a href="http://gold.xitu.io/entry/5707426a2e958a0057b504a1">http://gold.xitu.io/entry/5707426a2e958a0057b504a1</a></p><p><code>+ (void) pluginDidLoad: (NSBundle*) plugin</code></p><p>方法。 该方法会在 Xcode 加载插件的时候被调用，可以用来做一些初始化的操作。通常这个类是一个单例，并 Observe 了</p><p>每个xcode版本UUID不同，获取UUID方法</p><p><code>defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID</code></p><p><a href="http://www.jianshu.com/p/c50174f56d69?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io">Xcode插件开发教程指南</a></p><p><a href="http://blog.csdn.net/yohunl/article/details/50816829">怎样创建一个xcode插件 第一部分&#x2F;3部分</a></p><p> <a href="http://blog.csdn.net/yohunl/article/details/51010690">怎样创建一个xcode插件 第2部分&#x2F;3部分</a></p><h2 id="Xcode7-插件制作入门"><a href="#Xcode7-插件制作入门" class="headerlink" title="Xcode7 插件制作入门"></a>Xcode7 插件制作入门</h2><p><a href="https://github.com/luisobo/Xcode-RuntimeHeaders">https://github.com/luisobo/Xcode-RuntimeHeaders</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS常用计算总结</title>
      <link href="/2016/05/05/iOS%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E6%80%BB%E7%BB%93/"/>
      <url>/2016/05/05/iOS%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>计算如网易，今日头条等新闻栏目选项卡点击按钮后的偏移量</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span>  <span class="built_in">CGPoint</span> countContentOffset(<span class="built_in">UIButton</span> *sender,<span class="built_in">UIScrollView</span> *scrollView) &#123;</span><br><span class="line">    <span class="built_in">UIButton</span> *currentBtn = sender;</span><br><span class="line">    <span class="built_in">CGRect</span>  rect = currentBtn.frame;</span><br><span class="line">    <span class="built_in">CGFloat</span> midX = <span class="built_in">CGRectGetMidX</span>(rect);</span><br><span class="line">    <span class="built_in">CGFloat</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> contentWidth = scrollView.contentSize.width;</span><br><span class="line">    <span class="built_in">CGFloat</span> halfWidth = <span class="built_in">CGRectGetWidth</span>(scrollView.bounds) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="comment">//在最左和最右时，标签没必要滚动到中间位置。</span></span><br><span class="line">    <span class="keyword">if</span> (midX &lt; halfWidth) &#123;</span><br><span class="line">        offset = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midX &gt; contentWidth - halfWidth) &#123;</span><br><span class="line">        offset = contentWidth - <span class="number">2</span> * halfWidth;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        offset = midX - halfWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CGPoint</span> contentOffset=<span class="built_in">CGPointMake</span>(offset, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> contentOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当前scrollview索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSUInteger index = scrollView.contentOffset.x / scrollView.width;</span><br></pre></td></tr></table></figure><p>获取选中按钮和取消选择中按钮</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> value = ABS(pageView.scrollView.contentOffset.x / pageView.scrollView.frame.size.width);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUInteger</span> oneIndex = (<span class="built_in">NSUInteger</span>)value;</span><br><span class="line"><span class="built_in">NSUInteger</span> twoIndex = oneIndex + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> twoPercent = value - oneIndex;</span><br><span class="line"><span class="built_in">CGFloat</span> onePercent = <span class="number">1</span> - twoPercent;</span><br><span class="line"><span class="comment">//selectButton</span></span><br><span class="line"><span class="built_in">UIButton</span> *oldButton = (<span class="built_in">UIButton</span> *)[<span class="keyword">self</span>.scrollView viewWithTag:oneIndex + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">UIButton</span> *newButton = (<span class="built_in">UIButton</span> *)[<span class="keyword">self</span>.scrollView viewWithTag:twoIndex + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h4 id="颜色过渡效果"><a href="#颜色过渡效果" class="headerlink" title="颜色过渡效果"></a>颜色过渡效果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  根据scrollview.contentoffet偏移量改变RGB颜色</span><br><span class="line"> */</span><br><span class="line">static inline  UIColor* ChangeRGBColor(UIColor *fromColor,UIColor *toColor,CGFloat percentage) &#123;</span><br><span class="line">    // get the RGBA values from the colours</span><br><span class="line">    CGFloat fromRed, fromGreen, fromBlue, fromAlpha;</span><br><span class="line">    [fromColor getRed:&amp;fromRed green:&amp;fromGreen blue:&amp;fromBlue alpha:&amp;fromAlpha];</span><br><span class="line"></span><br><span class="line">    CGFloat toRed, toGreen, toBlue, toAlpha;</span><br><span class="line">    [toColor getRed:&amp;toRed green:&amp;toGreen blue:&amp;toBlue alpha:&amp;toAlpha];</span><br><span class="line"></span><br><span class="line">    //calculate the actual RGBA values of the fade colour</span><br><span class="line">    CGFloat red = (toRed - fromRed) * percentage + fromRed;</span><br><span class="line">    CGFloat green = (toGreen - fromGreen) * percentage + fromGreen;</span><br><span class="line">    CGFloat blue = (toBlue - fromBlue) * percentage + fromBlue;</span><br><span class="line">    CGFloat alpha = (toAlpha - fromAlpha) * percentage + fromAlpha;</span><br><span class="line"></span><br><span class="line">    // return the fade colour</span><br><span class="line">    return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tableView不顶格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) &#123;</span><br><span class="line">    self.edgesForExtendedLayout = UIRectEdgeNone;</span><br><span class="line">    self.extendedLayoutIncludesOpaqueBars = NO;</span><br><span class="line">    self.automaticallyAdjustsScrollViewInsets = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac  ffmpeg 使用</title>
      <link href="/2016/05/05/Mac%20%20ffmpeg%20%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/05/05/Mac%20%20ffmpeg%20%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>1、安装ffmpeg—<code>brew install ffmpeg</code></p><p>如果想要添加<code>libfdk_aac</code>或<code>libvpxd</code>等库(这两个库是高度推荐安装的)，可以输入以下包含额外推荐选项的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265</span><br></pre></td></tr></table></figure><p>ffmpeg需要的依赖包几乎都可以通过brew install安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install automake celt faac fdk-aac lame libass libtool libvorbis libvpx libvo-aacenc opencore-amr openjpeg opus sdl schroedinger shtool speex texi2html theora wget x264 xvid yasm</span><br></pre></td></tr></table></figure><p>也可以通过一下网址下载</p><ul><li><a href="http://evermeet.cx/ffmpeg/">http://evermeet.cx/ffmpeg/</a></li><li><a href="http://ffmpegmac.net/">http://ffmpegmac.net/</a></li></ul><p>2、查看ffmpeg info—<code>brew info ffmpeg</code></p><p>3、升级ffmpeg   <code>brew update &amp;&amp; brew upgrade ffmpeg</code></p><p>示例</p><ol><li>使用命令<code>ffmpeg -i http://...m3u8 -c copy out.mkv</code>将视频流下载并合并成 out.mkv。</li></ol><p>相关应用</p><p>视频格式转换器 </p><p>VidConvert 是一款非常不错的视频格式转换器，在开始使用之前，其需要安装转换引擎——FFmpeg</p><p>More：</p><p><a href="http://blog.csdn.net/leixiaohua1020/article/details/15811977">FFMPEG视音频编解码零基础学习方法</a></p><p><a href="http://www.qiaogao.net/lessons/2014/08/02/ffmpeg/">http://www.qiaogao.net/lessons/2014/08/02/ffmpeg/</a></p><p><a href="http://www.macx.cn/thread-2118809-1-1.html">小教程 利用 iFFmpeg 下载网上 .m3u8 的视频</a></p><h1 id="HLS-iOS视频播放服务架构深入探究（二）"><a href="#HLS-iOS视频播放服务架构深入探究（二）" class="headerlink" title="HLS-iOS视频播放服务架构深入探究（二）"></a><a href="http://yangchao0033.github.io/blog/2016/02/14/hls-2/">HLS-iOS视频播放服务架构深入探究（二）</a></h1><p>[一键下载M3U8&#x2F;HLS 并保存为TS文件](一键下载M3U8&#x2F;HLS 并保存为TS文件)</p><p><a href="https://github.com/Minlison/MLSDownloader">https://github.com/Minlison/MLSDownloader</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode中$(SRCROOT)和$(PROJECT_DIR)区别</title>
      <link href="/2016/05/04/$(SRCROOT)%E5%92%8C$(PROJECT_DIR)%E5%8C%BA%E5%88%AB/"/>
      <url>/2016/05/04/$(SRCROOT)%E5%92%8C$(PROJECT_DIR)%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>$(SRCROOT)</p><p>代表的时项目根目录下</p><p>工程根目录（一般为.xcodeproj所在目录）</p><p>$(PROJECT_DIR)</p><p>代表的是整个项目,</p><p>.xcodeproj所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./ 当前目录</span><br><span class="line"></span><br><span class="line">../ 父级目录</span><br><span class="line"></span><br><span class="line">/ 根目录</span><br></pre></td></tr></table></figure><p>library not found for -xxx</p><p><a href="http://www.jianshu.com/p/84c0dc15f080">http://www.jianshu.com/p/84c0dc15f080</a></p>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FMDB 升级</title>
      <link href="/2016/05/04/FMDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7%E5%A2%9E%E5%8A%A0%E8%A1%A8%E5%AD%97%E6%AE%B5/"/>
      <url>/2016/05/04/FMDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7%E5%A2%9E%E5%8A%A0%E8%A1%A8%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/a416863220/article/details/48787723">FMDB数据库升级增加表字段</a></p><p><a href="http://www.jianshu.com/p/57c3f9adffd9">http://www.jianshu.com/p/57c3f9adffd9</a></p><p><a href="http://www.zhimengzhe.com/IOSkaifa/40090.html">http://www.zhimengzhe.com/IOSkaifa/40090.html</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Homebrew使用</title>
      <link href="/2016/05/04/Mac%20Homebrew%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/05/04/Mac%20Homebrew%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>mac系统也是基于unix的系统，所以也继承类很多unix的特性，包括软件的编译，安装等。<code>ubuntu</code>下有快捷命令<code>apt-get install</code>来快速安装软件。centos下有<code>yum install</code>来快速安装。所以，mac下也有一种方式，就是使用<code>brew</code>。</p><p>官网：<a href="http://brew.sh/index_zh-cn.html">http://brew.sh/index_zh-cn.html</a>  中文： <a href="http://brew.sh/">http://brew.sh/</a></p><p><strong>一、安装</strong></p><p>终端键入一下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><ul><li>安装完成后最好执行 <code>brew update</code> 以保证Homebrew是最新版本。</li><li>运行 <code>brew doctor</code> 以确保系统已经能正常使用brew。</li></ul><p><code>brew -v</code> 查看版本</p><p><code>brew update</code>升级，版本过低将会导致无法安装后续几个组件。</p><p>1、更新brew本身</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、使用brew安装软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install soft_name</span><br><span class="line">// soft_name为你所要安装软件的标志，如使用brew安装git</span><br><span class="line">brew install git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、使用brew卸载软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall soft_name</span><br><span class="line">// soft_name为你所要卸载软件的标志，如使用brew卸载git</span><br><span class="line">brew uninstall git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、显示使用brew安装的软件列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、更新软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade        // 更新所有使用brew安装的软件</span><br><span class="line">brew upgrade git    // 更新某个使用brew安装的软件</span><br></pre></td></tr></table></figure><p>6、查看哪些软件需要更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><p>7、查找软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 当你记不清软件的名字的时候，你可以使用search，只需要写去几个字母，他就会帮你联想，并把所有可能的结果输出给你</span><br><span class="line">brew search</span><br></pre></td></tr></table></figure><p><a href="http://hcysun.me/2015/11/21/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85mongodb/">Mac下使用brew安装mongodb</a></p><p><a href="https://www.zybuluo.com/phper/note/87055">https://www.zybuluo.com/phper/note/87055</a></p><p><a href="http://ksmx.me/homebrew-cask-cli-workflow-to-install-mac-applications/">http://ksmx.me/homebrew-cask-cli-workflow-to-install-mac-applications/</a></p><p><a href="http://gnahceg.github.io/install-OSX.html">http://gnahceg.github.io/install-OSX.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac开发NSTask使用</title>
      <link href="/2016/05/04/NSTask%E6%95%99%E7%A8%8B/"/>
      <url>/2016/05/04/NSTask%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>1、NSTask简介</p><p>NSTask是MAC OS X用来执行系统命令的一个类库。在Cocoa编程中遇到需要运行一些脚本或者Shell命令时，NSTask可能是一个不错的选择。使用NSTask类，你的程序可以执行另一个程序并获取程序运行的结果。</p><p>1、NSTask创建的是一个独立运行的进程，不会与主程序共享存储空间。</p><p>2、一个NSTask对象只能运行一次。之后试图运行任务会产生一个错误。</p><p>1、NSTask创建的是一个独立运行的进程，不会与主程序共享存储空间。<br>2、一个NSTask对象只能运行一次。之后试图运行任务会产生一个错误。<br>3、NSTask 在Swift 中与objectivec中的不同</p><pre><code>•objectivec中, 是NSTask类•Swift 中, 是Process类</code></pre><h4 id="2-NSTask-在Swift-中与objectivec中的不同"><a href="#2-NSTask-在Swift-中与objectivec中的不同" class="headerlink" title="2. NSTask 在Swift 中与objectivec中的不同"></a>2. NSTask 在Swift 中与objectivec中的不同</h4><ul><li>objectivec中, 是NSTask类</li><li>Swift 中, 是Process类</li></ul><h4 id="4-NSTask-相关权限"><a href="#4-NSTask-相关权限" class="headerlink" title="4. NSTask 相关权限"></a>4. NSTask 相关权限</h4><p>如果使用NSTask访问网络，或存取数据，需要开启以下权限</p><p>1、开启网络访问权限</p><p>2、开启了用户选择文件的读写权限</p><h4 id="7-后语"><a href="#7-后语" class="headerlink" title="7. 后语"></a>7. 后语</h4><p>关于NSTask的使用并不十分复杂，但如果想实现强大的需求,最好有一些必备的Shell编程知识，另外值得注意就是沙盒权限问题,文中的一下疑问或者意见,大家可以写在评论区进行讨论，最后希望大家周末愉快~</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vi/Vim 基本操作</title>
      <link href="/2016/05/04/Vi:Vim%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2016/05/04/Vi:Vim%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 在默认的&quot;指令模式&quot;下按 i 进入编辑模式</span><br><span class="line">2. 在非指令模式下按 ESC 返回指令模式</span><br><span class="line">3. 在&quot;指令模式&quot;下输入:</span><br><span class="line">:w保存当前文件</span><br><span class="line">:q 退出编辑,如果文件为保存需要用强制模式</span><br><span class="line">:q!强制退出不保存修改</span><br><span class="line">:wq组合指令, 保存并退出</span><br><span class="line">4. 在&quot;指令模式&quot;下移动:</span><br><span class="line">h左</span><br><span class="line">j下</span><br><span class="line">k上</span><br><span class="line">l右</span><br><span class="line">#翻页</span><br><span class="line">Shift + f(front)下一页</span><br><span class="line">Shift + b(back)上一页</span><br></pre></td></tr></table></figure><p><a href="https://www.renfei.org/blog/mac-os-x-terminal-101.html">Mac OS X Terminal 101：终端使用初级教程</a></p><p><a href="http://witcheryne.iteye.com/blog/1148745">http://witcheryne.iteye.com/blog/1148745</a></p><p><a href="http://mac.shenyu.me/vim/command.html">http://mac.shenyu.me/vim/command.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web编辑器codemirror使用</title>
      <link href="/2016/05/04/web%E7%BC%96%E8%BE%91%E5%99%A8codemirror%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/05/04/web%E7%BC%96%E8%BE%91%E5%99%A8codemirror%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>web编辑器codemirror使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/theme/seti.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/theme/solarized.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/codemirror.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/codemirror.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/mode/clike/clike.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;myCode&quot;</span>&gt;</span>#input your Code here#<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> editor = <span class="title class_">CodeMirror</span>.<span class="title function_">fromTextArea</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCode&quot;</span>), &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lineNumbers</span>: <span class="literal">true</span>, <span class="comment">/* 定义是否显示行号 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">mode</span>: <span class="string">&quot;javascript&quot;</span>,  <span class="comment">/* 定义语法的类型，如果是html则为：text/html */</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">theme</span>: <span class="string">&quot;seti&quot;</span>, <span class="comment">/* 定义主题 */</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//value: &quot;设置显示的内容&quot;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//lineSeparator: &#x27;CRLF&#x27;, /*指定换行符*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">indentUnit</span>: <span class="number">4</span>,   <span class="comment">/*设置缩进的字符数，默认为2*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">smartIndent</span>: <span class="literal">true</span>, <span class="comment">/*自动缩进，默认为true*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//tabSize: 8, /*tab字符的宽度，默认为4*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">lineWiseCopyCut</span>: <span class="literal">false</span>,  <span class="comment">/*true时，如果当前没有选中文本，会自动选中当前行*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">dragDrop</span>: <span class="literal">false</span>,   <span class="comment">/*是否可以被拖拽*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">autofocus</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入选择主题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/theme/seti.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/theme/solarized.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/codemirror.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/codemirror.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/mode/clike/clike.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/codemirror/5.28.0/theme/base16-light.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Theme Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;jsoncode&quot;</span> <span class="attr">name</span>=<span class="string">&quot;jsoncode&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span>&gt;</span>#code#<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>选择主题:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;selectTheme()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>default<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>solarized<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>seti<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>base16-light<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> editor = <span class="title class_">CodeMirror</span>.<span class="title function_">fromTextArea</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;jsoncode&quot;</span>), &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lineNumbers</span>: <span class="literal">true</span>, <span class="comment">/* 定义是否显示行号 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">lineWrapping</span>: <span class="literal">true</span>, <span class="comment">/*自动换行*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">matchBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">readOnly</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">theme</span>: <span class="string">&quot;solarized&quot;</span> <span class="comment">/* 定义主题 */</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;select&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">selectTheme</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> theme = input.<span class="property">options</span>[input.<span class="property">selectedIndex</span>].<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">editor.<span class="title function_">setOption</span>(<span class="string">&quot;theme&quot;</span>, theme);</span></span><br><span class="line"><span class="language-javascript">location.<span class="property">hash</span> = <span class="string">&quot;#&quot;</span> + theme;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> choice = (location.<span class="property">hash</span> &amp;&amp; location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)) ||</span></span><br><span class="line"><span class="language-javascript"> (<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">decodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">slice</span>(<span class="number">1</span>)));</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (choice) &#123;</span></span><br><span class="line"><span class="language-javascript">input.<span class="property">value</span> = choice;</span></span><br><span class="line"><span class="language-javascript">editor.<span class="title function_">setOption</span>(<span class="string">&quot;theme&quot;</span>, choice);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">CodeMirror</span>.<span class="title function_">on</span>(<span class="variable language_">window</span>, <span class="string">&quot;hashchange&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> theme = location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (theme) &#123; input.<span class="property">value</span> = theme; <span class="title function_">selectTheme</span>(); &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>支持语言列表</p><p><a href="http://codemirror.net/mode/index.html">http://codemirror.net/mode/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS如何避免App Crash</title>
      <link href="/2016/05/03/iOS%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8DApp%20Crash/"/>
      <url>/2016/05/03/iOS%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8DApp%20Crash/</url>
      
        <content type="html"><![CDATA[<p><strong>获取崩溃信息</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">NSSetUncaughtExceptionHandler</span>(&amp;uncaughtExceptionHandler);     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> uncaughtExceptionHandler(<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@&quot;CRASH: %@&quot;</span>, exception);</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@&quot;Stack Trace: %@&quot;</span>, [exception callStackSymbols]);         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">BOOL</span>) isValueOfKeyIsNull(<span class="type">id</span> response)&#123;</span><br><span class="line">        <span class="keyword">if</span>([response==[<span class="built_in">NSNull</span> null]])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@try...@catch</code>避免崩溃</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)functionInsideWhichAppIsCrashing</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span>* arraytest = @[<span class="string">@&quot;1&quot;</span>,<span class="string">@&quot;2&quot;</span>];</span><br><span class="line">    <span class="keyword">@try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Your crashing code goes here</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Object: %@&quot;</span>,arraytest[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Print exception information</span></span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@&quot;NSException caught&quot;</span> );</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@&quot;Name: %@&quot;</span>, exception.name);</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@&quot;Reason: %@&quot;</span>, exception.reason );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// // Do whatever you want to do in crash situation</span></span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@&quot;In finally block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">BOOL</span>)nullValue:(<span class="type">id</span>)value &#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="built_in">NSNull</span> *)value == [<span class="built_in">NSNull</span> null] || [<span class="string">@&quot;&lt;null&gt;&quot;</span> isEqualToString:(<span class="built_in">NSString</span> *)value] || [<span class="string">@&quot;(null)&quot;</span> isEqualToString:(<span class="built_in">NSString</span> *)value] || value == <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MarkQSchultz/QZObserver">https://github.com/MarkQSchultz/QZObserver</a></p><p><a href="https://github.com/PonyCui/KVSafe">https://github.com/PonyCui/KVSafe</a></p><p><a href="https://github.com/wuwen1030/XTSafeCollection">https://github.com/wuwen1030/XTSafeCollection</a></p><p><a href="https://github.com/jasenhuang/NSObjectSafe">https://github.com/jasenhuang/NSObjectSafe</a></p><p><a href="https://github.com/deput/RWJSONAid">https://github.com/deput/RWJSONAid</a></p><p><a href="https://github.com/xuvw/HKSafePush">https://github.com/xuvw/HKSafePush</a></p><p><a href="https://github.com/bigParis/SwizzlingMethod">https://github.com/bigParis/SwizzlingMethod</a></p><p><a href="https://github.com/LQQZYY/safetyDictionaryDemo/tree/master/NSDictionaryDemo">https://github.com/LQQZYY/safetyDictionaryDemo/tree/master/NSDictionaryDemo</a></p><p><a href="https://github.com/oenius/YGSafeKVO/tree/master/YGKVO">https://github.com/oenius/YGSafeKVO/tree/master/YGKVO</a></p><p><a href="https://github.com/allenhsu/NSDictionary-Accessors">https://github.com/allenhsu/NSDictionary-Accessors</a></p><p><a href="https://github.com/shaojiankui/NSDictionary-SafeAccess">https://github.com/shaojiankui/NSDictionary-SafeAccess</a></p><p><a href="https://github.com/gdier/SafeKVObject">https://github.com/gdier/SafeKVObject</a></p><p><a href="https://github.com/fengchuanxiang/SafeCollections">https://github.com/fengchuanxiang/SafeCollections</a></p><p><a href="https://github.com/LuKing4DB/SafeEX">https://github.com/LuKing4DB/SafeEX</a></p><p><a href="https://github.com/MarkQSchultz/QZObserver">https://github.com/MarkQSchultz/QZObserver</a></p><p><a href="https://github.com/crazyhf/SafeKVOHandle">https://github.com/crazyhf/SafeKVOHandle</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装node.js</title>
      <link href="/2016/04/28/Mac%20Node.js%20%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8D%87%E7%BA%A7/"/>
      <url>/2016/04/28/Mac%20Node.js%20%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="Mac-下安装node-js"><a href="#Mac-下安装node-js" class="headerlink" title="Mac 下安装node.js"></a>Mac 下安装node.js</h4><p><a href="http://www.jianshu.com/p/f21fdbdf47df">http://www.jianshu.com/p/f21fdbdf47df</a></p><p>确保mac电脑上已经安装<code>homeBrew</code>，使用下面命令安装<code>node.js</code></p><p><code>brew install node</code></p><h4 id="MAC-node-js升级"><a href="#MAC-node-js升级" class="headerlink" title="MAC node.js升级"></a>MAC node.js升级</h4><p><code>node.js</code>升级步骤</p><p>第一步，先查看本机<code>node.js</code>版本：<br><code>$ node -v</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第二步，清除node.js的cache：</span><br><span class="line">   $ sudo npm cache clean -f</span><br><span class="line"></span><br><span class="line">第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 &quot;n&quot;</span><br><span class="line">    $ sudo npm install -g n</span><br><span class="line"></span><br><span class="line">第四步，安装最新版本的node.js</span><br><span class="line">    $ sudo n stable</span><br><span class="line"></span><br><span class="line">第五步，再次查看本机的node.js版本：</span><br><span class="line">    $ node -v</span><br></pre></td></tr></table></figure><h2 id="mac-卸载node"><a href="#mac-卸载node" class="headerlink" title="mac 卸载node"></a>mac 卸载node</h2><p>brew 安装的node ，命令卸载</p><p><code>brew uninstall --force node</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode8 插件管理与使用</title>
      <link href="/2016/04/28/Xcode8%20%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/04/28/Xcode8%20%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>XCode 8  升级后配置修改</p><p><a href="http://www.jianshu.com/p/39443429f71d">[IOS开发]- XCode8继续使用xcode插件</a> </p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费测试接口JSON API</title>
      <link href="/2016/04/28/%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3API/"/>
      <url>/2016/04/28/%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3API/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.tung7.com/json_api.html">http://www.tung7.com/json_api.html</a></p><p><a href="http://www.superqq.com/blog/2014/12/05/cheng-xu-yuan-fu-li-ge-da-ping-tai-mian-fei-jie-kou-,fei-chang-gua-yong/">程序员福利各大平台免费接口，非常适用</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">国家气象局提供的天气预报接口</span><br><span class="line">接口地址：</span><br><span class="line">http://www.weather.com.cn/data/sk/101010100.html</span><br><span class="line">http://www.weather.com.cn/data/cityinfo/101010100.html</span><br><span class="line">http://m.weather.com.cn/data/101010100.html</span><br></pre></td></tr></table></figure><p>网易新闻</p><p><a href="http://c.m.163.com/nc/article/headline/T1348647853363/0-10.html">http://c.m.163.com/nc/article/headline/T1348647853363/0-10.html</a></p><p><a href="https://github.com/zhaotoday/free-apis">https://github.com/zhaotoday/free-apis</a></p><p><a href="https://github.com/yuyang2016/Chinese-Free-API">https://github.com/yuyang2016/Chinese-Free-API</a></p><p><a href="https://github.com/wulh8410/WebAPI">https://github.com/wulh8410/WebAPI</a></p><p><a href="http://nathanli.cn/2015/12/14/objectivec-%E5%85%83%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5-%E5%88%86%E7%B1%BB%E5%8A%A8%E6%80%81%E5%B1%9E%E6%80%A7/">http://nathanli.cn/2015/12/14/objectivec-%E5%85%83%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5-%E5%88%86%E7%B1%BB%E5%8A%A8%E6%80%81%E5%B1%9E%E6%80%A7/</a></p><p>模型转换</p><p><a href="https://github.com/ChenYongJunM/JSONGeneratePropertyString">https://github.com/ChenYongJunM/JSONGeneratePropertyString</a></p><p><a href="http://www.wuhaichao.com/jsonModel/?type=0">http://www.wuhaichao.com/jsonModel/?type=0</a></p><p><a href="https://github.com/EnjoySR/ESJsonFormat-Xcode">https://github.com/EnjoySR/ESJsonFormat-Xcode</a></p><p><a href="https://www.jianshu.com/p/951a82db533d">https://www.jianshu.com/p/951a82db533d</a></p><p><a href="https://www.jianshu.com/p/fd0dd21dd2c1">https://www.jianshu.com/p/fd0dd21dd2c1</a></p><p><a href="https://www.jianshu.com/p/fd63aeb9d7fa">https://www.jianshu.com/p/fd63aeb9d7fa</a></p><p><a href="https://github.com/yuwind/HHModelGenerate">https://github.com/yuwind/HHModelGenerate</a></p><p><a href="https://github.com/MrLee767201403/ModelCreate">https://github.com/MrLee767201403/ModelCreate</a></p><p><a href="https://github.com/XDislikeCode/JWModelTool">https://github.com/XDislikeCode/JWModelTool</a></p><p><a href="https://github.com/Rdxer/XXJSON2Model">https://github.com/Rdxer/XXJSON2Model</a></p><p><a href="https://github.com/hare27/HPropertyTool">https://github.com/hare27/HPropertyTool</a></p><p><a href="https://github.com/lsmakethebest/LSCreateModel">https://github.com/lsmakethebest/LSCreateModel</a></p><p>打印</p><p><a href="https://github.com/kSimpleCoder/XWLog">https://github.com/kSimpleCoder/XWLog</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 使用Xib创建自定义View - CustomXibView</title>
      <link href="/2016/04/25/iOS%20%E4%BD%BF%E7%94%A8Xib%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
      <url>/2016/04/25/iOS%20%E4%BD%BF%E7%94%A8Xib%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89View/</url>
      
        <content type="html"><![CDATA[<h4 id="创建同名的UIView文件和Xib文件。"><a href="#创建同名的UIView文件和Xib文件。" class="headerlink" title="创建同名的UIView文件和Xib文件。"></a>创建同名的UIView文件和Xib文件。</h4><ul><li><p>1、将Xib文件的<code>File&#39;s Owner</code> -&gt; <code>Custom class</code> -&gt; <code>Class</code>属性设置为同名的类。</p></li><li><p>2、将Xib文件的自定义View-&gt; <code>Custom class</code> -&gt; <code>Class</code>属性设置为同名的类。</p><p>​</p></li><li><p>注意:</p><p>1、通过xib文件来自定义控件是，不会调用<code>init</code>,<code>initWithFrame:</code>方法；</p><p>2、如果不指定自定义View的<code>Custom class</code>为同名类，则不会执行<code>initWithCoder</code>，<code>awakeFromNib</code>方法</p><p>​</p></li></ul><h4 id="XIB加载顺序"><a href="#XIB加载顺序" class="headerlink" title="XIB加载顺序"></a>XIB加载顺序</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> NO.1 初始化</span></span><br><span class="line">+ (CustomView *)instanceWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    CustomView *view = (CustomView *)[[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@&quot;CustomViewXib&quot;</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>][<span class="number">0</span>];</span><br><span class="line">    view.frame = frame;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> NO.2 初始化</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)customXiBView&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *className = <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]);</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:className owner:<span class="keyword">self</span> options:<span class="literal">nil</span>] firstObject];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、正在准备初始化</span></span><br><span class="line">- (<span class="type">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> initWithCoder:aDecoder];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、初始化完毕`（若想初始化时做点事情，最好在这个方法里面实现）`</span></span><br><span class="line">- (<span class="type">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="variable language_">super</span> awakeFromNib];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、添加到父视图中</span></span><br><span class="line">- (<span class="type">void</span>)willMoveToSuperview:(<span class="built_in">UIView</span> *)newSuperview &#123;</span><br><span class="line">    <span class="keyword">if</span> (newSuperview) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、调整布局</span></span><br><span class="line">- (<span class="type">void</span>)layoutSubviews &#123;</span><br><span class="line">    [<span class="variable language_">super</span> layoutSubviews];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：在连线的时候,object一定要选择,你连线的view,而不是 <code>File&#39;s Owner</code></p><p><a href="http://www.jianshu.com/p/bb65ff62e68c">使用XIB 自定义UIView,并可AutoLayout</a></p><p><a href="http://www.jianshu.com/p/af7ec8483eea">[iOS UI] 如何通过xib创建自定义UIView并在xib中使用</a></p><p><a href="http://www.jianshu.com/p/7d59b9420bba">http://www.jianshu.com/p/7d59b9420bba</a></p><p><a href="http://www.jianshu.com/p/371b1a195fb9">http://www.jianshu.com/p/371b1a195fb9</a></p><p><a href="http://www.jianshu.com/p/56b34319ce76">init方法与xib区别</a></p><p><a href="http://www.jianshu.com/p/282eb033c40d">自定义控件（通过代码或者xib文件）</a></p><p><a href="http://www.cnblogs.com/jerehedu/p/4864039.html">IOS Xib使用——Xib表示局部界面</a></p><p><a href="http://honglu.me/2016/02/22/%E9%80%9A%E8%BF%87XIB%E5%8A%A0%E8%BD%BDUIView/">通过 XIB 加载 UIView</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 开发基础教程</title>
      <link href="/2016/04/25/Mac%20%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2016/04/25/Mac%20%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/80dcee893b2d">OS X中如何设置NSView的背景颜色</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)setBackground:(<span class="built_in">NSColor</span> *)aColor;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> setWantsLayer:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span>.layer setBackgroundColor:aColor.CGColor];</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];<span class="comment">//不加有时失效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/e9119da446d5">NSTableView的简单使用示例</a></p><p><a href="http://blog.csdn.net/nsbeidou/article/details/45243069">自定义NSTableCellView</a></p><p> [<a href="http://blog.csdn.net/moqj_123/article/details/42270137">Cocoa]<em>[初级]</em>[NSTableView–数据操作和表格操作要注意的问题]</a></p><p> [<a href="http://blog.csdn.net/yepeng2014/article/details/49026773">Cocoa]<em>[NSTableView]</em>[基本使用]</a></p><p> [<a href="http://blog.csdn.net/yepeng2014/article/details/49154747">Cocoa]<em>[NSTableView]</em>[添加复选框]</a></p><p>视图切换</p><p><a href="http://stackoverflow.com/questions/15645930/osx-switch-between-two-nsviews">osx switch between two nsviews</a></p><p>打包工具</p><p><a href="http://www.pc6.com/mac/188843.html">http://www.pc6.com/mac/188843.html</a></p><p><a href="http://www.jb51.net/softs/421224.html">http://www.jb51.net/softs/421224.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS UITableView与UIScrollView嵌套拖动手势冲突问题</title>
      <link href="/2016/04/21/iOS%20UITableView%E4%B8%8EUIScrollView%E5%B5%8C%E5%A5%97%E6%8B%96%E5%8A%A8%E6%89%8B%E5%8A%BF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
      <url>/2016/04/21/iOS%20UITableView%E4%B8%8EUIScrollView%E5%B5%8C%E5%A5%97%E6%8B%96%E5%8A%A8%E6%89%8B%E5%8A%BF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>当 UITableView与UIScrollView嵌套使用时，会重现手势冲突问题</p><p>譬如：<a href="http://www.cocoachina.com/bbs/read.php?tid-241154.html">http://www.cocoachina.com/bbs/read.php?tid-241154.html</a></p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tableView.scrollEnabled = NO;</span><br><span class="line">set tableView.alwaysBounceVertical = NO;</span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/questions/17974154/uitableview-scrolling-problems-when-inside-a-uiscrollview">UITableView scrolling problems when inside a UIScrollView</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 生成随机数</title>
      <link href="/2016/04/21/iOS%20%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2016/04/21/iOS%20%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>arc4random()</p><p>rand()和random()实际并不是一个真正的伪随机数发生器，在使用之前需要先初始化随机种子，否则每次生成的随机数一样。</p><p>arc4random() 是一个真正的伪随机算法，不需要生成随机种子，因为第一次调用的时候就会自动生成。而且范围是rand()的两倍。在iPhone中，RAND_MAX是0x7fffffff (2147483647)，而arc4random()返回的最大值则是 0x100000000 (4294967296)。</p><p>精确度比较：arc4random()  &gt;  random()  &gt;  rand()。</p><ul><li>获取一个随机整数范围在：[0,100)包括0，不包括100</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 方法1</span><br><span class="line">int x = arc4random() % 100;</span><br><span class="line">// 方法2</span><br><span class="line">int x = arc4random_uniform(100);</span><br></pre></td></tr></table></figure><ul><li>获取一个随机数范围在：[500,1000]，包括500，包括1000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 方法1</span><br><span class="line">int y = (arc4random() % 501) + 500;</span><br><span class="line">// 方法2</span><br><span class="line">int y = arc4random_uniform(500 + 1) + 500;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取一个随机整数，范围在[from,to]，包括from，包括to</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 范围在[from,to]</span><br><span class="line">- (int)getRandomNumber:(int)from to:(int)to</span><br><span class="line">&#123;</span><br><span class="line">    return arc4random_uniform(to - from + 1) + from;</span><br><span class="line">//    return (arc4random() % (to - from + 1)) + from;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：<a href="https://xiaohu860.gitbooks.io/ios/content/xijie_1.html">https://xiaohu860.gitbooks.io/ios/content/xijie_1.html</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">0</span>-x之间的随机正整数</span><br><span class="line"><span class="type">int</span> value =arc4random_uniform(x ＋ <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">生成随机正整数</span><br><span class="line"><span class="type">int</span> value = arc4random();</span><br><span class="line"></span><br><span class="line">通过arc4random() 获取<span class="number">0</span>到x<span class="number">-1</span>之间的整数的代码如下：</span><br><span class="line"><span class="type">int</span> value = arc4random() % x; </span><br><span class="line"> </span><br><span class="line">获取<span class="number">1</span>到x之间的整数的代码如下: </span><br><span class="line"><span class="type">int</span> value = (arc4random() % x) + <span class="number">1</span>; </span><br><span class="line"> </span><br><span class="line">最后如果想生成一个浮点数，可以在项目中定义如下宏：</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARC4RANDOM_MAX      0x100000000 </span></span><br><span class="line"> </span><br><span class="line">然后就可以使用arc4random() 来获取<span class="number">0</span>到<span class="number">100</span>之间浮点数了（精度是rand()的两倍），代码如下：</span><br><span class="line"><span class="type">double</span> val = floorf(((<span class="type">double</span>)arc4random() / ARC4RANDOM_MAX) * <span class="number">100.0</span>f);</span><br></pre></td></tr></table></figure><p>随机色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define RGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]</span><br><span class="line"></span><br><span class="line">#define RGBAColor(r, g, b ,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]</span><br><span class="line"></span><br><span class="line">//随机色</span><br><span class="line">#define RandColor RGBColor(arc4random_uniform(255), arc4random_uniform(255), arc4random_uniform(255))</span><br></pre></td></tr></table></figure><p>参考：<a href="http://nshipster.cn/random/">http://nshipster.cn/random/</a></p><p><a href="http://iphonedevelopment.blogspot.com/2008/10/random-thoughts-rand-vs-arc4random.html">http://iphonedevelopment.blogspot.com/2008/10/random-thoughts-rand-vs-arc4random.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 字面量语法</title>
      <link href="/2016/04/20/iOS%20%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95/"/>
      <url>/2016/04/20/iOS%20%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *str = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@&quot;%@&quot;</span>,<span class="string">@&quot;Hello World&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量语法</span></span><br><span class="line"><span class="built_in">NSString</span> *str = <span class="string">@&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> someNumber = [<span class="built_in">NSNumber</span> numberWithInt:<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量语法</span></span><br><span class="line"><span class="built_in">NSNumber</span> intNumber = @<span class="number">1</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> floatNumber = @<span class="number">2.5</span>f;</span><br><span class="line"><span class="built_in">NSNumber</span> doubleNumber = @<span class="number">3.14159</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> boolNumber = @YES;</span><br><span class="line"><span class="built_in">NSNumber</span> charNumber = @<span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> animals =[<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;cat&quot;</span>, <span class="string">@&quot;dog&quot;</span>, <span class="string">@&quot;mouse&quot;</span>, <span class="string">@&quot;badger&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="comment">//字面量语法</span></span><br><span class="line"><span class="built_in">NSArray</span> animals = @[<span class="string">@&quot;cat&quot;</span>, <span class="string">@&quot;dog&quot;</span>, <span class="string">@&quot;mouse&quot;</span>, <span class="string">@&quot;badger&quot;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> dog = [animals objectAtIndex:<span class="number">1</span>];</span><br><span class="line"><span class="comment">//----&gt;通过字面值取数据</span></span><br><span class="line"><span class="built_in">NSString</span> dog = animals[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可变的话可以直接设置新值</span></span><br><span class="line">[mutableArray replaceObjectAtIndex:<span class="number">1</span> withObject:<span class="string">@&quot;dog&quot;</span>];</span><br><span class="line"><span class="comment">//----&gt;字面值设置值</span></span><br><span class="line">mutableArray[<span class="number">1</span>] = <span class="string">@&quot;dog&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> str1;</span><br><span class="line"><span class="built_in">NSString</span> str2 = <span class="string">@&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> *str3 = <span class="string">@&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入空数据会抛出异常</span></span><br><span class="line"><span class="built_in">NSArray</span> arr = @[str1,str2,str3];</span><br><span class="line"><span class="comment">//reason: &#x27;* -[__NSPlaceholderArray initWithObjects:count:]: attempt to insert nil object from objects[0]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种方式不会抛异常，但是数组会收到第一个nil就终止了。所以采用字面值形式会得到错误提示。</span></span><br><span class="line"><span class="built_in">NSArray</span> arr = [<span class="built_in">NSArray</span> arrayWithObjects:str1,str2,str3, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;arr.count=%d&quot;</span>,arr.count); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;arr.first=%@&quot;</span>,arr.firstObject);  <span class="comment">//null</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> personData =[<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@&quot;Kevin&quot;</span>, <span class="string">@&quot;firstName&quot;</span>,<span class="string">@&quot;Jin&quot;</span>, <span class="string">@&quot;lastName&quot;</span>,[<span class="built_in">NSNumber</span> numberWithInt:<span class="number">25</span>], <span class="string">@&quot;age&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="comment">//----&gt;字面值如下</span></span><br><span class="line"><span class="built_in">NSDictionary</span> personData = @&#123;<span class="string">@&quot;firstName&quot;</span> : <span class="string">@&quot;Kevin&quot;</span>,<span class="string">@&quot;lastName&quot;</span> : <span class="string">@&quot;Jin&quot;</span>, <span class="string">@&quot;age&quot;</span> : @<span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> str1;</span><br><span class="line"><span class="built_in">NSString</span> str2 = <span class="string">@&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> str3 = <span class="string">@&quot;1&quot;</span>;</span><br><span class="line"><span class="comment">//和数组一样，value不能有nil ，否则就会抛出异常。</span></span><br><span class="line"><span class="built_in">NSDictionary</span> dic =@&#123;<span class="string">@&quot;str1&quot;</span>:str1,<span class="string">@&quot;str2&quot;</span>:str2,<span class="string">@&quot;str3&quot;</span>:str3&#125;;</span><br><span class="line"><span class="comment">//reason: &#x27; -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[0]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不会提示你错误</span></span><br><span class="line"><span class="built_in">NSDictionary</span> dic = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:str1,<span class="string">@&quot;str2&quot;</span>,str2,<span class="string">@&quot;str2&quot;</span>,str3,<span class="string">@&quot;str3&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dic.count=%d&quot;</span>,dic.count); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="built_in">NSString</span> lastName = [personData objectForKey:<span class="string">@&quot;lastName&quot;</span>];</span><br><span class="line"><span class="comment">//----&gt;字面值取值</span></span><br><span class="line"><span class="built_in">NSString</span> lastName = personData[<span class="string">@&quot;lastName&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变的话可以这样设置新值</span></span><br><span class="line">[mutableDictionary setObject:<span class="string">@&quot;Galloway&quot;</span> forKey:<span class="string">@&quot;lastName&quot;</span>];</span><br><span class="line"><span class="comment">//----&gt;字面值设置值</span></span><br><span class="line">mutableDictionary[<span class="string">@&quot;lastName&quot;</span>] = <span class="string">@&quot;Galloway&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 重用机制</title>
      <link href="/2016/04/20/iOS%20%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
      <url>/2016/04/20/iOS%20%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Cell重用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UITableView</span> *myTableView;</span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup table view.</span></span><br><span class="line">    <span class="keyword">self</span>.myTableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.myTableView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.myTableView registerClass:[MyTableViewCell <span class="keyword">class</span>] forCellReuseIdentifier:<span class="string">@&quot;MyTableViewCell&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *CellIdentifier = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> *cell = <span class="literal">nil</span>;</span><br><span class="line">    CellIdentifier = <span class="string">@&quot;MyTableViewCell&quot;</span>;</span><br><span class="line">    cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];</span><br><span class="line"></span><br><span class="line">    cell.textLabel.text = <span class="string">@&quot;Title&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (indexPath.row % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        [cell.textLabel setTextColor:[<span class="built_in">UIColor</span> redColor]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [cell.textLabel setTextColor:[<span class="built_in">UIColor</span> blackColor]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之在复用的时候需要记住：</p><ul><li><strong>设置 Cell 的存在差异性的那些属性（包括样式和内容）时，有了 if 最好就要有 else，要显式的覆盖所有可能性。</strong></li><li><strong>设置 Cell 的存在差异性的那些属性时，代码要放在初始化代码块的外部。</strong></li></ul><p>tableView的组头&#x2F;组尾重用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *headerReuseIdentifier = <span class="string">@&quot;TableViewSectionHeaderViewIdentifier&quot;</span>;</span><br><span class="line">   <span class="comment">// Reuse the instance that was created in viewDidLoad, or make a new one if not enough.</span></span><br><span class="line">    <span class="built_in">UITableViewHeaderFooterView</span> *sectionHeaderView = [tableView dequeueReusableHeaderFooterViewWithIdentifier:headerReuseIdentifier];</span><br><span class="line">    sectionHeaderView.textLabel.text = <span class="string">@&quot;Non subclassed header&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> sectionHeaderView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>自定义HeaderFooterView</code></p><ul><li><p>继承UITableViewHeaderFooterView，因为系统提供的UITableViewHeaderFooterView类有重用机制</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">instancetype</span>)initWithReuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> initWithReuseIdentifier:reuseIdentifier]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.contentView.backgroundColor = XMGCommonBgColor;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// label</span></span><br><span class="line">        <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] init];</span><br><span class="line">        <span class="keyword">self</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册自定义组头视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static NSString * const JPHeaderId = @&quot;header&quot;;</span><br><span class="line">  [self.tableView registerClass:[JPCommentHeaderView class] forHeaderFooterViewReuseIdentifier:JPHeaderId];</span><br></pre></td></tr></table></figure></li><li><p>实现代理方法，返回组头视图</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section</span><br><span class="line">&#123;</span><br><span class="line">    JPCommentHeaderView *header = [tableView dequeueReusableHeaderFooterViewWithIdentifier:JPHeaderId</span><br><span class="line">                                           ];</span><br><span class="line">    // 覆盖文字</span><br><span class="line">    if (section == 0 &amp;&amp; self.hotComments.count) &#123;</span><br><span class="line">        header.text = @&quot;最热评论&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        header.text = @&quot;最新评论&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="http://blog.csdn.net/crayondeng/article/details/8906981">iOS UITableViewCell重用问题</a></p><p>iOS 高性能异构滚动视图构建方案 —— LazyScrollView</p><p><a href="http://pingguohe.net/2016/01/31/lazyscroll.html">http://pingguohe.net/2016/01/31/lazyscroll.html</a></p><p><a href="http://stackoverflow.com/questions/20188049/uitableview-headerviewforsection-returns-null">http://stackoverflow.com/questions/20188049/uitableview-headerviewforsection-returns-null</a></p><p><a href="http://stackoverflow.com/questions/2079225/how-to-implement-uiscrollview-with-1000-subviews">How to implement UIScrollView with 1000+ subviews?</a></p><p><a href="http://stackoverflow.com/questions/13056549/pagination-and-reusing-views-in-scrollview">pagination and reusing views in scrollview</a></p><p><a href="http://stackoverflow.com/questions/12545097/how-to-reuse-uiview-like-uitableviewcell">How to reuse UIView like UITableViewCell</a></p><p><a href="http://www.wugaojun.com/blog/2015/06/06/uiscrollviewji-xian-you-hua-liang-ge-imageviewxun-huan-li-yong/">UIScrollView极限优化:两个UIImageView循环利用</a></p><p><a href="https://github.com/iSevenDays/RecyclingScrollView">https://github.com/iSevenDays/RecyclingScrollView</a></p><p><a href="https://github.com/malcommac/DMLazyScrollView">https://github.com/malcommac/DMLazyScrollView</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS图片浏览器</title>
      <link href="/2016/04/19/iOS%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2016/04/19/iOS%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>图片浏览器</strong></p><h4 id="一、功能点分析："><a href="#一、功能点分析：" class="headerlink" title="一、功能点分析："></a>一、功能点分析：</h4><p>1.查看图片  2.图片放大缩小 3.图片旋转</p><h4 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h4><p>1.利用UIScrollview 实现</p><p>2.利用UITableView实现</p><p>3.利用UICollectionView实现</p><p>最好利用scrollview的自带放大缩小特性来做,嵌套scrollview,相比手势简单。</p><p>官方Demo：</p><p><a href="https://developer.apple.com/library/ios/samplecode/PhotoScroller/Introduction/Intro.html">https://developer.apple.com/library/ios/samplecode/PhotoScroller/Introduction/Intro.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用URL进行导航跳转</title>
      <link href="/2016/04/19/%E4%BD%BF%E7%94%A8URL%E8%BF%9B%E8%A1%8C%E5%AF%BC%E8%88%AA%E8%B7%B3%E8%BD%AC/"/>
      <url>/2016/04/19/%E4%BD%BF%E7%94%A8URL%E8%BF%9B%E8%A1%8C%E5%AF%BC%E8%88%AA%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>适用于推送或网页跳转原生界面，目前公司的导航控制器跳转方式使用的URL方式跳转，这种方式也在很多App上使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">优点：1.后台配置URL，App集中处理所有URL，方便管理</span><br><span class="line"></span><br><span class="line">    2.一行代码即可进行跳转</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">缺点：1.使用的是字符串，系统无自动纠错能力，可能出错</span><br><span class="line"></span><br><span class="line">    2.传统方式可以点击控制器快速进入指定控制器，而URL不能，调试比较不便</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：推送，网页协议等使用URL进行导航控制器跳转，原生跳转使用传统方式跳转。发挥URL灵活性和传统方式的DeBug时方便特点。</p><p>其实无论是传统方式，或是URL方式，亦或是其它方式进行调整，都要满足2个条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.得到需要跳转的控制器实例</span><br><span class="line">2.获取当前导航控制器</span><br></pre></td></tr></table></figure><p>写法有多种，关键点在于利用runtime实例对象，获取导航控制器跳转</p><p>如使用类别</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id viewController = [[class alloc] init];</span></span><br><span class="line">- (<span class="type">void</span>)pushViewControllerURL:(<span class="built_in">NSString</span> *)aClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;topViewController=%@&quot;</span>,[<span class="keyword">self</span>.navigationController topViewController]);</span><br><span class="line"></span><br><span class="line">    Class ClassName = <span class="built_in">NSClassFromString</span>(aClass);</span><br><span class="line">    <span class="built_in">UIViewController</span> * viewController = [[ClassName alloc] initWithNibName:<span class="built_in">NSStringFromClass</span>(ClassName) bundle:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止连续push多次</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span>.navigationController topViewController] isKindOfClass:[viewController <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:viewController animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上只是简单示例，实际开发种有很多种情况需要考虑，可以参照以下Demo，</p><p>随便一搜，发现相关例子一大堆，所以可参照Demo设计出适合自己项目的跳转模式。</p><p><a href="https://github.com/GeniusBrother/HZURLManager">https://github.com/GeniusBrother/HZURLManager</a></p><p><a href="https://github.com/gaosboy/urlmanager">https://github.com/gaosboy/urlmanager</a></p><p><a href="https://github.com/Huohua/HHRouter">https://github.com/Huohua/HHRouter</a></p><p><a href="https://github.com/uxyheaven/XYRouter">https://github.com/uxyheaven/XYRouter</a></p><p><a href="https://github.com/liaojinxing/LJURLRouter">https://github.com/liaojinxing/LJURLRouter</a></p><p><a href="https://github.com/gonefish/GQURLDispatcher">https://github.com/gonefish/GQURLDispatcher</a></p><p><a href="https://github.com/SwiftLOL/AppNavigator">https://github.com/SwiftLOL/AppNavigator</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 模拟弱网络环境Network Link Conditioner</title>
      <link href="/2016/04/19/Mac%E6%A8%A1%E6%8B%9F%E5%BC%B1%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83Network-Link-Conditioner/"/>
      <url>/2016/04/19/Mac%E6%A8%A1%E6%8B%9F%E5%BC%B1%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83Network-Link-Conditioner/</url>
      
        <content type="html"><![CDATA[<p>工具:<code>Network Link Conditioner</code></p><p>下载地址:<a href="https://developer.apple.com/downloads/?q=Hardware%20IO%20Tools">https://developer.apple.com/downloads/?q=Hardware IO Tools </a></p><p><code>Network Link Conditioner</code> 是Xcode实用小工具,可以模拟多种网络环境，它内置以下几种网络环境配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- EDGE</span><br><span class="line">- 3G</span><br><span class="line">- DSL</span><br><span class="line">- WiFi</span><br><span class="line">- High Latency DNS</span><br><span class="line">- Very Bad Network</span><br><span class="line">- 100% Loss</span><br></pre></td></tr></table></figure><p>每种情况都是通过设置上载、下载的 <a href="http://en.wikipedia.org/wiki/Bandwidth_%28computing%29">带宽</a>, <a href="http://en.wikipedia.org/wiki/Latency_%28engineering%29%23Communication_latency">延迟</a>, 和 <a href="http://en.wikipedia.org/wiki/Packet_loss">丢包</a>率 (如果设置为 0, 即不影响你当前的网络环境）</p><p>其它：CCWANem（来源：测试社区<a href="http://www.diggerplus.org/%EF%BC%89">http://www.diggerplus.org/）</a></p><p><a href="http://nshipster.cn/network-link-conditioner/">http://nshipster.cn/network-link-conditioner/</a></p><p><a href="http://www.jianshu.com/p/367915734ad8">http://www.jianshu.com/p/367915734ad8</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac效率工具推荐</title>
      <link href="/2016/04/18/Mac%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
      <url>/2016/04/18/Mac%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>文字快速补全输入增强工具<br><a href="http://lifehacker.com/5843903/the-best-text-expansion-app-for-mac">The Best Text Expansion App for Mac</a><br><a href="https://kapeli.com/dash">https://kapeli.com/dash</a><br><a href="http://wdxtub.com/2016/02/18/mac-tips/">http://wdxtub.com/2016/02/18/mac-tips/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 代码优化，持续更新</title>
      <link href="/2016/04/18/iOS%20%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%EF%BC%8C%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2016/04/18/iOS%20%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%EF%BC%8C%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>使用纯代码创建一个视图对象：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *subView = [[<span class="built_in">UIView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">subView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:subView];</span><br></pre></td></tr></table></figure><p>这段代码可以转换成另外一种等价写法：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *subView = (&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:view];</span><br><span class="line">    view;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用字面量语言</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *arrayA = [<span class="built_in">NSArray</span> arrayWithObjects:object1, object2, object3, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *arrayB = @[object1, object2, object3];<span class="comment">//推荐</span></span><br></pre></td></tr></table></figure><p>使用字面量语法的缺点：使用字面量创建都是不可变对象，如果想创建可变对象需要复制一份：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *mutableArray = [@[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>] mutableCopy];</span><br></pre></td></tr></table></figure><p>使用类型常量替换#define预处理指令</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define <span class="type">ANIMATION_DURATION</span> <span class="number">1.0</span></span><br><span class="line"><span class="keyword">static</span> const <span class="type">NSTimeInterval</span> kAnimationDuration <span class="operator">=</span> <span class="number">1.0</span>;<span class="comment">//推荐 命名规则：不被外部访问时 k+变量名</span></span><br></pre></td></tr></table></figure><p>代码结构</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark <span class="operator">-</span> life cycle</span><br><span class="line"><span class="comment">// Methods...</span></span><br><span class="line">#pragma mark <span class="operator">-</span> <span class="type">UITableViewDataSource</span></span><br><span class="line"><span class="comment">// Methods...</span></span><br><span class="line">#pragma mark <span class="operator">-</span> <span class="type">CustomDelegate</span></span><br><span class="line"><span class="comment">// Methods...</span></span><br><span class="line">#pragma mark <span class="operator">-</span> event response</span><br><span class="line"><span class="comment">// Methods...</span></span><br><span class="line">#pragma mark <span class="operator">-</span> <span class="keyword">private</span> methods</span><br><span class="line"><span class="comment">// Methods...</span></span><br><span class="line">#pragma mark <span class="operator">-</span> getters and setters</span><br><span class="line"><span class="comment">// Methods...</span></span><br></pre></td></tr></table></figure><p>获取当前导航控制器</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark Implement @protocol PCNavigationDelegate</span></span><br><span class="line">- (<span class="built_in">UINavigationController</span> *)navigationController</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UITabBarController</span> *tabBar = (<span class="built_in">UITabBarController</span> *)<span class="keyword">self</span>.window.rootViewController;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">UINavigationController</span> *)tabBar.selectedViewController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://tutuge.me/2015/03/11/Effective-objectivec-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-4-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F/">Effective-objectivec-读书笔记-Item-4-如何正确定义常量</a></p><p><a href="http://www.dewen.net.cn/q/5522/C+++%E5%90%84%E7%A7%8D%E5%85%A8%E5%B1%80%E5%B8%B8%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F">http://www.dewen.net.cn/q/5522/C+++%E5%90%84%E7%A7%8D%E5%85%A8%E5%B1%80%E5%B8%B8%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS截图</title>
      <link href="/2016/04/16/iOS%20%E6%88%AA%E5%9B%BE/"/>
      <url>/2016/04/16/iOS%20%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>最近使用的webview加载方式需要仿照微信的方式来做，用到手势和截图知识点。</p><p>参考推荐：</p><p><a href="https://blog.0xbbc.com/2014/12/ios%E4%B8%AD%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%88%AA%E5%B1%8F%E5%A7%BF%E5%8A%BF/">iOS中正确的截屏姿势</a></p><p><a href="http://atmarkplant.com/wkwebview-screenshots/">http://atmarkplant.com/wkwebview-screenshots/</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发之C语言函数库</title>
      <link href="/2016/04/16/iOS%E5%BC%80%E5%8F%91%E4%B9%8BC%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E5%BA%93/"/>
      <url>/2016/04/16/iOS%E5%BC%80%E5%8F%91%E4%B9%8BC%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>在iOS开发中不可避免的需要使用数学函数进行计算，我们可以使用C标准库头文件&lt;math.h&gt;中定义的数学常量宏及数学函数来进行基本的数学计算操作，这些C函数都可以在微软的<code>MSDN</code>API库中找到。(<a href="https://msdn.microsoft.com/zh-cn/library">https://msdn.microsoft.com/zh-cn/library</a> )</p><p><strong>一、 iOS常用示例如：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//计算最大值、最小值、绝对值</span><br><span class="line">#define MAX(A,B) ((A) &gt; (B) ? (A) : (B))</span><br><span class="line">#define MIN(A,B) ((A) &lt; (B) ? (A) : (B))</span><br><span class="line">#define ABS(A) ((A) &lt; 0 ? (-(A)) : (A))</span><br><span class="line"></span><br><span class="line">//计算scrollView索引</span><br><span class="line">int index = ABS(scrollView.contentOffset.x) / scrollView.frame.size.width;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/328273-4e58afd530e75b1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>相关函数申明请查看头文件<code>math.h</code><br><strong>二、具体函数释义如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">/************************************************************</span><br><span class="line"> *                                                          *</span><br><span class="line"> *                  Math Functions（数学函数）                *</span><br><span class="line"> *                                                          *</span><br><span class="line"> ***********************************************************/</span><br><span class="line"></span><br><span class="line">#pragma mark --- 三角函数  a前缀表示取反  asin反三角函数</span><br><span class="line">//TODO: 求反余弦值</span><br><span class="line">extern float acosf(float);</span><br><span class="line">extern double acos(double);</span><br><span class="line">extern long double acosl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求反正弦值</span><br><span class="line">extern float asinf(float);</span><br><span class="line">extern double asin(double);</span><br><span class="line">extern long double asinl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求反正切值</span><br><span class="line">extern float atanf(float);</span><br><span class="line">extern double atan(double);</span><br><span class="line">extern long double atanl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求坐标值的反正切值</span><br><span class="line">extern float atan2f(float, float);</span><br><span class="line">extern double atan2(double, double);</span><br><span class="line">extern long double atan2l(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求余弦值</span><br><span class="line">extern float cosf(float);</span><br><span class="line">extern double cos(double);</span><br><span class="line">extern long double cosl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求正弦值</span><br><span class="line">extern float sinf(float);</span><br><span class="line">extern double sin(double);</span><br><span class="line">extern long double sinl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求正切值</span><br><span class="line">extern float tanf(float);</span><br><span class="line">extern double tan(double);</span><br><span class="line">extern long double tanl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求反双曲余弦值</span><br><span class="line">extern float acoshf(float);</span><br><span class="line">extern double acosh(double);</span><br><span class="line">extern long double acoshl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求反双曲正弦值</span><br><span class="line">extern float asinhf(float);</span><br><span class="line">extern double asinh(double);</span><br><span class="line">extern long double asinhl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求反双曲正切值</span><br><span class="line">extern float atanhf(float);</span><br><span class="line">extern double atanh(double);</span><br><span class="line">extern long double atanhl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求双曲余弦值</span><br><span class="line">extern float coshf(float);</span><br><span class="line">extern double cosh(double);</span><br><span class="line">extern long double coshl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求双曲正弦值</span><br><span class="line">extern float sinhf(float);</span><br><span class="line">extern double sinh(double);</span><br><span class="line">extern long double sinhl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求双曲正切值</span><br><span class="line">extern float tanhf(float);</span><br><span class="line">extern double tanh(double);</span><br><span class="line">extern long double tanhl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求取自然数e的幂</span><br><span class="line">extern float expf(float);</span><br><span class="line">extern double exp(double);</span><br><span class="line">extern long double expl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算参数以 2 为底的指数</span><br><span class="line">extern float exp2f(float);</span><br><span class="line">extern double exp2(double);</span><br><span class="line">extern long double exp2l(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算基础 e 指数参数，但不包括 1</span><br><span class="line">extern float expm1f(float);</span><br><span class="line">extern double expm1(double);</span><br><span class="line">extern long double expm1l(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 以e为底的对数（log10f则为10为底、log2f：2为底 ）</span><br><span class="line">extern float logf(float);</span><br><span class="line">extern double log(double);</span><br><span class="line">extern long double logl(long double);</span><br><span class="line"></span><br><span class="line">extern float log10f(float);//以10为底的对数</span><br><span class="line">extern double log10(double);</span><br><span class="line">extern long double log10l(long double);</span><br><span class="line"></span><br><span class="line">extern float log2f(float);//以2为底的对数</span><br><span class="line">extern double log2(double);</span><br><span class="line">extern long double log2l(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算基础 e 对数 1 加上参数</span><br><span class="line">extern float log1pf(float);</span><br><span class="line">extern double log1p(double);</span><br><span class="line">extern long double log1pl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 提取 _X 指数，作为一个带符号整数值为浮点格式</span><br><span class="line">extern float logbf(float);</span><br><span class="line">extern double logb(double);</span><br><span class="line">extern long double logbl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 浮点数分解为整数和小数。返回 _X 的有符号的小数部分</span><br><span class="line">extern float modff(float, float *);</span><br><span class="line">extern double modf(double, double *);</span><br><span class="line">extern long double modfl(long double, long double *);</span><br><span class="line"></span><br><span class="line">//TODO: 计算从尾数和指数的一个实数</span><br><span class="line">extern float ldexpf(float, int);</span><br><span class="line">extern double ldexp(double, int);</span><br><span class="line">extern long double ldexpl(long double, int);</span><br><span class="line"></span><br><span class="line">//TODO: 浮点数分解尾数和二为底的指数</span><br><span class="line">extern float frexpf(float, int *);</span><br><span class="line">extern double frexp(double, int *);</span><br><span class="line">extern long double frexpl(long double, int *);</span><br><span class="line"></span><br><span class="line">//TODO: 提取_X 指数为无符号整型值</span><br><span class="line">extern int ilogbf(float);</span><br><span class="line">extern int ilogb(double);</span><br><span class="line">extern int ilogbl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 以 FLT_RADIX乘以_X到乘幂运算_Y</span><br><span class="line">extern float scalbnf(float, int);</span><br><span class="line">extern double scalbn(double, int);</span><br><span class="line">extern long double scalbnl(long double, int);</span><br><span class="line"></span><br><span class="line">//TODO: 将浮点数乘以 FLT_RADIX 的整数幂。</span><br><span class="line">extern float scalblnf(float, long int);</span><br><span class="line">extern double scalbln(double, long int);</span><br><span class="line">extern long double scalblnl(long double, long int);</span><br><span class="line"></span><br><span class="line">//TODO: 浮点数绝对值</span><br><span class="line">extern float fabsf(float);</span><br><span class="line">extern double fabs(double);</span><br><span class="line">extern long double fabsl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算参数的实立方根</span><br><span class="line">extern float cbrtf(float);</span><br><span class="line">extern double cbrt(double);</span><br><span class="line">extern long double cbrtl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求值直角三角形的斜边长度，给出的两边为 x 和 y (换言之，根的长度 x2 + y2)。</span><br><span class="line">extern float hypotf(float, float);</span><br><span class="line">extern double hypot(double, double);</span><br><span class="line">extern long double hypotl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求n的m次方的值,计算以n为底数的m次幂</span><br><span class="line">extern float powf(float, float);</span><br><span class="line">extern double pow(double, double);</span><br><span class="line">extern long double powl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 开平方</span><br><span class="line">extern float sqrtf(float);</span><br><span class="line">extern double sqrt(double);</span><br><span class="line">extern long double sqrtl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 函数返回 x 的高斯误差函数</span><br><span class="line">extern float erff(float);</span><br><span class="line">extern double erf(double);</span><br><span class="line">extern long double erfl(long double);</span><br><span class="line">//https://msdn.microsoft.com/zh-cn/library/</span><br><span class="line">//TODO: 函数返回 x 的补余高斯误差函数。</span><br><span class="line">extern float erfcf(float);</span><br><span class="line">extern double erfc(double);</span><br><span class="line">extern long double erfcl(long double);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/* ===================</span><br><span class="line"> lgammaf, lgamma, and lgammal are not thread-safe. The thread-safe</span><br><span class="line"> variants lgammaf_r, lgamma_r, and lgammal_r are made available if</span><br><span class="line"> you define the _REENTRANT symbol before including &lt;math.h&gt;           </span><br><span class="line"> ====================== */</span><br><span class="line">#pragma mark ---lgammaf...</span><br><span class="line">//TODO: 计算伽玛参数绝对值的自然对数</span><br><span class="line">extern float lgammaf(float);</span><br><span class="line">extern double lgamma(double);</span><br><span class="line">extern long double lgammal(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算_X 的伽玛函数</span><br><span class="line">extern float tgammaf(float);</span><br><span class="line">extern double tgamma(double);</span><br><span class="line">extern long double tgammal(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算值的上限。向上取整 进1</span><br><span class="line">extern float ceilf(float);</span><br><span class="line">extern double ceil(double);</span><br><span class="line">extern long double ceill(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 对参数向下取整，返回参数的下限。</span><br><span class="line">extern float floorf(float);</span><br><span class="line">extern double floor(double);</span><br><span class="line">extern long double floorl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 通过使用当前舍入方向，舍入参数为浮点格式的一个整数值，整数。返回舍入的整数值。</span><br><span class="line">extern float nearbyintf(float);</span><br><span class="line">extern double nearbyint(double);</span><br><span class="line">extern long double nearbyintl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 将浮点值舍入到最接近的整数（采用浮点格式），四舍五入函数</span><br><span class="line">extern float rintf(float);</span><br><span class="line">extern double rint(double);</span><br><span class="line">extern long double rintl(long double);</span><br><span class="line"></span><br><span class="line">//FIXME: 也是四舍五入</span><br><span class="line">extern long int lrintf(float);</span><br><span class="line">extern long int lrint(double);</span><br><span class="line">extern long int lrintl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 四舍五入法</span><br><span class="line">extern float roundf(float);</span><br><span class="line">extern double round(double);</span><br><span class="line">extern long double roundl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 四舍五入，取最接近的整数</span><br><span class="line">extern long int lroundf(float);</span><br><span class="line">extern long int lround(double);</span><br><span class="line">extern long int lroundl(long double);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ---truncf...</span><br><span class="line">/* ======================</span><br><span class="line"> long long is not part of C90. Make sure you are passing -std=c99 or</span><br><span class="line"> -std=gnu99 or higher if you need these functions returning long longs     </span><br><span class="line">   ====================== */</span><br><span class="line">//TODO: 截断参数为整数部分，返回参数的整数部分</span><br><span class="line">extern float truncf(float);</span><br><span class="line">extern double trunc(double);</span><br><span class="line">extern long double truncl(long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求两数整除后的余数</span><br><span class="line">extern float fmodf(float, float);</span><br><span class="line">extern double fmod(double, double);</span><br><span class="line">extern long double fmodl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算余数 _X 除 _Y</span><br><span class="line">extern float remainderf(float, float);</span><br><span class="line">extern double remainder(double, double);</span><br><span class="line">extern long double remainderl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算第一个指定参数除以第二个指定参数的余数。也要计算出第一指定参数的有效位数除以第二指定参数的有效位数的商，然后使用在第三参数中指定的位置返回该商。</span><br><span class="line">extern float remquof(float, float, int *);</span><br><span class="line">extern double remquo(double, double, int *);</span><br><span class="line">extern long double remquol(long double, long double, int *);</span><br><span class="line"></span><br><span class="line">//TODO: 用_X的大小和_Y的符号来返回值</span><br><span class="line">extern float copysignf(float, float);</span><br><span class="line">extern double copysign(double, double);</span><br><span class="line">extern long double copysignl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 用_X中指示的内容返回清扫NaN，</span><br><span class="line">extern float nanf(const char *);</span><br><span class="line">extern double nan(const char *);</span><br><span class="line">extern long double nanl(const char *);</span><br><span class="line"></span><br><span class="line">extern float nextafterf(float, float);</span><br><span class="line">extern double nextafter(double, double);</span><br><span class="line">extern long double nextafterl(long double, long double);</span><br><span class="line"></span><br><span class="line">extern double nexttoward(double, long double);</span><br><span class="line">extern float nexttowardf(float, long double);</span><br><span class="line">extern long double nexttowardl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算参数之间的正整数差异。（如果 _X 比 _Y 大，_X 和 _Y 之间的差异；否则，+0。）</span><br><span class="line">extern float fdimf(float, float);</span><br><span class="line">extern double fdim(double, double);</span><br><span class="line">extern long double fdiml(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求最大值</span><br><span class="line">extern float fmaxf(float, float);</span><br><span class="line">extern double fmax(double, double);</span><br><span class="line">extern long double fmaxl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 求最小值</span><br><span class="line">extern float fminf(float, float);</span><br><span class="line">extern double fmin(double, double);</span><br><span class="line">extern long double fminl(long double, long double);</span><br><span class="line"></span><br><span class="line">//TODO: 计算第一个和第二个指定的参数的产品，然后将第三个指定的参数添加到结果；整个计算是作为单个操作执行的。表达式 (_X x _Y) + _Z 的结果。整个计算都作为单个操作执行，即子表达式计算到无限精度并且仅对最终结果四舍五入。</span><br><span class="line">extern float fmaf(float, float, float);</span><br><span class="line">extern double fma(double, double, double);</span><br><span class="line">extern long double fmal(long double, long double, long double);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 中的系统常用宏定义NSObjCRuntime.h</title>
      <link href="/2016/04/15/iOS%20%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
      <url>/2016/04/15/iOS%20%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>下列宏定义查看API：NSObjCRuntime.h,CGBase.h</p><p>当我们在 objectivec 中引入了 <code>Foundation Framework</code> 之后，最好是使用系统宏定义，比如用<code>FOUNDATION_EXPORT</code> 来代替 <code>extern</code>, 因为在 <code>NSObjCRuntime.h</code> 中它包括了一些 C 和 C++ 的库，为了能更好的和这些 C 和 C++ 库兼容，所以建议用 <code>FOUNDATION_EXPORT</code>。</p><p><code>内联函数</code> （<code>NS_INLINE</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NS_INLINE</span><br><span class="line">//UIKit框架 UIKIT_STATIC_INLINE</span><br><span class="line">static inline CGRect ScaleRect(CGRect rect, float n)</span><br></pre></td></tr></table></figure><p><code>定义常量</code> （<code>FOUNDATION_EXPORT &amp; #define</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);</span><br><span class="line">//UIKit框架 `UIKIT_EXTERN</span><br><span class="line">.h  FOUNDATION_EXPORT NSString * const kMyConstantString;</span><br><span class="line">.m  NSString * const kConstantString = @&quot;Hello&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define kConstantString @&quot;Hello&quot;</span><br></pre></td></tr></table></figure><p><code>FOUNDATION_EXPORT</code>可以直接比较字符串指针地址，效率<code>#define</code>比高</p><p>UIKit框架 <code>UIKIT_EXTERN</code></p><p>取最大值、最小值、绝对值</p><pre><code>#define MIN(A,B)((A) &lt; (B) ? (A) : (B))#define MAX(A,B)((A) &gt; (B) ? (A) : (B))#define ABS(A)((A) &lt; 0 ? (-(A)) : (A))</code></pre><p>iOS常用示例</p><p>计算最大值、最小值、绝对值</p><p>define MIN(A,B) ((A) &lt; (B) ? (A) : (B))</p><p>define MAX(A,B) ((A) &gt; (B) ? (A) : (B))</p><p>define ABS(A)  ((A) &lt; 0 ? (-(A)) : (A))</p><p>&#x2F;&#x2F;计算scrollView索引</p><p>int index &#x3D; ABS(scrollView.contentOffset.x) &#x2F; scrollView.frame.size.width;</p><p> </p><p> <code>ABS</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">abs</span>(int i);                  <span class="comment">// 处理int类型的取绝对值</span></span><br><span class="line">double fabs(double i);  <span class="comment">//处理double类型的取绝对值</span></span><br><span class="line">float fabsf(float i);            <span class="comment">//处理float类型的取绝对值</span></span><br><span class="line"></span><br><span class="line">double a <span class="operator">=</span> <span class="operator">-</span><span class="number">2.6</span>;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;%.2f&quot;</span>,<span class="type">ABS</span>(a));<span class="comment">//2.60</span></span><br><span class="line">int b <span class="operator">=</span> <span class="operator">-</span><span class="number">4.0</span>;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;%d&quot;</span>,<span class="type">ABS</span>(b));<span class="comment">//4</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  CGFloat maxSide = MAX(fabsf(point1.x - point2.x ), fabsf(point2.y - point2.y));</span><br></pre></td></tr></table></figure><p>四舍五入</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">roundf(<span class="operator">&lt;</span>#float#<span class="operator">&gt;</span>)</span><br><span class="line">指定精度取整函数: round</span><br><span class="line">语法: round(double a, int d)</span><br><span class="line">返回值: <span class="type">DOUBLE</span></span><br><span class="line">说明: 返回指定精度d的double类型</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">round(<span class="number">3.1415926</span>,<span class="number">4</span>)   <span class="comment">//3.1416</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    取整</span></span><br><span class="line">    double f <span class="operator">=</span><span class="number">2.5</span>;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;%.0f&quot;</span>,round(f));<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    向下取整</span></span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;%f&quot;</span>,floor(f));<span class="comment">//2.000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  向上取整</span></span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;%f&quot;</span>,ceil(f));</span><br></pre></td></tr></table></figure><p>rand() —-随机数</p><p>abs() &#x2F; labs() —-整数绝对值</p><p>fabs() &#x2F; fabsf() &#x2F; fabsl() —-浮点数绝对值</p><p>floor() &#x2F; floorf() &#x2F; floorl() —-向下取整</p><p>ceil() &#x2F; ceilf() &#x2F; ceill() —-向上取整</p><p>round() &#x2F; roundf() &#x2F; roundl() —-四舍五入</p><p>sqrt() &#x2F; sqrtf() &#x2F; sqrtl() —-求平方根</p><p>fmax() &#x2F; fmaxf() &#x2F; fmaxl() —-求最大值</p><p>fmin() &#x2F; fminf() &#x2F; fminl() —-求最小值</p><p>hypot() &#x2F; hypotf() &#x2F; hypotl() —-求直角三角形斜边的长度</p><p> fmod() &#x2F; fmodf() &#x2F; fmodl() —-求两数整除后的余数</p><p>modf() &#x2F; modff() &#x2F; modfl() —-浮点数分解为整数和小数</p><p>frexp() &#x2F; frexpf() &#x2F; frexpl() —-浮点数分解尾数和二为底的指数</p><p>sin() &#x2F; sinf() &#x2F; sinl() —-求正弦值</p><p>sinh() &#x2F; sinhf() &#x2F; sinhl() —-求双曲正弦值</p><p>cos() &#x2F; cosf() &#x2F; cosl() —-求余弦值</p><p>cosh() &#x2F; coshf() &#x2F; coshl() —-求双曲余弦值</p><p>tan() &#x2F; tanf() &#x2F; tanl() —-求正切值</p><p>tanh() &#x2F; tanhf() &#x2F; tanhl() —-求双曲正切值</p><p>asin() &#x2F; asinf() &#x2F; asinl() —-求反正弦值</p><p>asinh() &#x2F; asinhf() &#x2F; asinhl() —-求反双曲正弦值</p><p>acos() &#x2F; acosf() &#x2F; acosl() —-求反余弦值</p><p> acosh() &#x2F; acoshf() &#x2F; acoshl() —-求反双曲余弦值</p><p>atan() &#x2F; atanf() &#x2F; atanl() —-求反正切值</p><p>atan2() &#x2F; atan2f() &#x2F; atan2l() —-求坐标值的反正切值</p><p>atanh() &#x2F; atanhf() &#x2F; atanhl() —-求反双曲正切值</p><p><a href="http://read.pudn.com/downloads61/ebook/211392/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80c%2B%2B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E9%99%84%E5%BD%95B.pdf">http://read.pudn.com/downloads61/ebook/211392/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80c%2B%2B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E9%99%84%E5%BD%95B.pdf</a></p><p><a href="http://blog.csdn.net/abc649395594/article/details/44730425">http://blog.csdn.net/abc649395594/article/details/44730425</a></p><p><a href="https://www.gitbook.com/book/eilianlove/objectivec-guide/details">https://www.gitbook.com/book/eilianlove/objectivec-guide/details</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 网页视频下载</title>
      <link href="/2016/04/14/m3u8%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2016/04/14/m3u8%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p><code>下载神器youtube-dl</code></p><p><strong>1、下载安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> curl https://yt-dl.org/downloads/2014.02.10/youtube-dl -o /usr/local/bin/youtube-dl</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+x /usr/local/bin/youtube-dl</span></span><br></pre></td></tr></table></figure><p>没安装<code>curl</code>这个命令，同样可以使用<code>wget</code>来下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+rx /usr/local/bin/youtube-dl</span></span><br></pre></td></tr></table></figure><p>Mac OSx可以使用<code>Homebrew</code>来安装youtube-dl：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install youtube-dl</span><br></pre></td></tr></table></figure><p>1.获取视频格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo youtube-dl -F https://www.youtube.com/watch?v=ECIU3SQyUU4</span><br></pre></td></tr></table></figure><p>例如《北京遇上西雅图之不二情书》</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[info] Available formats for 325a83bd593a6c814b09360853200d8c:</span><br><span class="line">format code  extension  resolution note</span><br><span class="line">h6           f4v        unknown    2.75MiB</span><br><span class="line">h5           f4v        unknown    4.43MiB</span><br><span class="line">h3           f4v        unknown    7.41MiB (best)</span><br></pre></td></tr></table></figure><p>下载h3  7.41M这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> youtube-dl -f h3  http://www.iqiyi.com/marketing/blangzt.html</span></span><br></pre></td></tr></table></figure><p>选择下载最好的单个文件 video +audio</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> youtube-dl -f best  http://www.iqiyi.com/marketing/blangzt.html</span></span><br></pre></td></tr></table></figure><p><a href="http://www.iqiyi.com/v_19rrkz3vi0.html#vfrm=24-9-0-1">http://www.iqiyi.com/v_19rrkz3vi0.html#vfrm=24-9-0-1</a></p><h5 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h5><h4 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h4><p><a href="http://wiki.jikexueyuan.com/project/mac-dev-setup/homebrew.html">http://wiki.jikexueyuan.com/project/mac-dev-setup/homebrew.html</a></p><p><a href="http://www.liaoxuefeng.com/article/0013738927837699a7f3407ea5f4b5caf8e1ab47997d7c5000">Mac OS X编译ffmpeg</a></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h5><p><a href="http://nio.name/2013/11/07/ffmpeg-combime/">http://nio.name/2013/11/07/ffmpeg-combime/</a><br><a href="https://github.com/sxyx2008/DevArticles/issues/45">https://github.com/sxyx2008/DevArticles/issues/45</a><br><a href="https://www.v2ex.com/t/246216">https://www.v2ex.com/t/246216</a><br><a href="http://blog.just4fun.site/youtube-dl-note.html">http://blog.just4fun.site/youtube-dl-note.html</a><br><a href="https://github.com/rg3/youtube-dl/blob/master/README.md">https://github.com/rg3/youtube-dl/blob/master/README.md</a><br>youtube-dl支持几百个视频网站！完整的网站列表参见 <a href="http://rg3.github.io/youtube-dl/supportedsites.html">这里</a>。</p><p><strong>youtube-dl官网</strong>：<a href="http://rg3.github.io/youtube-dl/index.html">http://rg3.github.io/youtube-dl/index.html</a></p><p><strong>GitHub源码</strong>：<a href="https://github.com/rg3/youtube-dl/">https://github.com/rg3/youtube-dl/</a></p><p><code>m3u8文件下载</code></p><p>有时候需要从网站上下载视频，用chrome等插件解析的都是pts格式的分段文件，下载后也不能播放。</p><p>用iOS解析后得到<code>m3u8</code>格式地址</p><p>下载</p><p><a href="http://www.cnblogs.com/jiangshiyong/p/3155063.html">关于流媒体(m3u8)的播放与下载</a></p><p><a href="https://crispgm.com/page/downloading-m3u8-video.html">https://crispgm.com/page/downloading-m3u8-video.html</a></p><p><a href="http://www.macx.cn/thread-2118809-1-1.html">http://www.macx.cn/thread-2118809-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CocoaPods创建和发布</title>
      <link href="/2016/04/13/CocoaPods%E5%88%9B%E5%BB%BA%E5%92%8C%E5%8F%91%E5%B8%83/"/>
      <url>/2016/04/13/CocoaPods%E5%88%9B%E5%BB%BA%E5%92%8C%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h3 id="一、创建私有pod"><a href="#一、创建私有pod" class="headerlink" title="一、创建私有pod"></a>一、创建私有pod</h3><p><strong>1.克隆项目到本地</strong></p><p>cd进入本地某个目录 ，从github上clone下项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd xxx/xxx/file</span><br><span class="line">$ git clone https://github.com/huluo666/HJDefaultsCache.git</span><br></pre></td></tr></table></figure><p>cd进入项目目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd xxx/xxx/HJDefaultsCache</span><br></pre></td></tr></table></figure><p><strong>2.打tag</strong></p><p>本地项目是没有tag的，给项目加入一个tag。以便pod能自动识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag 1.0.0  //git tag -m &quot;注释&quot; 0.0.2﻿</span><br><span class="line">git push --tags</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>3.创建podspec文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod spec create  https://github.com/huluo666/HJDefaultsCache</span><br></pre></td></tr></table></figure><p>编辑<code>.podspec</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">项目名称</span></span><br><span class="line">  s.name         = &quot;HJDefaultsCache&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">版本号</span></span><br><span class="line">  s.version      = &quot;1.0.0&quot;  //版本号</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">对开源项目的描述</span></span><br><span class="line">  s.summary      = &quot;为NSUserDefaults设置默认值&quot;</span><br><span class="line">  s.description  = &lt;&lt;-DESC</span><br><span class="line">   为NSUserDefaults设置默认值</span><br><span class="line">                   DESC</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">开源项目的首页</span></span><br><span class="line">  s.homepage     = &quot;https://github.com/huluo666/HJDefaultsCache&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">开源协议</span></span><br><span class="line">  s.license = &#123; :type =&gt; &#x27;MIT&#x27;, :text =&gt; &lt;&lt;-LICENSE</span><br><span class="line">                   Copyright 2016</span><br><span class="line">                   Permission is granted to...</span><br><span class="line">                 LICENSE</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">  s.author             = &#123; &quot;H罗&quot; =&gt; &quot;huluo666@126.com&quot; &#125;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">适用于ios7及以上版本</span></span><br><span class="line">  s.platform     = :ios, &quot;7.0&quot; </span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/huluo666/HJDefaultsCache.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">源文件，这个就是供第三方使用的源文件</span></span><br><span class="line">  s.source_files  = &quot;Classes&quot;, &quot;HJDefaultsCache/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">  s.exclude_files = &quot;Classes/Exclude&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">使用的是ARC</span></span><br><span class="line">  s.requires_arc = true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">s.resources = <span class="string">&quot;Resources/*.png&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">s.dependency <span class="string">&quot;JSONKit&quot;</span>, <span class="string">&quot;~&gt; 1.4&quot;</span></span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>注意: </p><ul><li><p>1、s.version应和tag的版本一致.先push该文件之后,再push –tags</p></li><li><p>2、将源代码放置在固定的文件夹下,同时修改s.source</p></li></ul><p>修改好的<code>podspec</code>文件记得上传同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add HJDefaultsCache.podspec</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -am <span class="string">&quot;add HJDefaultsCache.podspec 注释”</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">git push -u origin master</span></span></span><br></pre></td></tr></table></figure><p>最后，在你项目的Podfile里面加入这个第三方库的地址 <code>pod install</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;HJDefaultsCache&#x27;, :git =&gt; &#x27;https://github.com/huluo666/HJDefaultsCache.git&#x27;</span><br></pre></td></tr></table></figure><h3 id="二、使用Trunk创建官方CocoaPod"><a href="#二、使用Trunk创建官方CocoaPod" class="headerlink" title="二、使用Trunk创建官方CocoaPod"></a>二、使用Trunk创建官方CocoaPod</h3><p>要想使用Trunk服务，首先你需要注册自己的电脑。这很简单，只要你指明你的邮箱地址（spec文件中的）和名称即可。</p><ul><li><p>1.第一次使用,注册  <code>$ pod trunk register 793633193@qq.com &#39;huluo666&#39;</code></p></li><li><p>2.收到邮件激活后，检查是否注册成功 <code>pod trunk me</code></p></li></ul><p>ps:当然，如果你的pod是由多人维护的，你也可以添加其他维护者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pod trunk add-owner ARAnalytics kyle@cocoapods.org</span></span><br></pre></td></tr></table></figure><ul><li><p>3 .验证podspec文件是否有误 <code>pod spec lint Test.podspec</code></p><p>   成功 <code>Test.podspec passed validation</code>.</p></li><li><p>4.push pod spec文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pod trunk push Test.podspec</span></span><br></pre></td></tr></table></figure></li></ul><p>等待部署成功。</p><h3 id="三-、踩过的一些坑备忘"><a href="#三-、踩过的一些坑备忘" class="headerlink" title="三 、踩过的一些坑备忘"></a>三 、踩过的一些坑备忘</h3><p><code>-WARN  | [iOS] license: Unable to find a license file</code></p><p>参考官网 <a href="https://guides.cocoapods.org/syntax/podspec.html#license">https://guides.cocoapods.org/syntax/podspec.html#license</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.license = &#123; :type =&gt; &#x27;MIT&#x27;, :text =&gt; &lt;&lt;-LICENSE</span><br><span class="line">                  Copyright 2016</span><br><span class="line">                  Permission is granted to...</span><br><span class="line">                LICENSE</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><p><code>WARN  | source: The version should be included in the Git tag.</code></p><p>本地podspec文件和github上的tag要一致</p><p>其它命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//删除Tag</span><br><span class="line">git tag -d v1.0.0</span><br><span class="line">git push origin :refs/tags/v1.0.0</span><br></pre></td></tr></table></figure><h3 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h3><p><strong>1、创建描述文件</strong></p><p><code>pod spec create  https://github.com/huluo666/NetWorkMonitorView</code></p><ul><li>若没有设置tag会有提示,执行下面命令，重新进行第一步即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​```</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -a 1.0.0 -m <span class="string">&quot;Tag release 1.0.0&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --tags</span></span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p><strong>2.验证描述文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint yourPodName.podspec</span><br></pre></td></tr></table></figure><p><strong>3.trunk 发布</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push  //如果有警告  pod trunk push --allow-warnings </span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://guides.cocoapods.org/making/private-cocoapods.html">https://guides.cocoapods.org/making/private-cocoapods.html</a></p><p><a href="http://www.voidcn.com/blog/bluefish89/article/p-3673616.html">http://www.voidcn.com/blog/bluefish89/article/p-3673616.html</a></p><p><a href="http://useyourloaf.com/blog/creating-a-cocoapod/">http://useyourloaf.com/blog/creating-a-cocoapod/</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CocoaPods安装和使用教程</title>
      <link href="/2016/04/12/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2016/04/12/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>CocoaPods安装和使用教程 <a href="http://code4app.com/article/cocoapods-install-usage">http://code4app.com/article/cocoapods-install-usage</a></p><p>code4App的安装教程已经非常详细了，但由于软件环境不同可能出现不同问题，补充几点。</p><p>1.安装Ruby环境淘宝源应该使用<code>https</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p><code>问题解决</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class="line">    Operation not permitted - /usr/bin/pod</span><br></pre></td></tr></table></figure><p>解决<code>sudo gem install -n /usr/local/bin cocoapods</code>  <a href="http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error">stack flow</a></p><p>OR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods --pre</span><br></pre></td></tr></table></figure><p>执行 <code>pod setup</code>时感觉卡住不动，一直停留在<code>Setting up CocoaPods master repo</code><br>这是要去把整个specs仓库clone下来，下载到 ~&#x2F;.cocoapods里，文件较大，比较耗时，可以查看是否正在下载中…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>  ~/.cocoapods//进入cocoapods目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -sh *  //查看文件大小</span></span><br></pre></td></tr></table></figure><p>经过漫长等待终于<code>Setup completed</code>，文件大小约<code>667M</code></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS绘图与动画系列 粒子效果（六）</title>
      <link href="/2016/04/12/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97-%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2016/04/12/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97-%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><code>CAEmitterLayer</code> 粒子发射器</p><p>CAEmitterLayer是一个高性能的粒子引擎，被用来创建实时例子动画如：烟雾，火，雪花，雨，爆炸等等这些效果。</p><h4 id="一、粒子发送器图层"><a href="#一、粒子发送器图层" class="headerlink" title="一、粒子发送器图层"></a>一、粒子发送器图层</h4><p>粒子的常用属性</p><ul><li>birthRate：每秒发送（出生）粒子的数量</li></ul><blockquote><ul><li>emitterMode：发送的样式<ul><li>kCAEmitterLayerPoints：点</li><li>kCAEmitterLayerOutline：线</li><li>kCAEmitterLayerSurface：面</li><li>kCAEmitterLayerVolume：团</li></ul></li><li>emitterShape：发送形状的样式<ul><li>kCAEmitterLayerPoint：点</li><li>kCAEmitterLayerLine：线</li><li>kCAEmitterLayerRectangle：矩形</li><li>kCAEmitterLayerCuboid：立方体</li><li>kCAEmitterLayerCircle：曲线</li><li>kCAEmitterLayerSphere：圆形</li></ul></li><li>renderMode：粒子出现的样式<ul><li>kCAEmitterLayerOldestFirst：最后出生的粒子，在第一个</li><li>kCAEmitterLayerOldestLast：最后出生的粒子，在最后面</li><li>kCAEmitterLayerBackToFront：把后面的粒子放到上面</li><li>kCAEmitterLayerAdditive：叠加</li></ul></li></ul></blockquote><ul><li>emitterCells：在粒子发送器上面添加粒子</li></ul><p><code>CAEmitterCell：粒子</code></p><blockquote><p>contents：粒子的内容</p><p>lifetime：存活的时间</p><p>lifetimeRange：存活时间的范围</p><p>birthRate：每秒粒子生成的数量</p><p>emissionLatitude：散发的纬度（方向：上下）-&gt;弧度</p><p>emissionLongitude：散发的经度（方向：左右）-&gt;弧度</p><p>emissionRange：散发的范围 -&gt; 弧度</p><p>velocity：发送的速度（速度越快，跑的越远）</p><p>velocityRange：发送速度的范围</p><p>xAcceleration：X轴的加速度</p><p>yAcceleration：Y轴的加速度</p><p>zAcceleration：Z轴的加速度</p><p>name：粒子的名字。可以通过名字，找到粒子</p></blockquote><p>下雪</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//雪花动画</span></span><br><span class="line">- (<span class="type">void</span>)animation1 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//粒子发射器</span></span><br><span class="line">    <span class="built_in">CAEmitterLayer</span> *snowEmitter = [<span class="built_in">CAEmitterLayer</span> layer];</span><br><span class="line">    <span class="comment">//粒子发射的位置</span></span><br><span class="line">    snowEmitter.emitterPosition = <span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="comment">//发射源的大小</span></span><br><span class="line">    snowEmitter.emitterSize        = <span class="built_in">CGSizeMake</span>(<span class="keyword">self</span>.view.bounds.size.width, <span class="number">0.0</span>);;</span><br><span class="line">    <span class="comment">//发射模式</span></span><br><span class="line">    snowEmitter.emitterMode        = kCAEmitterLayerOutline;</span><br><span class="line">    <span class="comment">//发射源的形状</span></span><br><span class="line">    snowEmitter.emitterShape    = kCAEmitterLayerLine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建雪花粒子</span></span><br><span class="line">    <span class="built_in">CAEmitterCell</span> *snowflake = [<span class="built_in">CAEmitterCell</span> emitterCell];</span><br><span class="line">    <span class="comment">//粒子的名称</span></span><br><span class="line">    snowflake.name = <span class="string">@&quot;snow&quot;</span>;</span><br><span class="line">    <span class="comment">//粒子参数的速度乘数因子。越大出现的越快</span></span><br><span class="line">    snowflake.birthRate        = <span class="number">1.0</span>;</span><br><span class="line">    <span class="comment">//存活时间</span></span><br><span class="line">    snowflake.lifetime        = <span class="number">120.0</span>;</span><br><span class="line">    <span class="comment">//粒子速度</span></span><br><span class="line">    snowflake.velocity        = <span class="number">-10</span>;                <span class="comment">// falling down slowly</span></span><br><span class="line">    <span class="comment">//粒子速度范围</span></span><br><span class="line">    snowflake.velocityRange = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//粒子y方向的加速度分量</span></span><br><span class="line">    snowflake.yAcceleration = <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//周围发射角度</span></span><br><span class="line">    snowflake.emissionRange = <span class="number">0.5</span> * M_PI;        <span class="comment">// some variation in angle</span></span><br><span class="line">    <span class="comment">//子旋转角度范围</span></span><br><span class="line">    snowflake.spinRange        = <span class="number">0.25</span> * M_PI;        <span class="comment">// slow spin</span></span><br><span class="line">    <span class="comment">//粒子图片</span></span><br><span class="line">    snowflake.contents        = (<span class="type">id</span>) [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;DazFlake&quot;</span>] <span class="built_in">CGImage</span>];</span><br><span class="line">    <span class="comment">//粒子颜色</span></span><br><span class="line">    snowflake.color            = [[<span class="built_in">UIColor</span> redColor] <span class="built_in">CGColor</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置阴影</span></span><br><span class="line">    snowEmitter.shadowOpacity = <span class="number">1.0</span>;</span><br><span class="line">    snowEmitter.shadowRadius  = <span class="number">0.0</span>;</span><br><span class="line">    snowEmitter.shadowOffset  = <span class="built_in">CGSizeMake</span>(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    snowEmitter.shadowColor   = [[<span class="built_in">UIColor</span> whiteColor] <span class="built_in">CGColor</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将粒子添加到粒子发射器上</span></span><br><span class="line">    snowEmitter.emitterCells = [<span class="built_in">NSArray</span> arrayWithObject:snowflake];</span><br><span class="line">    [<span class="keyword">self</span>.view.layer insertSublayer:snowEmitter atIndex:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/4b6d60755dd3">http://www.jianshu.com/p/4b6d60755dd3</a></p><p><a href="http://www.jianshu.com/p/6f5d7cfdae2f">http://www.jianshu.com/p/6f5d7cfdae2f</a></p><p><a href="http://www.jianshu.com/p/6a47f7348ed4">http://www.jianshu.com/p/6a47f7348ed4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画,绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 多语言本地化</title>
      <link href="/2016/04/12/iOS%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
      <url>/2016/04/12/iOS%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="优秀开源库"><a href="#优秀开源库" class="headerlink" title="优秀开源库"></a><code>优秀开源库</code></h4><p><a href="https://github.com/micazeve/iOS-CustomLocalisator">https://github.com/micazeve/iOS-CustomLocalisator</a></p><p><a href="https://github.com/Aufree/Hodor">https://github.com/Aufree/Hodor</a></p><p><a href="https://github.com/LigeiaRowena/LocalizationManager">https://github.com/LigeiaRowena/LocalizationManager</a></p><p><a href="https://github.com/whde/WhdeLocalized">https://github.com/whde/WhdeLocalized</a></p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a><code>插件</code></h4><p><code>AMLocalizedStringBuilder</code></p><p>快捷键 <code>ctrl+f</code></p><p>把<code>Localizable.strings</code>生成为<code>object-c</code>类。</p><p>使用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;AMLocalizedString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    R_String.am_Chinese;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App内跳转至系统设置界面</title>
      <link href="/2016/04/11/App%E8%B7%B3%E8%BD%AC%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/"/>
      <url>/2016/04/11/App%E8%B7%B3%E8%BD%AC%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>直接跳转到该APP设置页面（WIFI,Location,photo…）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(&amp;UIApplicationOpenSettingsURLString != nil)</span><br><span class="line">&#123;</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//定位服务设置界面</span><br><span class="line">NSURL *url = [NSURL URLWithString:@&quot;prefs:root=LOCATION_SERVICES&quot;];</span><br><span class="line">if ([[UIApplication sharedApplication] canOpenURL:url])</span><br><span class="line">&#123;</span><br><span class="line">    [[UIApplication sharedApplication] openURL:url];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它更多参考</p><p><a href="https://gist.github.com/phynet/471089a51b8f940f0fb4">https://gist.github.com/phynet/471089a51b8f940f0fb4</a></p><p><a href="https://github.com/zilaiyedaren/zilaiyedaren.github.io/blob/b8211461a39bd0f1fc4c20252b0aca765fd8e6bb/_posts/2015-10-14-iOS%E5%BC%80%E5%8F%91-%E8%B7%B3%E8%BD%AC%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E3%80%81App%E4%B9%8B%E9%97%B4%E8%B7%B3%E8%BD%AC%E3%80%81%E8%B7%B3%E8%BD%ACAppStore.md">iOS开发-跳转系统设置界面、App之间跳转、跳转AppStore</a></p><p>PS：在iOS9带来的更新中，有一项关于<code>URL Scheme</code>的变化，具体内容是：在iOS9的SDK中，若要通过<code>URL Scheme</code>访问其他APP，则需要事先将该URL加入程序的白名单中。</p><p><strong>具体原因及解决方案查阅：</strong></p><p><a href="http://useyourloaf.com/blog/querying-url-schemes-with-canopenurl/">Querying URL Schemes with canOpenURL</a></p><p><a href="https://github.com/ChenYilong/iOS9AdaptationTips/tree/master/Demo3_iOS9URLScheme%E9%80%82%E9%85%8D_%E5%BC%95%E5%85%A5%E7%99%BD%E5%90%8D%E5%8D%95%E6%A6%82%E5%BF%B5">iOS9URLScheme适配_引入白名单概念</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS隐藏键盘总结</title>
      <link href="/2016/04/11/iOS%20%E6%94%B6%E9%94%AE%E7%9B%98/"/>
      <url>/2016/04/11/iOS%20%E6%94%B6%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p><code>弹出键盘</code><br><code>[textField becomeFirstResponder];</code></p><p><code>隐藏键盘</code><br><code>resignFirstResponder</code>、<code>endEditing</code></p><p><strong>方式一.点击Return的时候隐藏键盘（需设置TextField的delegate）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField</span><br><span class="line">&#123;</span><br><span class="line">    [textField resignFirstResponder];//需指定文本框的代理 textField.delegate = self;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二.点击view其他区域隐藏键盘</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="type">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.直接交出CSTextField的第一响应者的身份</span></span><br><span class="line">    [CSTextField resignFirstResponder];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.遍历所有子视图  查找UITextField控件并通知文本失去第一响应者状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subVie <span class="keyword">in</span> <span class="keyword">self</span>.view.subviews) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([subVie  isKindOfClass:[<span class="built_in">UITextField</span>  <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            [subVie  resignFirstResponder];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.view结束编辑</span></span><br><span class="line">    [<span class="keyword">self</span>.view endEditing:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.keyWindow 结束编辑</span></span><br><span class="line">    [[[<span class="built_in">UIApplication</span> sharedApplication] keyWindow] endEditing:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.发送resignFirstResponder.</span></span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] sendAction:<span class="keyword">@selector</span>(resignFirstResponder) to:<span class="literal">nil</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.设置textField的Tag</span></span><br><span class="line">    [[<span class="keyword">self</span>.view viewWithTag:<span class="number">10001</span>] resignFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scroll 滑动隐藏</span></span><br><span class="line">- (<span class="type">void</span>)scrollViewWillBeginDragging:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.view endEditing:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于UITextView隐藏键盘"><a href="#关于UITextView隐藏键盘" class="headerlink" title="关于UITextView隐藏键盘"></a>关于UITextView隐藏键盘</h4><p><strong>思路基本和UITextField一样</strong></p><p>1.方法一</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.（结束编辑）</span></span><br><span class="line">[<span class="keyword">self</span>.view endEditing:<span class="literal">YES</span>];</span><br><span class="line">OR</span><br><span class="line">[<span class="keyword">self</span>.text endEditing:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.（注销第一响应）</span></span><br><span class="line">[<span class="keyword">self</span>.text resignFirstResponder];</span><br></pre></td></tr></table></figure><p> <br>2.方法二 （Return键隐藏）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  需设置textView的delegate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="type">BOOL</span>)textView:(<span class="built_in">UITextView</span> *)textView shouldChangeTextInRange:(<span class="built_in">NSRange</span>)range replacementText:(<span class="built_in">NSString</span> *)text</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([text isEqualToString:<span class="string">@&quot;\n&quot;</span>]) &#123;</span><br><span class="line">        [textView resignFirstResponder];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于-UITableView如何隐藏键盘方法"><a href="#关于-UITableView如何隐藏键盘方法" class="headerlink" title="关于 UITableView如何隐藏键盘方法"></a><strong>关于 UITableView如何隐藏键盘方法</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    UITapGestureRecognizer *gestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hideKeyboard:)];</span><br><span class="line"></span><br><span class="line">    gestureRecognizer.cancelsTouchesInView = NO;</span><br><span class="line">    [self.tableView addGestureRecognizer:gestureRecognizer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)hideKeyboard:(UIGestureRecognizer *)gestureRecognizer</span><br><span class="line">&#123;</span><br><span class="line">    CGPoint point = [gestureRecognizer locationInView:self.tableView];</span><br><span class="line">    NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:point];</span><br><span class="line"></span><br><span class="line">    // Let say you are editing first section first row</span><br><span class="line">    if (indexPath != nil &amp;&amp; indexPath.section == 0 &amp;&amp; indexPath.row == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.firstRowTextField resignFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stackflow<a href="http://stackoverflow.com/questions/2321038/dismiss-keyboard-by-touching-background-of-uitableview">Dismiss keyboard by touching background of UITableView</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)findAndResignFirstResonder:(<span class="built_in">UIView</span> *)stView &#123;</span><br><span class="line">    <span class="keyword">if</span> (stView.isFirstResponder) &#123;</span><br><span class="line">        [stView resignFirstResponder];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subView <span class="keyword">in</span> stView.subviews) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> findAndResignFirstResonder:subView]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView</span><br><span class="line">                             didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">self</span> findAndResignFirstResonder: <span class="keyword">self</span>.view];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘图动画实例</title>
      <link href="/2016/04/11/%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B%20%E9%95%82%E7%A9%BA%E6%95%88%E6%9E%9C/"/>
      <url>/2016/04/11/%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B%20%E9%95%82%E7%A9%BA%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>镂空效果（中间透明，四周不透明）</strong></p><p>常用于二维码扫描区域透明效果定制</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SCREEN_WIDTH    ([UIScreen mainScreen].bounds.size.width)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 矩形镂空</span></span><br><span class="line">-(<span class="type">void</span>)addRectHoleView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *overlayPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *transparentPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>((SCREEN_WIDTH<span class="number">-200</span>)*<span class="number">0.5</span>, <span class="number">120</span>, <span class="number">200</span>, <span class="number">200</span>)];</span><br><span class="line">    [overlayPath appendPath:transparentPath];</span><br><span class="line">    [overlayPath setUsesEvenOddFillRule:<span class="literal">YES</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">CAShapeLayer</span> *fillLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    fillLayer.path = overlayPath.CGPath;</span><br><span class="line">    fillLayer.fillRule = kCAFillRuleEvenOdd;</span><br><span class="line">    fillLayer.fillColor = [[<span class="built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="number">0.5</span>].CGColor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    [<span class="keyword">self</span>.view.layer addSublayer:fillLayer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 圆形镂空</span></span><br><span class="line">- (<span class="type">void</span>)addArcHoleView&#123;</span><br><span class="line">    <span class="comment">//中间镂空的矩形框</span></span><br><span class="line">    <span class="built_in">CGRect</span> myRect =<span class="built_in">CGRectMake</span>((SCREEN_WIDTH<span class="number">-200</span>)*<span class="number">0.5</span>, <span class="number">120</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="comment">//背景</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:[<span class="built_in">UIScreen</span> mainScreen].bounds cornerRadius:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//镂空</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *circlePath = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:myRect];</span><br><span class="line">    [path appendPath:circlePath];</span><br><span class="line">    [path setUsesEvenOddFillRule:<span class="literal">NO</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CAShapeLayer</span> *fillLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    fillLayer.fillColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">    fillLayer.opacity = <span class="number">0.5</span>;</span><br><span class="line">    fillLayer.path = path.CGPath;</span><br><span class="line">    </span><br><span class="line">    fillLayer.fillRule = kCAFillRuleEvenOdd;<span class="comment">//设置填充规则(重点)</span></span><br><span class="line">    [<span class="keyword">self</span>.view.layer addSublayer:fillLayer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line">- (<span class="type">void</span>)addArcHoleView2&#123;</span><br><span class="line"><span class="built_in">UIView</span> *maskView0 = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,SCREEN_WIDTH,SCREEN_HEIGHT)];</span><br><span class="line">    maskView0.layer.opacity=<span class="number">0.5</span>;</span><br><span class="line">    maskView0.backgroundColor = [[<span class="built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="number">0.5</span>];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:maskView0];</span><br><span class="line">    maskView0.layer.mask = (&#123;</span><br><span class="line">        <span class="built_in">CGRect</span> roundedRect = <span class="keyword">self</span>.view.bounds;</span><br><span class="line">        roundedRect.origin.x = roundedRect.size.width / <span class="number">4.0</span>f;</span><br><span class="line">        roundedRect.origin.y = roundedRect.size.height / <span class="number">4.0</span>f;</span><br><span class="line">        roundedRect.size.width /= <span class="number">2.0</span>f;</span><br><span class="line">        roundedRect.size.height= roundedRect.size.width;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGFloat</span> cornerRadius = roundedRect.size.height / <span class="number">2.0</span>f;<span class="comment">//高度=宽度</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">        <span class="built_in">UIBezierPath</span> *croppedPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:roundedRect cornerRadius:cornerRadius];</span><br><span class="line">        [path appendPath:croppedPath];</span><br><span class="line">        [path setUsesEvenOddFillRule:<span class="literal">YES</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *mask = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">        mask.path = path.CGPath;</span><br><span class="line">        mask.fillRule = kCAFillRuleEvenOdd;</span><br><span class="line">        mask;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>微信聊天泡泡</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)drawChatBubble</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*右边聊天泡泡*/</span></span><br><span class="line">    <span class="built_in">UIImage</span> *rightBubbleImage = [<span class="built_in">UIImage</span>  imageNamed:<span class="string">@&quot;Information-box_blue_nor&quot;</span>];</span><br><span class="line">    rightBubbleImage = [rightBubbleImage stretchableImageWithLeftCapWidth:rightBubbleImage.size.height * <span class="number">0.3</span> topCapHeight:rightBubbleImage.size.height * <span class="number">0.8</span>];</span><br><span class="line">    <span class="built_in">UIImageView</span>  *bubbleView=[[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    bubbleView.image=rightBubbleImage;</span><br><span class="line">    bubbleView.frame=<span class="built_in">CGRectMake</span>(<span class="number">200</span>, <span class="number">200.0</span>f,rightBubbleImage.size.width*<span class="number">3</span>, rightBubbleImage.size.height*<span class="number">3</span>);</span><br><span class="line">    [<span class="keyword">self</span>.view  addSubview:bubbleView];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//聊天图片</span></span><br><span class="line">    <span class="built_in">UIImageView</span>  *ChatPicture=[[<span class="built_in">UIImageView</span> alloc]initWithFrame:bubbleView.frame];</span><br><span class="line">    ChatPicture.image=[<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;chatDefaultImage.jpg&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:ChatPicture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//画图 仿weixin</span></span><br><span class="line">    <span class="built_in">CALayer</span> *layer              = bubbleView.layer;</span><br><span class="line">    layer.frame                 = (<span class="built_in">CGRect</span>)&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,bubbleView.layer.frame.size&#125;;</span><br><span class="line">    ChatPicture.layer.mask = layer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.raywenderlich.com/94302/implement-circular-image-loader-animation-cashapelayer">How To Implement A Circular Image Loader Animation with CAShapeLayer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html笔记</title>
      <link href="/2016/04/10/html%E6%95%99%E7%A8%8B/"/>
      <url>/2016/04/10/html%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>html教程</p><p><a href="http://www.runoob.com/html/html-tutorial.html">http://www.runoob.com/html/html-tutorial.html</a></p><p><a href="http://www.zb7.com/z/html/">http://www.zb7.com/z/html/</a></p><p><a href="http://w3school.com.cn/html/html_intro.asp">http://w3school.com.cn/html/html_intro.asp</a></p><ul><li><html> 与 </html> 之间的文本描述网页</li><li><head>与 </head> 这里是文档的头部 </li><li><body> 与 </body> 之间的文本是可见的页面内容（文档的主体）</li><li><h1> 与 </h1> 之间的文本被显示为标题</li><li><p> 与 </p> 之间的文本被显示为段落</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><html> 与 </html></td><td>定义 HTML 文档。</td></tr><tr><td><body> 与 </body> 之</td><td>定义文档的主体。</td></tr><tr><td><h1> 与 </h1></td><td>定义 HTML 标题</td></tr><tr><td><hr></td><td>定义水平线。</td></tr><tr><td>&lt;!–&gt;</td><td>定义注释。</td></tr><tr><td><br /></td><td>插入单个折行（换行）</td></tr><tr><td><a href="default.htm" >链接 </a></td><td>链接标签</td></tr><tr><td></td><td></td></tr></tbody></table><p>New : HTML5 中的新标签。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&lt;!DOCTYPE&gt;</td><td>定义文档类型。</td></tr><tr><td><html></td><td>定义 HTML 文档。</td></tr><tr><td><title></td><td>定义文档的标题。</td></tr><tr><td><body></td><td>定义文档的主体。</td></tr><tr><td><h1> to <h6></td><td>定义 HTML 标题。</td></tr><tr><td><p></td><td>定义段落。</td></tr><tr><td><br></td><td>定义简单的折行。</td></tr><tr><td><hr></td><td>定义水平线。</td></tr><tr><td><!--...--></td><td>定义注释。</td></tr></tbody></table><p><code>标题</code> <h1> 定义最大的标题。<h6> 定义最小的标题。</p><p><code>HTML 链接</code>由 <a> 标签定义。链接的地址在 <code>href</code> 属性中指定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多：<a href="http://w3school.com.cn/tags/html_ref_byfunc.asp">http://w3school.com.cn/tags/html_ref_byfunc.asp</a></p><p><strong>HTML 的 style 属性</strong></p><p>应该避免使用下面这些标签和属性：在 HTML 4 中，有若干的标签和属性是被废弃的</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><center></td><td>定义居中的内容。</td></tr><tr><td><font> 和 <basefont></td><td>定义 HTML 字体。</td></tr><tr><td><s> 和 <strike></td><td>定义删除线文本</td></tr><tr><td><u></td><td>定义下划线文本</td></tr><tr><td>属性</td><td>描述</td></tr><tr><td>align</td><td>定义文本的对齐方式</td></tr><tr><td>bgcolor</td><td>定义背景颜色</td></tr><tr><td>color</td><td>定义文本颜色</td></tr></tbody></table><p>对于以上这些标签和属性：请使用<code>样式</code>代替！</p><p><strong>HTML 颜色名</strong></p><p>HTML 4.0 标准仅支持 <code>16</code> 种<em>颜色名</em>，它们是：<code>aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、purple、red、silver、teal、white、yellow</code>。</p><p>PS：如果使用其它颜色的话，就应该使用<em>十六进制的颜色值</em>。</p><p><a href="http://w3school.com.cn/tags/html_ref_colornames.asp">http://w3school.com.cn/tags/html_ref_colornames.asp</a></p><p>重要标签</p><p><code>&lt;!DOCTYPE&gt;</code> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</p><p><code>&lt;!DOCTYPE&gt;</code> 声明<code>不是 HTML</code> 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS绘图与动画系列 Animation（四）</title>
      <link href="/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20Animation%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20Animation%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>本系列文章很多知识点来源<a href="http://www.kancloud.cn/manual/ios"><strong>ios核心动画高级技巧</strong></a>一书，提供了完整的绘图动画学习路线，强烈推荐阅读！</p><p>前面通过<code>Core Graphics（Quartz 2D）</code>和<code>CAShapeLayer</code>与<code>UIBezierPath</code>结合可以随心所欲的绘制我们想要的图形。</p><p>但是有些不足的是绘制的图形都是静态的，动画就是让这些图形动起来。</p><h1 id="隐式动画、显式动画"><a href="#隐式动画、显式动画" class="headerlink" title="隐式动画、显式动画"></a>隐式动画、显式动画</h1><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/08/FossyAr_1dtpH2cbIMf5icP8XV8M144.png"></p><p><img src="http://ww1.sinaimg.cn/large/65cc0af7gw1dxlusbklpmj.jpg"></p><h4 id="一、隐式动画"><a href="#一、隐式动画" class="headerlink" title="一、隐式动画"></a>一、隐式动画</h4><p><strong>1、什么是隐式动画？</strong></p><p>每一个UIView内部都默认关联着一个<code>CALayer</code>，我们可以称这个Layer为<code>Root Layer</code>(根层)，所有非<code>Root Layer</code>，也就是手动创建的CALayer对象，都存在着隐式动画</p><ul><li>当对非RootLayer的部分属性进行修改时，默认会自动产生一些动画效果</li><li>而这些属性称为AnimatableProperties(可动画属性)</li><li>也就是说，对非根层的layer可动画属性进行修改产生的动画，就称为隐式动画</li><li>之所以叫隐式是因为我们并没有指定任何动画的类型。我们仅仅改变了一个属性，然后Core Animation来决定如何并且何时去做动画。</li><li>隐式动画是指通过UIView的<code>animateWithDuration:animations:</code>方法创建的动画。无须创建动画对象，只需改变动画层的属性，让核心动画自己去完成动画效果, 例如(CATransaction)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画</span><br><span class="line">backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画</span><br><span class="line">position：用于设置CALayer的位置。修改这个属性会产生平移动画</span><br></pre></td></tr></table></figure><p><strong>2、可以通过动画事务(CATransaction)关闭默认的隐式动画效果</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (view)moveLayer:(<span class="type">BOOL</span>)animation &#123;</span><br><span class="line">    <span class="keyword">if</span> (animation) &#123;</span><br><span class="line">        <span class="comment">// 改变了图层的位置，默认会有动画效果，这叫图层的隐式动画</span></span><br><span class="line">        <span class="keyword">self</span>.myLayer.position <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        [<span class="keyword">self</span>.btnOfMove setTitle:@<span class="string">&quot;还原&quot;</span> forState:<span class="type">UIControlStateNormal</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 使用事务来去掉图层的隐式动画。</span></span><br><span class="line">        [<span class="type">CATransaction</span> begin];<span class="comment">// 开启事务</span></span><br><span class="line">        [<span class="type">CATransaction</span> setDisableActions:<span class="type">YES</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.myLayer.position <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">        </span><br><span class="line">        [<span class="type">CATransaction</span> commit];<span class="comment">// 提交事务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/966928e9cf49">http://www.jianshu.com/p/966928e9cf49</a></p><p>隐式动画是ios4之后引入sdk的，之前只有显式动画。从官方的介绍来看，两者并没有什么差别，甚至苹果还推荐使用隐式动画，但是这里面有一个问题，就是使用隐式动画后，View会暂时不能接收用户的触摸、滑动等手势。这就造成了当一个列表滚动时，如果对其中的view使用了隐式动画，就会感觉滚动无法主动停止下来，必须等动画结束了才能停止。</p><h4 id="二、显式动画"><a href="#二、显式动画" class="headerlink" title="二、显式动画"></a>二、显式动画</h4><p>显式动画是指用户自己通过<code>beginAnimations:context:</code>和<code>commitAnimations</code>创建的动画。</p><p>显示动画指的是，需要自己创建和管理动画对象，并且将它们应用到动画层，才能显示动画效果。</p><p>显式动画的基类为<code>CAAnimation</code></p><p><code>CAAnimation</code>分为这4种，他们分别是</p><blockquote><ul><li><strong>1.CABasicAnimation</strong></li><li>通过设定起始点，终点，时间，动画会沿着你这设定点进行移动。</li><li><strong>2.CAKeyframeAnimation</strong></li><li>Keyframe顾名思义就是关键点的frame，你可以通过设定CALayer的始点、中间关键点、终点的frame，时间，动画会沿你设定的轨迹进行移动</li><li><strong>3.CAAnimationGroup</strong></li><li>Group也就是组合的意思，就是把对这个Layer的所有动画都组合起来。PS：一个layer设定了很多动画，他们都会同时执行，如何按顺序执行我到时候再讲。</li><li><strong>4.CATransition</strong></li><li>这个就是苹果帮开发者封装好的一些动画。</li></ul></blockquote><p>1）属性动画—基本动画<code>CABasicAnimation</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CABasicAnimation</span> <span class="operator">*</span>opAnim <span class="operator">=</span> [<span class="type">CABasicAnimation</span> animationWithKeyPath:<span class="meta">@opacity</span>];</span><br><span class="line">opAnim.duration <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">opAnim.fromValue <span class="operator">=</span> [<span class="type">NSNumber</span> numberWithFloat:<span class="number">0.1</span>];</span><br><span class="line">opAnim.toValue<span class="operator">=</span> [<span class="type">NSNumber</span> numberWithFloat:<span class="number">1.0</span>];</span><br><span class="line">opAnim.repeatCount <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">[view.layer addAnimation:opAnim forKey:<span class="meta">@animateOpacity</span>];</span><br></pre></td></tr></table></figure><p>2）属性动画—关键帧动画<code>CAKeyframeAnimation</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>CAKeyframeAnimation关键帧动画</span></span><br><span class="line"><span class="operator">-</span> (void)changeColor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.创建CALayer对象</span></span><br><span class="line">    <span class="type">CALayer</span> <span class="operator">*</span>colorLayer <span class="operator">=</span> [<span class="type">CALayer</span> layer];</span><br><span class="line">    colorLayer.frame <span class="operator">=</span> <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">64</span>);</span><br><span class="line">    colorLayer.position <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">150</span>);</span><br><span class="line">    colorLayer.backgroundColor <span class="operator">=</span> [<span class="type">UIColor</span> greenColor].<span class="type">CGColor</span>;</span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:colorLayer];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.创建关键帧动画</span></span><br><span class="line">    <span class="type">CAKeyframeAnimation</span> <span class="operator">*</span>animation <span class="operator">=</span> [<span class="type">CAKeyframeAnimation</span> animation];</span><br><span class="line">    animation.keyPath <span class="operator">=</span> @<span class="string">&quot;backgroundColor&quot;</span>;</span><br><span class="line">    animation.duration <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">    animation.values <span class="operator">=</span> @[</span><br><span class="line">                         (__bridge id)[<span class="type">UIColor</span> blueColor].<span class="type">CGColor</span>,</span><br><span class="line">                         (__bridge id)[<span class="type">UIColor</span> redColor].<span class="type">CGColor</span>,</span><br><span class="line">                         (__bridge id)[<span class="type">UIColor</span> greenColor].<span class="type">CGColor</span>,</span><br><span class="line">                         (__bridge id)[<span class="type">UIColor</span> blueColor].<span class="type">CGColor</span> ];</span><br><span class="line">    animation.keyTimes <span class="operator">=</span> @[@(<span class="number">0.0</span>),@(<span class="number">0.3</span>),@(<span class="number">0.6</span>),@(<span class="number">1.0</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.将动画应用到colorLayer层</span></span><br><span class="line">    [colorLayer addAnimation:animation forKey:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、动画组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//TODO:CAAnimationGroup动画组</span><br><span class="line">- (void)changeColor2</span><br><span class="line">&#123;</span><br><span class="line">    //1.创建CALayer对象</span><br><span class="line">    CALayer *colorLayer = [CALayer layer];</span><br><span class="line">    colorLayer.frame = CGRectMake(0, 0, 64, 64);</span><br><span class="line">    colorLayer.position = CGPointMake(0, 150);</span><br><span class="line">    colorLayer.backgroundColor = [UIColor greenColor].CGColor;</span><br><span class="line">    [self.layer addSublayer:colorLayer];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //创建动画1</span><br><span class="line">    CAKeyframeAnimation *animation1 = [CAKeyframeAnimation animation];</span><br><span class="line">    animation1.keyPath = @&quot;position&quot;;</span><br><span class="line">    animation1.path = bezierPath.CGPath;</span><br><span class="line">    animation1.rotationMode = kCAAnimationRotateAuto;</span><br><span class="line">   </span><br><span class="line">    //创建动画2</span><br><span class="line">    CABasicAnimation *animation2 = [CABasicAnimation animation];</span><br><span class="line">    animation2.keyPath = @&quot;backgroundColor&quot;;</span><br><span class="line">    animation2.toValue = (__bridge id)[UIColor redColor].CGColor;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    //创建动画组</span><br><span class="line">    CAAnimationGroup *groupAnimation = [CAAnimationGroup animation];</span><br><span class="line">    groupAnimation.animations = @[animation1, animation2];</span><br><span class="line">    groupAnimation.duration = 4.0;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //将动画应用到Layer层</span><br><span class="line">    [colorLayer addAnimation:groupAnimation forKey:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、过度动画<code>CATransition</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动画的开始与结束的快慢,有五个预置分别为(下同):</span><br><span class="line">kCAMediaTimingFunctionLinear 线性,即匀速</span><br><span class="line">kCAMediaTimingFunctionEaseIn 先慢后快</span><br><span class="line">kCAMediaTimingFunctionEaseOut 先快后慢</span><br><span class="line">kCAMediaTimingFunctionEaseInEaseOut 先慢后快再慢</span><br><span class="line">kCAMediaTimingFunctionDefault 实际效果是动画中间比较快.</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)transitionForView:(<span class="type">UIView</span>)view</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CATransition</span> <span class="operator">*</span>caTransition <span class="operator">=</span> [<span class="type">CATransition</span> animation];</span><br><span class="line">    caTransition.duration <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line">    caTransition.delegate <span class="operator">=</span> <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置运动速度  linear, easeIn, easeOut, easeInEaseOut, default</span></span><br><span class="line">    caTransition.timingFunction <span class="operator">=</span> [<span class="type">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];<span class="comment">//切换速度效果</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// kCATransitionFade, kCATransitionMoveIn kCATransitionPush, kCATransitionReveal</span></span><br><span class="line">    caTransition.type <span class="operator">=</span> kCATransitionReveal;<span class="comment">//动画切换风格</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//kCATransitionFromRight, kCATransitionFromLeft   kCATransitionFromTop, kCATransitionFromBottom</span></span><br><span class="line">    <span class="comment">//设置子类</span></span><br><span class="line">    caTransition.subtype <span class="operator">=</span> kCATransitionFromLeft;<span class="comment">//动画切换方向</span></span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.layer addAnimation:groupAnimation forKey:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Block</code>块实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">UIView</span> animateWithDuration:<span class="type">DURATION</span> animations:<span class="operator">^</span>&#123;</span><br><span class="line">        [<span class="type">UIView</span> setAnimationCurve:<span class="type">UIViewAnimationCurveEaseInOut</span>];</span><br><span class="line">        [<span class="type">UIView</span> setAnimationTransition:transition forView:view cache:<span class="type">YES</span>];</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><p>都有哪些<code>animationWithKeyPath</code>，如图</p><p><img src="https://github.com/Coneboy-k/KKCoreAnimation/blob/master/image/2.png?raw=true"></p><p>参考：<a href="https://www.objc.io/issues/12-animations/animations-explained/">https://www.objc.io/issues/12-animations/animations-explained/</a></p><p>​   <a href="http://www.apeth.com/iOSBook/ch17.html">http://www.apeth.com/iOSBook/ch17.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画,绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS绘图与动画系列 CAShapeLayer（三）</title>
      <link href="/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20CAShapeLayer%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20CAShapeLayer%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><code>CAShapeLayer</code>是一个通过矢量图形而不是bitmap来绘制的图层子类。你指定诸如颜色和线宽等属性，用<code>CGPath</code>来定义想要绘制的图形，最后<code>CAShapeLayer</code>就自动渲染出来了。当然，你也可以用Core Graphics直接向原始的<code>CALyer</code>的内容中绘制一个路径，相比直下，使用<code>CAShapeLayer</code>有<code>以下一些优点</code>：</p><ul><li><p>渲染快速。<code>CAShapeLayer</code>使用了<code>硬件加速</code>，绘制同一图形会比用Core Graphics快很多。</p></li><li><p>高效使用内存。一个<code>CAShapeLayer</code>不需要像普通<code>CALayer</code>一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。</p></li><li><p>不会被图层边界剪裁掉。一个<code>CAShapeLayer</code>可以在边界之外绘制。你的图层路径不会像在使用Core Graphics的普通<code>CALayer</code>一样被剪裁掉（如我们在第二章所见）。</p></li><li><p>不会出现像素化。当你给<code>CAShapeLayer</code>做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化。</p><p>来源：<a href="http://www.kancloud.cn/manual/ios/97790"><strong>ios核心动画高级技巧</strong></a></p></li></ul><p><strong>为什么优先选择CAShapeLayer绘图？</strong></p><blockquote><p>CoreGraphics不就可以绘制我们需要的图形，为什么还需要CAShapeLayer来绘图，这是由于UIView的drawRect是用的CoreGraphics框架,是由Cpu进行动画渲染,性能消耗大,而CAShapeLayer属于CoreAnimation框架,其实走的是Gpu动画渲染,使用硬件加速,节省性能，速度也快的多。</p></blockquote><p>基于CAShapeLayer以上优点，以及之前所说的UIBezierPath路径绘制的优势，结合2者用它来生成我们想要的各种图形是最合适不过了。</p><ol><li>CAShapeLayer是继承至CALayer,可以使用CALayer的所有属性。</li><li>CAShapeLayer有一个属性path，类型为CGPathRef，而UIBezierPath就是对CGPathRef类型的封装，因此，这两者配合起来使用才可以！</li></ol><p><strong>相关属性</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">path：不像大多数的动画属性，path不支持隐式动画。</span><br><span class="line">fillColor：填充path的颜色，或无填充。默认为不透明黑色。动画的。</span><br><span class="line">fillRule：填充path的规则。选项是非零和偶奇。默认为非零。</span><br><span class="line">      NSString <span class="emphasis">*const kCAFillRuleNoneZero;</span></span><br><span class="line"><span class="emphasis">      NSString *</span>const kCAFillRuleEvenOdd;</span><br><span class="line">lineCap：线端点类型</span><br><span class="line">      NSString <span class="emphasis">*const kCALineCapButt; //默认 顶格</span></span><br><span class="line"><span class="emphasis">      NSString *</span>const kCALineCapRound;//圆角</span><br><span class="line">      NSString <span class="emphasis">*const kCALineCapSquare;//方角</span></span><br><span class="line"><span class="emphasis">lineDashPattern：线性模版，这是一个NSNumber的数组，索引从1开始记，奇数位数值表示实线长度，偶数位数值表示空白长。</span></span><br><span class="line"><span class="emphasis">lineDashPhase：线型模版的起始位置。</span></span><br><span class="line"><span class="emphasis">lineJoin：线连接类型。</span></span><br><span class="line"><span class="emphasis">       NSString *</span>const kCALineJoinMiter;//默认 尖角</span><br><span class="line">       NSString <span class="emphasis">*const kCALineJoinRound;//圆滑</span></span><br><span class="line"><span class="emphasis">       NSString *</span>const kCALineJoinBevel;//切割平行</span><br><span class="line">lineWidth：线宽，用点表示单位。可动画。</span><br><span class="line">miterLimit：最大斜接长度。斜接长度指的是在两条线交汇处和外交之间的距离。只有lineJoin属性为kCALineJoinMiter时miterLimit才有效。边角的角度越小，斜接长度就会越大。为了避免斜接长度过长，我们可以使用miterLimit属性。如果斜接长度超过miterLimit的值，边角会以lineJoin的“bevel”即kCALineJoinBevel类型来显示。</span><br><span class="line"></span><br><span class="line">strokeColor：用来设置形状的线的颜色，可动画。如果设置为nil就表示没有颜色。</span><br><span class="line">strokeStart和strokeEnd：部分绘线。都是0.0～1.0的取值范围。经常被用来制作动画效果。</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/cuixiping/article/details/7848369">理解SVG的图形填充规则</a></p><p><strong>绘制步骤</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)drawRect:(<span class="type">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">// Drawing code</span></span><br><span class="line">    <span class="comment">//1、创建BezierPath对象（有类方法与实例方法，具体查看Api）</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>path <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithRect:<span class="type">CGRectMake</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、创建CAShapeLayer对象并设置相关属性</span></span><br><span class="line">    <span class="type">CAShapeLayer</span> <span class="operator">*</span>shapeLayer <span class="operator">=</span> [<span class="type">CAShapeLayer</span> layer];</span><br><span class="line">    shapeLayer.strokeColor <span class="operator">=</span> [<span class="type">UIColor</span> redColor].<span class="type">CGColor</span>;</span><br><span class="line">    shapeLayer.fillColor <span class="operator">=</span> [<span class="type">UIColor</span> clearColor].<span class="type">CGColor</span>;</span><br><span class="line">    shapeLayer.lineWidth <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    shapeLayer.lineJoin <span class="operator">=</span> kCALineJoinRound;</span><br><span class="line">    shapeLayer.lineCap <span class="operator">=</span> kCALineCapRound;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3、将贝塞尔路径UIBezierPath（OC）转换为C语言CGPathRef赋值给shapeLayer.path</span></span><br><span class="line">    shapeLayer.path <span class="operator">=</span> path.<span class="type">CGPath</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4、添加到相应layer层中显示</span></span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:shapeLayer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>画圆</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)drawRect:(<span class="type">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">//1、创建BezierPath对象</span></span><br><span class="line">       <span class="type">UIBezierPath</span>  <span class="operator">*</span>circleBezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithOvalInRect:<span class="type">CGRectMake</span>(<span class="number">50</span>, <span class="number">350</span>, <span class="number">100</span>, <span class="number">100</span>)];<span class="comment">//在区域内绘制椭圆曲线</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建CAShapeLayer对象并设置相关属性</span></span><br><span class="line">        <span class="type">CAShapeLayer</span>  <span class="operator">*</span>circleShapeLayer <span class="operator">=</span> [<span class="type">CAShapeLayer</span> layer];</span><br><span class="line">        [circleBezierPath setLineWidth:<span class="number">1</span>];</span><br><span class="line">        [circleShapeLayer setStrokeColor:[<span class="type">UIColor</span> redColor].<span class="type">CGColor</span>];</span><br><span class="line">        [circleShapeLayer setFillColor:[<span class="type">UIColor</span> blackColor].<span class="type">CGColor</span>];</span><br><span class="line">        [circleShapeLayer setBorderWidth:<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//3、将贝塞尔路径UIBezierPath（OC）转换为C语言CGPathRef赋值给shapeLayer.path</span></span><br><span class="line">        [circleShapeLayer setPath:circleBezierPath.<span class="type">CGPath</span>];</span><br><span class="line">        [<span class="keyword">self</span>.layer addSublayer:circleShapeLayer];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画,绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS绘图与动画系列 UIDynamicAnimator（五）</title>
      <link href="/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20UIDynamicAnimator%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20UIDynamicAnimator%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>iOS 7 中推出的UIKit Dynamics，主要带来了模拟现实的二维动画效果，用来创建逼真的物理动画。</p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/12/Fna6-VRKt81gIKaqC7GujwC4Zrfi469.png"></p><h2 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h2><ul><li><strong><code>UIDynamicAnimator</code></strong>封装了底层 iOS 物理引擎，为动力项（UIDynamicItem）提供物理相关的功能和动画。</li><li><strong><code>UIDynamicBehavior</code></strong>     动力行为，为动力项提供不同的物理行为</li><li><strong><code>UIDynamicItem</code></strong>              动力项，相当于现实世界中的一个基本物体</li></ul><p><code>UIDynamicAnimator</code>常用API</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIDynamicAnimator</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个 Reference view 创建一个 Dynamic Animator</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithReferenceView:(<span class="built_in">UIView</span> *)view;</span><br><span class="line"><span class="comment">// 添加动力行为</span></span><br><span class="line">- (<span class="type">void</span>)addBehavior:(<span class="built_in">UIDynamicBehavior</span> *)behavior;</span><br><span class="line"><span class="comment">// 删除指定的动力行为</span></span><br><span class="line">- (<span class="type">void</span>)removeBehavior:(<span class="built_in">UIDynamicBehavior</span> *)behavior;</span><br><span class="line"><span class="comment">// 删除所有的动力行为</span></span><br><span class="line">- (<span class="type">void</span>)removeAllBehaviors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关联view</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIView</span> *referenceView;</span><br><span class="line"><span class="comment">// 获取所有的 Behaviors</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">UIDynamicBehavior</span>*&gt; *behaviors;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取在 CGRect 内所有的动力项，这个 CGRect 是基于 Reference view 的二维坐标系统的</span></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="type">id</span>&lt;<span class="built_in">UIDynamicItem</span>&gt;&gt; *)itemsInRect:(<span class="built_in">CGRect</span>)rect;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果动力项不是通过 animator 自动计算改变状态，比如，通过代码强制改变一个 item 的 transfrom 时，可以用这个方法通知 animator 这个 item 的改变。如果不用这个方法，animator 之后的动画会覆盖代码中对 item 做的改变，相当于代码改变 transform 变得没有意义。</span></span><br><span class="line">- (<span class="type">void</span>)updateItemUsingCurrentState:(<span class="type">id</span> &lt;<span class="built_in">UIDynamicItem</span>&gt;)item;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否正在运行</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span> = isRunning) <span class="type">BOOL</span> running;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经运行了多久的时间</span></span><br><span class="line">- (<span class="built_in">NSTimeInterval</span>)elapsedTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delegate 中有两个回调方法，一个是在 animator 暂停的时候调用，一个是在将要恢复的时候调用</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="type">id</span> &lt;<span class="built_in">UIDynamicAnimatorDelegate</span>&gt; delegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>UIDynamicBehavior</code> 的主要方法和属性</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在将要进行动画时的 block 回调</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="type">void</span> (^action)(<span class="type">void</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到该动态行为中的子动态行为</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span> *childBehaviors</span><br><span class="line"></span><br><span class="line"><span class="comment">//  该动态行为相关联的dynamicAnimator</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIDynamicAnimator</span> *dynamicAnimator</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个子动态行为</span></span><br><span class="line">- (<span class="type">void</span>)addChildBehavior:(<span class="built_in">UIDynamicBehavior</span> *)behavior</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除一个子动态行为</span></span><br><span class="line">- (<span class="type">void</span>)removeChildBehavior:(<span class="built_in">UIDynamicBehavior</span> *)behavior</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当该动态行为将要被添加到一个UIDynamicAnimator中时，这个方法会被调用。</span></span><br><span class="line">- (<span class="type">void</span>)willMoveToAnimator:(<span class="built_in">UIDynamicAnimator</span> *)dynamicAnimator</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ZhipingYang/UIKitDynamics">https://github.com/ZhipingYang/UIKitDynamics</a></p><p><a href="https://github.com/xiaofei86/UIKitDynamics">https://github.com/xiaofei86/UIKitDynamics</a></p><p><a href="http://vit0.com/blog/2014/03/08/ios-7-uikit-dynamic-xue-xi-zong-jie/">http://vit0.com/blog/2014/03/08/ios-7-uikit-dynamic-xue-xi-zong-jie/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画,绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS绘图与动画系列 贝塞尔曲线UIBezierPath（二）</title>
      <link href="/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BFUIBezierPath%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2016/04/08/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BFUIBezierPath%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>UIBezierPath简介</strong></p><p>UIBezierPath类是Core Graphics框架关于path的一个封装。可以定义简单的形状，如椭圆或者矩形，或者有多个直线和曲线段组成的形状。</p><p><strong>为什么要用UIBezierPath绘图。。？</strong></p><p>上文主要介绍了C语言的绘图方式，如果使用上文所说的C语言方式绘图代码就比较多，使用<code>贝塞尔路径</code>来实现绘图，使用起来比较方便,易阅读 ,善于管理,不像上面那种阅读起来比较麻烦，相对于C语言的Core Graphics来说更为平易近人。它能够使用ARC,所以今后绘图建议使用BezierPath。</p><p><strong>矩形圆角设置</strong>（常用用于<code>UIIView</code>,<code>UIImageView</code>圆角设置）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="type">NS_OPTIONS</span>(<span class="type">NSUInteger</span>, <span class="type">UIRectCorner</span>) &#123;</span><br><span class="line">    <span class="type">UIRectCornerTopLeft</span>     <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">0</span>,<span class="comment">//左上角圆角</span></span><br><span class="line">    <span class="type">UIRectCornerTopRight</span>    <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">1</span>,<span class="comment">//右上角圆角</span></span><br><span class="line">    <span class="type">UIRectCornerBottomLeft</span>  <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span>,<span class="comment">//左下角圆角</span></span><br><span class="line">    <span class="type">UIRectCornerBottomRight</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">3</span>,<span class="comment">//右下角圆角</span></span><br><span class="line">    <span class="type">UIRectCornerAllCorners</span>  <span class="operator">=</span> <span class="operator">~</span>0UL <span class="comment">//全部圆角</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>UIBezierPath对象对象创建方法</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建基本路径</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPath;</span><br><span class="line"><span class="comment">// 创建矩形路径</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPathWithRect:(<span class="type">CGRect</span>)rect;</span><br><span class="line"><span class="comment">// 创建椭圆路径</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPathWithOvalInRect:(<span class="type">CGRect</span>)rect;</span><br><span class="line"><span class="comment">// 创建圆角矩形</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPathWithRoundedRect:(<span class="type">CGRect</span>)rect cornerRadius:(<span class="type">CGFloat</span>)cornerRadius; <span class="comment">// rounds all corners with the same horizontal and vertical radius</span></span><br><span class="line"><span class="comment">// 创建指定位置圆角的矩形路径</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPathWithRoundedRect:(<span class="type">CGRect</span>)rect byRoundingCorners:(<span class="type">UIRectCorner</span>)corners cornerRadii:(<span class="type">CGSize</span>)cornerRadii;</span><br><span class="line"><span class="comment">// 创建弧线路径</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPathWithArcCenter:(<span class="type">CGPoint</span>)center radius:(<span class="type">CGFloat</span>)radius startAngle:(<span class="type">CGFloat</span>)startAngle endAngle:(<span class="type">CGFloat</span>)endAngle clockwise:(<span class="type">BOOL</span>)clockwise;</span><br><span class="line"><span class="comment">// 通过CGPath创建</span></span><br><span class="line"><span class="operator">+</span> (instancetype)bezierPathWithCGPath:(<span class="type">CGPathRef</span>)<span class="type">CGPath</span>;</span><br></pre></td></tr></table></figure><p><strong>相关属性</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与之对应的CGPath</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">CGPathRef</span> <span class="type">CGPath</span>;</span><br><span class="line"><span class="operator">-</span> (<span class="type">CGPathRef</span>)<span class="type">CGPath</span> <span class="type">NS_RETURNS_INNER_POINTER</span> <span class="type">CF_RETURNS_NOT_RETAINED</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空，该值指示路径是否有任何有效的元素。</span></span><br><span class="line"><span class="meta">@property</span>(readonly,getter<span class="operator">=</span>isEmpty) <span class="type">BOOL</span> empty;</span><br><span class="line"><span class="comment">// 整个路径相对于原点的位置及宽高</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic,readonly) <span class="type">CGRect</span> bounds;图形路径中的当前点</span><br><span class="line"><span class="comment">// 图形路径中的当前位置</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic,readonly) <span class="type">CGPoint</span> currentPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线宽</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">CGFloat</span> lineWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终点连接类型</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">CGLineCap</span> lineCapStyle;</span><br><span class="line">typedef <span class="type">CF_ENUM</span>(int32_t, <span class="type">CGLineCap</span>) &#123;</span><br><span class="line">    kCGLineCapButt,<span class="comment">//斜角连接</span></span><br><span class="line">    kCGLineCapRound,<span class="comment">//圆滑衔接</span></span><br><span class="line">    kCGLineCapSquare<span class="comment">//斜角连接</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交叉点的类型</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">CGLineJoin</span> lineJoinStyle;</span><br><span class="line">typedef <span class="type">CF_ENUM</span>(int32_t, <span class="type">CGLineJoin</span>) &#123;</span><br><span class="line">    kCGLineJoinMiter,</span><br><span class="line">    kCGLineJoinRound,</span><br><span class="line">    kCGLineJoinBevel</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两条线交汇处内角和外角之间的最大距离,需要交叉点类型为kCGLineJoinMiter是生效，最大限制为10,这个限制值有助于避免在连接线段志坚的尖峰</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">CGFloat</span> miterLimit;</span><br><span class="line"><span class="comment">// 个人理解为绘线的精细程度，默认为0.6，数值越大，需要处理的时间越长</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">CGFloat</span> flatness;</span><br><span class="line"><span class="comment">// 决定使用even-odd或者non-zero规则</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic) <span class="type">BOOL</span> usesEvenOddFillRule;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置画笔起始点</span></span><br><span class="line"><span class="operator">-</span> (void)moveToPoint:(<span class="type">CGPoint</span>)point;</span><br><span class="line"><span class="comment">//从当前点到指定点绘制直线</span></span><br><span class="line"><span class="operator">-</span> (void)addLineToPoint:(<span class="type">CGPoint</span>)point;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 添加贝塞尔曲线</span></span><br><span class="line"><span class="comment">//endPoint终点 controlPoint1、controlPoint2控制点</span></span><br><span class="line"><span class="operator">-</span> (void)addCurveToPoint:(<span class="type">CGPoint</span>)endPoint controlPoint1:(<span class="type">CGPoint</span>)controlPoint1 controlPoint2:(<span class="type">CGPoint</span>)controlPoint2;</span><br><span class="line"><span class="comment">//endPoint终点 controlPoint控制点</span></span><br><span class="line"><span class="operator">-</span> (void)addQuadCurveToPoint:(<span class="type">CGPoint</span>)endPoint controlPoint:(<span class="type">CGPoint</span>)controlPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 添加弧线</span></span><br><span class="line"><span class="comment">// center弧线圆心坐标 radius弧线半径 startAngle弧线起始角度 endAngle弧线结束角度 clockwise是否顺时针绘制</span></span><br><span class="line"><span class="operator">-</span> (void)addArcWithCenter:(<span class="type">CGPoint</span>)center radius:(<span class="type">CGFloat</span>)radius startAngle:(<span class="type">CGFloat</span>)startAngle endAngle:(<span class="type">CGFloat</span>)endAngle clockwise:(<span class="type">BOOL</span>)clockwise <span class="type">NS_AVAILABLE_IOS</span>(<span class="number">4_0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//闭合路径，封闭未形成闭环的路径</span></span><br><span class="line"><span class="operator">-</span> (void)closePath;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除所有的点，删除所有的subPath</span></span><br><span class="line"><span class="operator">-</span> (void)removeAllPoints;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加bezierPath路径</span></span><br><span class="line"><span class="operator">-</span> (void)appendPath:(<span class="type">UIBezierPath</span> <span class="operator">*</span>)bezierPath;</span><br><span class="line"><span class="comment">// 创建并返回一个新的反转内容的当前路径曲线路径的对象。</span></span><br><span class="line"><span class="operator">-</span> (<span class="type">UIBezierPath</span> <span class="operator">*</span>)bezierPathByReversingPath <span class="type">NS_AVAILABLE_IOS</span>(<span class="number">6_0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用指定的仿射变换矩阵变换路径的所有点</span></span><br><span class="line"><span class="operator">-</span> (void)applyTransform:(<span class="type">CGAffineTransform</span>)transform;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)fill;<span class="comment">//填充</span></span><br><span class="line"><span class="operator">-</span> (void)stroke;<span class="comment">//路径绘制</span></span><br><span class="line"><span class="operator">-</span> (void)addClip;<span class="comment">//在这以后的图形绘制超出当前路径范围则不可见</span></span><br></pre></td></tr></table></figure><p><strong>画图示例代码</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 直线</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect2:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 设置线两头样式</span></span><br><span class="line">    bezierPath.lineCapStyle <span class="operator">=</span> kCGLineCapRound;</span><br><span class="line">    <span class="comment">// 设置起点、终点坐标</span></span><br><span class="line">    [bezierPath moveToPoint:<span class="type">CGPointMake</span>(<span class="number">10</span>, <span class="number">10</span>)];</span><br><span class="line">    [bezierPath addLineToPoint:<span class="type">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 二阶曲线</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect3:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 设置线两头样式</span></span><br><span class="line">    bezierPath.lineCapStyle <span class="operator">=</span> kCGLineCapRound;</span><br><span class="line">    <span class="comment">// 设置起点、终点坐标</span></span><br><span class="line">    [bezierPath moveToPoint:<span class="type">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    [bezierPath addQuadCurveToPoint:<span class="type">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>) controlPoint:<span class="type">CGPointMake</span>(<span class="number">300</span>, <span class="number">0</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 三阶曲线</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect4:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 设置线两头样式</span></span><br><span class="line">    bezierPath.lineCapStyle <span class="operator">=</span> kCGLineCapRound;</span><br><span class="line">    <span class="comment">// 设置起点、终点坐标</span></span><br><span class="line">    [bezierPath moveToPoint:<span class="type">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    [bezierPath addCurveToPoint:<span class="type">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>) controlPoint1:<span class="type">CGPointMake</span>(<span class="number">150</span>, <span class="number">0</span>) controlPoint2:<span class="type">CGPointMake</span>(<span class="number">150</span>, <span class="number">300</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 多阶曲线</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect5:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 设置线两头样式</span></span><br><span class="line">    bezierPath.lineCapStyle <span class="operator">=</span> kCGLineCapRound;</span><br><span class="line">    <span class="comment">// 设置起点、终点坐标</span></span><br><span class="line">    [bezierPath moveToPoint:<span class="type">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    [bezierPath addCurveToPoint:<span class="type">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">                  controlPoint1:<span class="type">CGPointMake</span>(<span class="number">150</span>, <span class="number">0</span>)</span><br><span class="line">                  controlPoint2:<span class="type">CGPointMake</span>(<span class="number">150</span>, <span class="number">300</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二条贝塞尔曲线</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath2 <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 设置起点、终点坐标</span></span><br><span class="line">    [bezierPath2 moveToPoint:<span class="type">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>)];</span><br><span class="line">    [bezierPath2 addCurveToPoint:<span class="type">CGPointMake</span>(<span class="number">290</span>, <span class="number">290</span>)</span><br><span class="line">                   controlPoint1:<span class="type">CGPointMake</span>(<span class="number">250</span>, <span class="number">0</span>)</span><br><span class="line">                   controlPoint2:<span class="type">CGPointMake</span>(<span class="number">250</span>, <span class="number">300</span>)];</span><br><span class="line">    <span class="comment">// 将第二条线，加到第一条线上面去</span></span><br><span class="line">    [bezierPath appendPath:bezierPath2];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark<span class="operator">---</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 画矩形</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect10:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象，此对象用于绘制矩形，需要传入绘制的矩形的Frame</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithRect:<span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">280</span>, <span class="number">280</span>)];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 设置线两头样式</span></span><br><span class="line">    bezierPath.lineCapStyle <span class="operator">=</span> kCGLineCapRound;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 2:画矩形，圆角矩形</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect11:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象，此对象用于绘制一个圆角矩形</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithRoundedRect:<span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">280</span>, <span class="number">280</span>)</span><br><span class="line">                                                          cornerRadius:<span class="number">30</span>];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  rect: 需要画的矩形的Frame</span></span><br><span class="line"><span class="comment"> *  corners: 哪些部位需要画成圆角</span></span><br><span class="line"><span class="comment"> *  cornerRadii: 圆角的Size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 画矩形，部分圆角的矩形</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect12:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象，此对象用于绘制一个部分圆角的矩形，左上、右下</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithRoundedRect:<span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">280</span>, <span class="number">280</span>)</span><br><span class="line">                                                     byRoundingCorners:<span class="type">UIRectCornerTopLeft</span> <span class="operator">|</span> <span class="type">UIRectCornerBottomRight</span></span><br><span class="line">                                                           cornerRadii:<span class="type">CGSizeMake</span>(<span class="number">10</span>, <span class="number">10</span>)];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 画圆</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect13:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象，此对象用于绘制内切圆，需要传入绘制内切圆的矩形的Frame</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithOvalInRect:<span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">280</span>, <span class="number">280</span>)];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 设置线两头样式</span></span><br><span class="line">    bezierPath.lineCapStyle <span class="operator">=</span> kCGLineCapRound;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  center: 圆心坐标</span></span><br><span class="line"><span class="comment"> *  radius: 圆的半径</span></span><br><span class="line"><span class="comment"> *  startAngle: 绘制起始点角度</span></span><br><span class="line"><span class="comment"> *  endAngle: 绘制终点角度</span></span><br><span class="line"><span class="comment"> *  clockwise: 是否顺时针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 圆弧</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect14:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置线的填充色</span></span><br><span class="line">    [[<span class="type">UIColor</span> redColor] setStroke];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个bezier对象，此对象用于绘制一个圆弧</span></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>bezierPath <span class="operator">=</span> [<span class="type">UIBezierPath</span> bezierPathWithArcCenter:<span class="type">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line">                                                              radius:<span class="number">110</span></span><br><span class="line">                                                          startAngle:<span class="number">0</span></span><br><span class="line">                                                            endAngle:<span class="type">M_PI_2</span></span><br><span class="line">                                                           clockwise:<span class="type">NO</span>];</span><br><span class="line">    <span class="comment">// 设置线宽度</span></span><br><span class="line">    bezierPath.lineWidth <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>工具推荐</code></strong></p><p><a href="https://github.com/YouXianMing/Tween-o-Matic-CN">https://github.com/YouXianMing/Tween-o-Matic-CN</a>这是个自定义贝塞尔曲线值的mac工具</p><p>由于图像绘制代码一般较多，下面这些工具可以 简单快速生成绘制代码，实时查看效果，简单高效，生成的代码也很规范。</p><p>1、<code>paintCode</code></p><blockquote><p>PaintCode是由来自斯洛伐克首都伯拉第斯拉瓦的<a href="http://www.pixelcut.com/"><strong>PixelCut</strong></a>软件公司推出的，一款面向iOS和Mac应用开发者及设计师的矢量图形可视化开发工具。通过PaintCode，即使是没有编程经验的设计师也能绘制出精美的控件、图标及其他UI元素。而PaintCode最为显著的一点就是能够直接生成适用于iOS的objectivec或Swift的代码，节省了大量的编程时间，也正因如此，许多开发者将其称为设计与开发通吃的代码神器。</p></blockquote><p>2、<code>QuartzCode</code></p><p>官网：<a href="http://www.quartzcodeapp.com/">http://www.quartzcodeapp.com/</a></p><blockquote><p>QuartzCode 是一个快速的、 轻量级的、 强大的动画工具，转换矢量绘图和动画到Object C 和 Swift 代码。我们只需更改属性 ，还可以可以循环在几秒钟内，实时看到动画的变化。减少了在 Xcode 创建动画的障碍 ！</p></blockquote><p>3、<code>Sketch</code>   矢量图设计工具</p><p><a href="http://www.sketchcn.com/">http://www.sketchcn.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画,绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 快捷键</title>
      <link href="/2016/04/07/Mac%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2016/04/07/Mac%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Mac-快捷键"><a href="#Mac-快捷键" class="headerlink" title="Mac 快捷键"></a><code>Mac 快捷键</code></h3><p><strong>快捷键提醒神器</strong><a href="http://www.ifunmac.com/2014/04/cheatsheet/">CheatSheet</a></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/07/FpDHxuwtw8QnyFiiXnVcrh-KGx0x126.jpg" alt="Mac 键盘"></p><p><strong>截图</strong></p><p><code>Shift+Command+3</code>     截取全屏幕至桌面<br><code>Shift+Command+4</code>     截取部分屏幕至桌面<br><code>Shift+Command+4+空格</code>   截取窗口或原件至桌面<br><code>Shift+Command+4 然后Esc</code>  退出截屏<br><code>Shift+Command+Control+3</code>  截取全屏幕至剪贴板<br><code>Shift+Command+Control+4</code>  截取部分屏幕至剪贴板</p><p><code>Shift+Command+Control+4+空格</code> 截取窗口或原件至剪贴板<br><code>Shift+Command+4 拉出选框</code> 然后 <code>空格</code> 移动选框<br><code>Shift+Command+4</code> 然后 <code>Shift</code> 保持选框高度（宽度），修改宽度（高度）<br><code>Shift+Command+4</code> 然后 <code>Option</code> 保持选框中心，修改半径</p><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a><code>Chrome</code></h2><ol><li><strong>Command + l 焦点移动到地址栏</strong></li><li><strong>Shift + Option + Delete&#x2F;Left</strong> 向左删除&#x2F;选中一个单词（可以自定义为 <code>Ctrl-w</code>）</li><li><code>Command + y</code> 搜索历史</li><li><strong>Command + 数字 快速切换 tab</strong></li><li><code>Command + shift + []</code> 左右切换 tab</li><li><code>Command + t/w</code> 新建&#x2F;关闭 tab</li><li><code>Command + e/g</code> 搜索选中，前往下一个，或者用<code>Command + f</code> 和回车。</li></ol><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><code>iTerm2</code></h2><ol><li><strong>Ctrl w 删除前一个单词</strong></li><li><code>Command + r</code> 清除屏幕上的内容</li><li><code>Command + t/w</code> 打开&#x2F;关闭 tab</li><li><strong>Command + 数字 切换到第 n 个 tab</strong></li><li><code>双击</code> 选中一个单词，自动复制</li></ol><p>iTerm 可以通过 <code>Command + shift + []</code> 来左右切换 tab，也可以通过 <code>Command + Left/Right</code> 切换</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a><code>Xcode</code></h3><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/07/FsXFpoUh7K1hPA4NzIo9sYXQMxPK864.jpg" alt="Xcode快捷键"></p><h3 id="一、编码快捷键"><a href="#一、编码快捷键" class="headerlink" title="一、编码快捷键"></a>一、编码快捷键</h3><h4 id="1-上下左右-移动选中代码"><a href="#1-上下左右-移动选中代码" class="headerlink" title="1. 上下左右 移动选中代码"></a>1. 上下左右 移动选中代码</h4><ul><li>代码上移：option + command +[ ;</li><li>代码下移：option + command +] ;</li><li>代码左缩进 <strong>command + [</strong></li><li>代码右缩进 <strong>command + ]</strong></li><li>自动排版代码：Xcode默认的是 Control + shift + , 但是为了方便，我推荐重新自定义设置为<strong>Command + &#x3D;</strong></li></ul><h4 id="2-光标相关操作"><a href="#2-光标相关操作" class="headerlink" title="2.光标相关操作"></a>2.光标相关操作</h4><ul><li><p><code>Command + &lt;</code>     光标跳到行</p><ul><li><code>Command + &gt;</code>光标跳到行尾</li></ul></li><li><p><strong><code>Command + 上方向键</code></strong> 光标跳到页面顶部，推荐</p></li><li><p><code>Command + 下方向键</code>      光标跳到页面底部，推荐</p></li><li><p><strong>Option + &lt;—</strong> 光标回退到左边一个词组前，推荐</p></li><li><p><strong>Option + —&gt;</strong> 光标回退右边一个词组尾，推荐</p></li><li><p><strong>Option + 上方向键</strong> 光标移到上一行最前面，推荐</p></li><li><p><strong>Option + 下方向键</strong> 光标移到下一行最后面，推荐</p></li></ul><p>Ctrl + A (Ahead),  光标跳到行首</p><p>Ctrl + E (End),      光标跳到行尾</p><p><strong>Ctrl + B (Back)</strong>, 光标回退一个字符</p><p><strong>Ctrl + F (Forward)</strong>,  光标前进一个字符</p><p><strong>Ctrl + N (Next)</strong>,  光标跳到下一行</p><p><strong>Ctrl + P (Previous)</strong>,  光标跳到上一行</p><p>Ctrl + D (), 删除光标右边的一个字符</p><p>Ctrl + H (), 删除光标左边的一个字符</p><p>Ctrl + K (Kill), 删除光标后面所有内容</p><h4 id="3-一次性修改一个-Scope-里的变量名："><a href="#3-一次性修改一个-Scope-里的变量名：" class="headerlink" title="3. 一次性修改一个 Scope 里的变量名："></a>3. 一次性修改一个 Scope 里的变量名：</h4><p>点击该变量，出现下划虚线，然后 <strong>command + control + E</strong> 激活所有相同变量，然后进行修改。</p><h4 id="4-快捷搜索："><a href="#4-快捷搜索：" class="headerlink" title="4. 快捷搜索："></a>4. 快捷搜索：</h4><p>先点亮想要搜索的词，然后** Command + E <strong>将该次放入剪贴板，然后使用</strong> Command + G <strong>来向下遍历该词，</strong>Shift + Command + G** 向上遍历。</p><p>打开’Show Related Items弹出菜单：Control + 1</p><p><strong>常用快捷键</strong></p><ul><li>项目之间切换 cmd+~</li><li>.h和.m之间切换 ctrl+cmd+ ↑ or ↓</li><li>定位类文件 cmd+shift+J</li><li>类文件查找 cmd+shift+O</li><li>方法调用者查看 ctrl+1</li><li>类结构预览 ctrl+2</li></ul>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS ViewController生命周期</title>
      <link href="/2016/04/07/iOS%20ViewController%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2016/04/07/iOS%20ViewController%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="ViewController的生命周期"><a href="#ViewController的生命周期" class="headerlink" title="ViewController的生命周期"></a>ViewController的生命周期</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类的加载方法</span></span><br><span class="line"><span class="comment">// 是加载类的时候调用。也就是说，iOS应用启动时会加载所有的类，所有的类就都会调一次这个方法。</span></span><br><span class="line"><span class="comment">// 一个类的 `+load` 方法是在其父类的 `+load` 方法调用后再调用</span></span><br><span class="line"><span class="comment">// 一个`Category`的 `+load` 方法在被其扩展的类调完自有 `+load` 方法后才会调用</span></span><br><span class="line">+ (<span class="type">void</span>)load;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类的初始化方法</span></span><br><span class="line"><span class="comment">// 当某个类调用 alloc 方法时，将为实例在堆上分配空间时，调用一次initialize方法</span></span><br><span class="line"><span class="comment">// 而且该方法只调用一次，也就是说再次 alloc 操作的时候，不会再调用 initialize 这个方法了。</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)initialize;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更多：<a href="//http://blog.leichunfeng.com/blog/2015/05/02/objectivec-plus-load-vs-plus-initialize/">objectivec +load vs +initialize</a></p><p><strong>视图控制器push显示：</strong>(执行顺序依次从上往下)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 对象的初始化方法</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载视图</span></span><br><span class="line">- (<span class="type">void</span>)loadView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图加载完毕时调用</span></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图将要显示的时候调用</span></span><br><span class="line">- (<span class="type">void</span>)viewWillAppear:(<span class="type">BOOL</span>)animated;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图中的子视图将要布局时调用</span></span><br><span class="line">- (<span class="type">void</span>)viewWillLayoutSubviews;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图中的子视图布局完毕时调用</span></span><br><span class="line">- (<span class="type">void</span>)viewDidLayoutSubviews;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图显示完毕的时候调用</span></span><br><span class="line">- (<span class="type">void</span>)viewDidAppear:(<span class="type">BOOL</span>)animated;</span><br></pre></td></tr></table></figure><p><strong>视图控制器pop消失</strong>：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 视图将要消失</span></span><br><span class="line">-(<span class="type">void</span>)viewWillDisappear:(<span class="type">BOOL</span>)animated;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图已经消失</span></span><br><span class="line">-(<span class="type">void</span>)viewDidDisappear:(<span class="type">BOOL</span>)animated;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象被释放前调用</span></span><br><span class="line">-(<span class="type">void</span>)dealloc;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alloc -&gt; initWithNibName -&gt; loadView -&gt; viewDidLoad -&gt; viewWillAppear -&gt; viewDidAppear -&gt; viewWillDisappear -&gt; viewDidDisappear -&gt; dealloc</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li><p>1、<code>viewWillAppear</code></p><blockquote><p>其实在viewWillAppear这里改变UI元素不是很可靠，Autolayout发生在viewWillAppear之后，严格来说这里通常不做视图位置的修改，而用来更新Form数据。改变位置可以放在viewWilllayoutSubview或者didLayoutSubview里，而且在viewDidLayoutSubview确定UI位置关系之后设置autoLayout比较稳妥。另外，viewWillAppear在每次页面即将显示都会调用，viewWillLayoutSubviews虽然在lifeCycle里调用顺序在viewWillAppear之后，但是只有在页面元素需要调整时才会调用，避免了Constraints的重复添加。</p></blockquote></li></ul><p>引用：<a href="http://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html">iOS应用架构谈 view层的组织和调用方案</a></p><ul><li>2、<code>initWithNibName:bundle:</code></li></ul><blockquote><p>1）在这个函数中应该只有相关数据的初始化，而且这些数据都是比较关键的数据，不要出现创建view的代码，也不要调<code>self.view</code>（<code>viewDidLoad</code>中view才加载到内存中），否则会导致ViewController创建view;View的创建留给后面的方法。</p><p>2）如果你是用 xib 创建 view 并初始化 ViewController，意味着你要使用 <code>initWithNibName:bundle:</code> 方法</p></blockquote><ul><li>3.<code>loadView</code></li></ul><blockquote><p>1）添加subView应该在viewDidLoad里去做，此时不要实现自己的loadView</p><p>2）如果重写，一定要首先调用[super loadView],否则会循环调用loadView方法。调用[super loadView]一系列操作也会影响CPU性能，所以可以直接手动创建self.view &#x3D; [[UIView alloc] initWithFrame:[UIScreen mainScreen].applicationFrame];<br>原因：loadView,其实是lazy load的,就是懒加载，每次访问UIViewController的view(比如controller.view、self.view)而且view为nil，loadView方法就会被调用。<br>[super loadView] 方法会加载xib文件来创建UIViewController的view,如果没有xib则创建一个空白的View<code>self.view = [[UIView alloc] initWithFrame:[UIScreen mainScreen].applicationFrame]</code>;<br>如果你重写了这个方法,那么系统就会调用loadView,调用完后,再自动调用ViewDidLoad函数.这时就有可能造成死循环,所以非常不建议重写loadView方法。<br>当然在视图内存紧张情况，可适当考虑此方法，但经常出现内存警告时更应当从内存优化入手<br>3) 如果你是用 xib 创建 view 并初始化 ViewController，意味着你要使用 initWithNibName:bundle: 方法，则不要覆盖 loadView 方法。</p></blockquote><p><code>viewDidLoad</code></p><p>由于view已经加载到内存中，所以<code>self.view !=nil</code>，我们可以随心所欲的添加<code>addSubview</code>,或者填充数据;</p><p><code>-(void)viewWillAppear:(BOOL)animated</code>与<code>-(void)viewDidAppear:(BOOL)animated</code></p><p>适合KVO的添加与移除等操作,切换前后台不会调用viewWillAppear.</p><h6 id="viewWillLayoutSubviews调用情况分析"><a href="#viewWillLayoutSubviews调用情况分析" class="headerlink" title="viewWillLayoutSubviews调用情况分析"></a><code>viewWillLayoutSubviews</code>调用情况分析</h6><ul><li>init初始化不会触发layoutSubviews</li><li>addSubview会触发layoutSubviews</li><li>设置view的Frame会触发layoutSubviews，当然前提是frame的值设置前后发生了变化</li><li>滚动一个UIScrollView会触发layoutSubviews</li><li>旋转Screen会触发父UIView上的layoutSubviews事件</li><li>改变一个UIView大小的时候也会触发父UIView上的layoutSubviews事件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS绘图与动画系列 Core Graphics与Quartz 2D（一）</title>
      <link href="/2016/04/06/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20Core%20Graphics%E4%B8%8EQuartz%202D%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2016/04/06/iOS%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%20Core%20Graphics%E4%B8%8EQuartz%202D%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>iOS绘图Core Graphics与Quartz 2D</p><p><strong>Quartz Core, Core Graphics and Quartz 2D之间的区别</strong><br><a href="http://stackoverflow.com/questions/1877987/whats-the-difference-between-quartz-core-core-graphics-and-quartz-2d">StackFlow</a></p><h3 id="Quartz-frameworks-及其-APIs"><a href="#Quartz-frameworks-及其-APIs" class="headerlink" title="Quartz frameworks 及其 APIs"></a>Quartz frameworks 及其 APIs</h3><p><code>CoreGraphics.framework</code></p><p><code>Core Graphics</code>是一套C语言 API框架， 支持向量图形，线、形状、图案、路径、剃度、位图图像和pdf 内容的绘制。我们平时常见的各种UIKit框架提供的UI控件，实际上都是由Core Graphics进行绘制的。</p><ul><li><p><a href="https://developer.apple.com/library/mac/#documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066">Quartz 2D</a> 指一组二维绘图与渲染的 API。它是Core Graphics框架的一部分， CoreGraphics 有时候也被成为 Quartz 2D。因此我们一般都是用CGxxxx命名的函数进行绘图。</p><p><strong>Quartz 2D支持功能</strong>：Quartz是资源和设备无关的,提供基本路径绘制，剃度填充图案，图像，透明绘制和透明层、遮蔽和阴影、颜色管理，坐标转换，字体、offscreen呈现、pdf文档创建、显示和分析等功能。</p><p>具体可实现功能如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">绘制图形:线条、三角形、矩形、圆、弧等</span><br><span class="line">绘制文字</span><br><span class="line">绘制\生成图片(图像)</span><br><span class="line">读取\生成PDF</span><br><span class="line">截图\裁剪图片</span><br><span class="line">自定义UI控件 (iOS中大部分控件的内容都是通过Quartz2D画出来的)</span><br></pre></td></tr></table></figure><p>官方Demo:<a href="http://developer.apple.com/library/ios/samplecode/QuartzDemo/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007531">example code</a>。</p><p>​</p></li></ul><p><code>QuartzCore.framework</code></p><ul><li><p><a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/Animation_Overview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004952">Core Animation</a>: objectivec API 做二维动画。.</p></li><li><p><a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_intro/ci_intro.html#//apple_ref/doc/uid/TP30001185">Core Image</a>: 图像和视频处理（滤镜，扭曲，转换）。iOS 5</p><p>​</p><p><strong>下面列出了Quartz 2D包含的数据类型</strong>：</p></li><li><p>CGPathRef：用于向量图，可创建路径，并进行填充或描画(stroke)</p></li><li><p>CGImageRef：用于表示bitmap图像和基于采样数据的bitmap图像遮罩。</p></li><li><p>CGLayerRef：用于表示可用于重复绘制(如背景)和幕后(offscreen)绘制的绘画层</p></li><li><p>CGPatternRef：用于重绘图</p></li><li><p>CGShadingRef、CGGradientRef：用于绘制渐变</p></li><li><p>CGFunctionRef：用于定义回调函数，该函数包含一个随机的浮点值参数。当为阴影创建渐变时使用该类型</p></li><li><p>CGColorRef, CGColorSpaceRef：用于告诉Quartz如何解释颜色</p></li><li><p>CGImageSourceRef,CGImageDestinationRef：用于在Quartz中移入移出数据</p></li><li><p>CGFontRef：用于绘制文本</p></li><li><p>CGPDFDictionaryRef, CGPDFObjectRef, CGPDFPageRef, CGPDFStream, CGPDFStringRef, and CGPDFArrayRef：用于访问PDF的元数据</p></li><li><p>CGPDFScannerRef, CGPDFContentStreamRef：用于解析PDF元数据</p></li><li><p>CGPSConverterRef：用于将PostScript转化成PDF。在iOS中不能使用。</p><p>​</p></li></ul><p><strong>绘图创建步骤（重写drawRect函数）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、我们首先需要开启图形上下文`CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class="line">   //为C语言，创建对象无需加*`。</span><br><span class="line">2、然后对我们想绘制的图片或者图形进行一系列的操作（添加路径，设置属性等）。</span><br><span class="line">3、最后就是渲染在我的View上面。</span><br></pre></td></tr></table></figure><h5 id="图像的重绘（刷帧）"><a href="#图像的重绘（刷帧）" class="headerlink" title="图像的重绘（刷帧）"></a>图像的重绘（刷帧）</h5><p>调用重绘view对象的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)setNeedsDisplay; 刷新全部view</span><br><span class="line">- (void)setNeedsDisplayInRect:(CGRect)rect; 刷新区域为rect的view</span><br></pre></td></tr></table></figure><h4 id="drawRect方法使用注意点"><a href="#drawRect方法使用注意点" class="headerlink" title="drawRect方法使用注意点"></a>drawRect方法使用注意点</h4><ul><li>在iOS开发中不允许开发者直接调用<code>drawRect:</code>方法，刷新绘制内容需要调用<code>setNeedsDisplay</code>方法。</li><li>若使用CALayer绘图，只能在drawInContext: 中（类似于drawRect）绘制，或者在delegate中的相应方法绘制。同样也是调用setNeedDisplay等间接调用以上方法</li><li>若要实时画图，不能使用gestureRecognizer，只能使用touchbegan等方法来调用setNeedsDisplay实时刷新屏幕</li><li>凡是“UI”开头的相关绘图函数，都是UIKit对<code>Core Graphics</code>的封装</li></ul><h3 id="画图事例"><a href="#画图事例" class="headerlink" title="画图事例"></a>画图事例</h3><p><strong>常用属性</strong></p><blockquote><p> 设置线段的宽度          <code>CGContextSetLineWidth</code><br> 设置线段颜色      <code>CGContextSetRGBStrokeColor</code><br> 设置起点和终点样式（圆角，直角等）       <code>CGContextSetLineCap</code><br> 设置连接点样式（圆角，尖角等）  <code>CGContextSetLineJoin</code><br> 设置竖线   <code>CGContextSetLineDash</code><br> 填充颜色（实心）          <code>CGContextSetRGBFillColor</code> <code>[[UIColor redColor]setFill]</code></p><p> <strong>画虚线的参数</strong>：<br> phase：相位，虚线的起始位置＝通常使用 0 即可，从头开始画虚线<br> lengths:长度的数组<br> count ： lengths 数组的个数<br> CGFloat lengths[2] &#x3D; {20.0,10.0};<br> CGContextSetLineDash(context, 0, lengths, 3);</p></blockquote><p><strong>主要渲染填充模式CGPathDrawingMode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kCGPathStroke:画线（空心），只有边框</span><br><span class="line">kCGPathFill:  填充（实心），只有填充（非零缠绕数填充），不绘制边框</span><br><span class="line">kCGPathEOFill:奇偶规则填充（多条路径交叉时，奇数交叉填充，偶交叉不填充）</span><br><span class="line">kCGPathFillStroke：既有边框又有填充</span><br><span class="line">kCGPathEOFillStroke：奇偶填充并绘制边框</span><br></pre></td></tr></table></figure><p><strong>官方Demo演示图</strong><br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/07/Ftet5exO40m3uAl3Got9CG8FiCVE193.gif"></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/07/Fs-Y6ZgkBaF0h9SCnlsJ3zwWdZ0E193.gif"></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/07/FttRA8-Ss-ClMWZANxz-QOBIdTqo193.gif"></p><p><strong>渲染方式写法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. CGContextDrawPath(context, kCGPathStroke);</span><br><span class="line">2. CGContextStrokePath(ctx);</span><br></pre></td></tr></table></figure><p><strong>主要画图Api</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">直线</span><br><span class="line">CGContextAddLineToPoint</span><br><span class="line">椭圆</span><br><span class="line">CGContextAddEllipseInRect</span><br><span class="line">矩形</span><br><span class="line">CGContextAddRect</span><br><span class="line">圆</span><br><span class="line">CGContextAddArc</span><br></pre></td></tr></table></figure><p><strong>下面所列举C语言和OC画图方式，OC绘图方式为UIBezierPath</strong></p><ul><li>方式一:C语言的方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawRect:(CGRect)rect</span><br><span class="line"> &#123;</span><br><span class="line">     CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class="line">     CGContextMoveToPoint(ctx,50, 50);</span><br><span class="line">     CGContextAddLineToPoint(ctx, 110, 120);</span><br><span class="line">     CGContextAddLineToPoint(ctx, 150, 40);</span><br><span class="line">     CGContextSetLineWidth(ctx, 10);</span><br><span class="line">     CGContextStrokePath(ctx);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>方式二:C语言的方式之path</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)drawRect:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取路径</span></span><br><span class="line">    <span class="type">CGMutablePathRef</span> path <span class="operator">=</span> <span class="type">CGPathCreateMutable</span>();</span><br><span class="line">    <span class="type">CGPathMoveToPoint</span>(path, <span class="type">NULL</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="type">CGPathAddLineToPoint</span>(path, <span class="type">NULL</span>, <span class="number">110</span>, <span class="number">120</span>);</span><br><span class="line">    <span class="comment">// 将路径添加到上下文中</span></span><br><span class="line">    <span class="type">CGContextAddPath</span>(ctx, path);</span><br><span class="line"></span><br><span class="line"> <span class="type">CGContextStrokePath</span>(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式三:UIBezierPath</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)drawRect:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">UIBezierPath</span> <span class="operator">*</span>path <span class="operator">=</span> [[<span class="type">UIBezierPath</span> alloc]<span class="keyword">init</span>];</span><br><span class="line">    [path moveToPoint:<span class="type">CGPointMake</span>(<span class="number">50</span>, <span class="number">50</span>)];</span><br><span class="line">    [path addLineToPoint:<span class="type">CGPointMake</span>(<span class="number">110</span>, <span class="number">120</span>)];</span><br><span class="line">    <span class="type">CGContextAddPath</span>(ctx, path.<span class="type">CGPath</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式四:C(CGPath) + OC(UIBezierPath)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawRect:(CGRect)rect</span><br><span class="line">  &#123;</span><br><span class="line">      CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class="line"></span><br><span class="line">      CGMutablePathRef path = CGPathCreateMutable();</span><br><span class="line">      CGPathMoveToPoint(path, NULL, 50, 50);</span><br><span class="line">      CGPathAddLineToPoint(path, NULL, 110, 120);</span><br><span class="line"></span><br><span class="line">      // 把c的路径CGPath转成oc的路径bezierPath</span><br><span class="line">      UIBezierPath *path1 = [UIBezierPath bezierPathWithCGPath:path];</span><br><span class="line">      [path1 addLineToPoint:CGPointMake(80, 80)];</span><br><span class="line"></span><br><span class="line">      // 把路径添加到上下文中</span><br><span class="line">      CGContextAddPath(ctx, path1.CGPath);</span><br><span class="line"></span><br><span class="line">      CGContextStrokePath(ctx);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>方式五:纯OC实现(UIBezierPath)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawRect:(CGRect)rect</span><br><span class="line"> &#123;</span><br><span class="line">     UIBezierPath *path = [UIBezierPath bezierPath];</span><br><span class="line">     [path moveToPoint:CGPointMake(50, 50)];</span><br><span class="line">     [path addLineToPoint:CGPointMake(110, 120)];</span><br><span class="line">     [path stroke];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>直线</strong></p><p>两点一线，  <code>x0=x1&amp;&amp;y0！=y1</code> 垂直线   <code>x0！=x1&amp;&amp;y0=y1</code>水平线</p><p>起点  <code>CGContextMoveToPoint(ctx,x0,y0);</code></p><p>终点 <code>CGContextAddLineToPoint(ctx,x1,y1);</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 画直线</span></span><br><span class="line"><span class="operator">-</span>(void)drawLine</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获得当前画板（图形上下文对象）为C语言，创建对象无需加*</span></span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//!!!: 相关属性设置 可选</span></span><br><span class="line">    <span class="comment">//设置线条的颜色</span></span><br><span class="line">    <span class="comment">//CGContextSetRGBStrokeColor(ctx, 0.2, 0.2, 0.2, 1.0);</span></span><br><span class="line">    <span class="type">CGContextSetStrokeColorWithColor</span>(ctx, [<span class="type">UIColor</span> redColor].<span class="type">CGColor</span>);</span><br><span class="line">    <span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">10</span>); <span class="comment">// 设置线段的宽度</span></span><br><span class="line">    <span class="type">CGContextSetLineJoin</span>(ctx, kCGLineJoinRound); <span class="comment">// 设置线段起点和终点的样式都为圆角</span></span><br><span class="line">    <span class="type">CGContextSetLineCap</span>(ctx, kCGLineCapRound);   <span class="comment">// 设置线段的转角样式为圆角</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始画线, x，y为开始点的坐标</span></span><br><span class="line">    <span class="type">CGContextMoveToPoint</span>(ctx, <span class="number">0</span>, <span class="number">40</span>);</span><br><span class="line">    <span class="comment">//画直线, x，y为线条结束点的坐标</span></span><br><span class="line">    <span class="type">CGContextAddLineToPoint</span>(ctx, <span class="keyword">self</span>.bounds.size.width,<span class="number">40</span>);</span><br><span class="line">    <span class="type">CGContextStrokePath</span>(ctx);<span class="comment">//渲染，绘制出一条空心的线段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三角形</strong></p><p>三角形是由直线组成，画线方法与直线一样，最少3个点，添加三个点然后闭合路径<code>CGContextClosePath</code></p><p><code>CGContextMoveToPoint(triangle, 0, 0)</code>; &#x2F;&#x2F; 设置起点1<br><code>CGContextAddLineToPoint(triangle, 100, 200)</code>; &#x2F;&#x2F; 设置第二个点2<br><code>CGContextAddLineToPoint(triangle,200, 0)</code>; &#x2F;&#x2F; 设置第三个点3</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 三角形</span></span><br><span class="line"><span class="operator">-</span> (void)drawTriangle</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> triangle <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>(); <span class="comment">// 获得图形上下文</span></span><br><span class="line">    <span class="type">CGContextMoveToPoint</span>(triangle, <span class="number">150</span>, <span class="number">40</span>); <span class="comment">// 设置起点</span></span><br><span class="line">    <span class="type">CGContextAddLineToPoint</span>(triangle, <span class="number">60</span>, <span class="number">200</span>); <span class="comment">// 设置第二个点</span></span><br><span class="line">    <span class="type">CGContextAddLineToPoint</span>(triangle,<span class="number">240</span>, <span class="number">200</span>); <span class="comment">// 设置第三个点</span></span><br><span class="line">    <span class="type">CGContextClosePath</span>(triangle); <span class="comment">// 关闭起点和终点</span></span><br><span class="line">    <span class="type">CGContextStrokePath</span>(triangle); <span class="comment">// 渲染，绘制出三角形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>矩形</strong></p><p>设置一个CGRect大小可以了<code>CGContextAddRect(CGContextRef ctx, CGRect rect)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 矩形</span></span><br><span class="line"><span class="operator">-</span>(void)drawaRect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获得当前画板</span></span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="type">CGContextSetRGBStrokeColor</span>(ctx, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">//画线的宽度</span></span><br><span class="line">    <span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">0.25</span>);</span><br><span class="line">    <span class="type">CGContextAddRect</span>(ctx, <span class="type">CGRectMake</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="type">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>圆<code>CGContextAddArc</code></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  画圆</span></span><br><span class="line"><span class="comment"> *  @param ctx        上下文</span></span><br><span class="line"><span class="comment"> *  @param x          圆起点坐标X</span></span><br><span class="line"><span class="comment"> *  @param y          圆起点坐标y</span></span><br><span class="line"><span class="comment"> *  @param radius     圆的半径</span></span><br><span class="line"><span class="comment"> *  @param startAngle 起始角度</span></span><br><span class="line"><span class="comment"> *  @param endAngle   结束角度</span></span><br><span class="line"><span class="comment"> *  @param clockwise  顺逆时针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">CGContextAddArc</span>(<span class="type">CGContextRef</span> ctx, <span class="type">CGFloat</span> x, <span class="type">CGFloat</span> y,<span class="type">CGFloat</span> radius, <span class="type">CGFloat</span> startAngle, <span class="type">CGFloat</span> endAngle, int clockwise)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 画圆</span></span><br><span class="line"><span class="operator">-</span> (void)drawRoundRect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="type">CGContextSetRGBStrokeColor</span>(ctx, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">1.0</span>);<span class="comment">//颜色</span></span><br><span class="line">    <span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">0.25</span>);<span class="comment">//画线的宽度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">CGPoint</span> center <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="keyword">self</span>.bounds.size.width <span class="operator">/</span> <span class="number">2</span>, <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>);<span class="comment">//设置圆心位置</span></span><br><span class="line">    <span class="type">CGFloat</span> radius <span class="operator">=</span> <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>;<span class="comment">//设置半径</span></span><br><span class="line">    <span class="type">CGFloat</span> startAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span>;<span class="comment">//圆起点位置</span></span><br><span class="line">    <span class="type">CGFloat</span> endAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span> <span class="operator">+</span>  <span class="type">M_PI</span> <span class="operator">*</span> <span class="number">2</span>;<span class="comment">//圆终点位置</span></span><br><span class="line">    <span class="type">CGContextAddArc</span>(ctx,center.x,center.y,radius,startAngle, endAngle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">CGContextDrawPath</span>(ctx, kCGPathStroke); <span class="comment">//绘制路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="环形"><a href="#环形" class="headerlink" title="环形"></a>环形</h3><p>环形其实就是有一定宽度边框圆，所以我们设置一定的线宽即可如：<code>CGContextSetLineWidth(ctx, 10);</code></p><p>环形是空心圆，所以<code>CGContextDrawPath(ctx, kCGPathStroke);</code></p><p>绘制方式选择kCGPathStroke只画线，不填充，填充那就是个实心圆了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 环形</span></span><br><span class="line"><span class="operator">-</span>(void)drawAnnular</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">CGPoint</span> center <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="keyword">self</span>.bounds.size.width <span class="operator">/</span> <span class="number">2</span>, <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>);<span class="comment">//设置圆心位置</span></span><br><span class="line">    <span class="type">CGFloat</span> radius <span class="operator">=</span> <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>;<span class="comment">//设置半径</span></span><br><span class="line">    <span class="type">CGFloat</span> startAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span>;<span class="comment">//圆起点位置</span></span><br><span class="line">    <span class="type">CGFloat</span> endAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span> <span class="operator">+</span>  <span class="type">M_PI</span> <span class="operator">*</span> <span class="number">2</span>;<span class="comment">//圆终点位置</span></span><br><span class="line">    <span class="type">CGContextAddArc</span>(ctx,center.x,center.y,radius<span class="operator">-</span><span class="number">5</span>,startAngle, endAngle, <span class="number">0</span>);</span><br><span class="line">    <span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">10</span>);</span><br><span class="line">    [[<span class="type">UIColor</span> greenColor]<span class="keyword">set</span>];</span><br><span class="line">    <span class="type">CGContextDrawPath</span>(ctx, kCGPathStroke); <span class="comment">//绘制路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>圆弧</strong></p><p>绘制圆弧 就是一个圆形的一部分</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>(void)circularArc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> context <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="type">CGPoint</span> center <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="keyword">self</span>.bounds.size.width <span class="operator">/</span> <span class="number">2</span>, <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>);<span class="comment">//设置圆心位置</span></span><br><span class="line">    <span class="type">CGFloat</span> radius <span class="operator">=</span> <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>;<span class="comment">//设置半径</span></span><br><span class="line">    <span class="type">CGFloat</span> startAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span>;<span class="comment">//圆起点位置</span></span><br><span class="line">    <span class="type">CGFloat</span> endAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span> <span class="operator">+</span>  <span class="type">M_PI</span><span class="operator">*</span><span class="number">1.2</span>;<span class="comment">//圆终点位置</span></span><br><span class="line">    <span class="type">CGContextAddArc</span>(context, center.x,center.y,radius,startAngle, endAngle, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制圆弧</span></span><br><span class="line">    <span class="type">CGContextDrawPath</span>(context, kCGPathStroke);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>椭圆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawRect:(CGRect)rect</span><br><span class="line">&#123;</span><br><span class="line">    CGContextRef circular = UIGraphicsGetCurrentContext();</span><br><span class="line">    CGContextAddEllipseInRect(circular, CGRectMake(100, 100, 100, 80));//宽高相等=圆，宽高不等=椭圆</span><br><span class="line">    CGContextSetRGBFillColor(circular, 1.0, 0, 1.0, 1);// 设置颜色</span><br><span class="line">    CGContextFillPath(circular); // 渲染，将实心圆形画出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扇形</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>(void)drawPie</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGContextRef</span> ctx <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">CGPoint</span> center <span class="operator">=</span> <span class="type">CGPointMake</span>(<span class="keyword">self</span>.bounds.size.width <span class="operator">/</span> <span class="number">2</span>, <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>);<span class="comment">//设置圆心位置</span></span><br><span class="line">    <span class="type">CGFloat</span> radius <span class="operator">=</span> <span class="keyword">self</span>.bounds.size.height <span class="operator">/</span> <span class="number">2</span>;<span class="comment">//设置半径</span></span><br><span class="line"></span><br><span class="line">    <span class="type">CGFloat</span> startAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span>;<span class="comment">//圆起点位置</span></span><br><span class="line">    <span class="type">CGFloat</span> endAngle <span class="operator">=</span> <span class="operator">-</span> <span class="type">M_PI_2</span> <span class="operator">+</span>  <span class="type">M_PI</span> <span class="operator">*</span> <span class="number">1.5</span>;<span class="comment">//圆终点位置</span></span><br><span class="line">    [[<span class="type">UIColor</span> greenColor]<span class="keyword">set</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺时针画扇形</span></span><br><span class="line">    <span class="type">CGContextMoveToPoint</span>(ctx, center.x, center.y);</span><br><span class="line">    <span class="type">CGContextAddArc</span>(ctx, center.x, center.y, radius, startAngle,endAngle, <span class="number">0</span>);</span><br><span class="line">    <span class="type">CGContextClosePath</span>(ctx);</span><br><span class="line">    <span class="type">CGContextDrawPath</span>(ctx, kCGPathEOFillStroke);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制文本内容"><a href="#绘制文本内容" class="headerlink" title="绘制文本内容"></a>绘制文本内容</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘图只能在当前位方法中调用,否则无法得到图形上下文</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect:(<span class="type">CGRect</span>)rect&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要显示的文字</span></span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>str <span class="operator">=</span> @<span class="string">&quot;这是要现实的文本Text。。。。&quot;</span>;</span><br><span class="line">    <span class="comment">//绘制文字显示的指定区域</span></span><br><span class="line">    <span class="type">CGRect</span> rect <span class="operator">=</span> <span class="type">CGRectMake</span>(<span class="number">20</span>, <span class="number">50</span>, <span class="number">374</span>, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">//字体大小</span></span><br><span class="line">    <span class="type">UIFont</span> <span class="operator">*</span>font <span class="operator">=</span> [<span class="type">UIFont</span> systemFontOfSize:<span class="number">25</span>];</span><br><span class="line">    <span class="comment">//字体颜色</span></span><br><span class="line">    <span class="type">UIColor</span> <span class="operator">*</span>color <span class="operator">=</span> [<span class="type">UIColor</span> redColor];</span><br><span class="line">    <span class="comment">//初始化段落样式</span></span><br><span class="line">    <span class="type">NSMutableParagraphStyle</span> <span class="operator">*</span>paragraphStyle <span class="operator">=</span> [[<span class="type">NSMutableParagraphStyle</span> alloc]<span class="keyword">init</span>];</span><br><span class="line">    <span class="comment">//居中对齐</span></span><br><span class="line">    <span class="type">NSTextAlignment</span> textAlignment <span class="operator">=</span> <span class="type">NSTextAlignmentCenter</span>;</span><br><span class="line">    <span class="comment">//设置段落样式</span></span><br><span class="line">    paragraphStyle.alignment <span class="operator">=</span> textAlignment;</span><br><span class="line">    <span class="type">NSDictionary</span> <span class="operator">*</span>attributes<span class="operator">=</span> @&#123;<span class="type">NSFontAttributeName</span>:font,<span class="type">NSForegroundColorAttributeName</span>:color,</span><br><span class="line"><span class="type">NSParagraphStyleAttributeName</span>:style&#125;;</span><br><span class="line">    [str drawInRect:rect withAttributes:attributes];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制图片&amp;&amp;图片剪切<code>CGContextClip</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> (void)drawImage&#123;</span><br><span class="line">     <span class="type">UIImage</span> <span class="operator">*</span>image <span class="operator">=</span> [<span class="type">UIImage</span> imageNamed:@<span class="string">&quot;theImage.jpg&quot;</span>];</span><br><span class="line">    <span class="comment">//从某一点开始绘制</span></span><br><span class="line">    [image drawAtPoint:<span class="type">CGPointMake</span>(<span class="number">10</span>, <span class="number">50</span>)];</span><br><span class="line">    <span class="comment">//绘制到指定的矩形中，注意如果大小不合适会会进行拉伸，图像会形变</span></span><br><span class="line">    [image drawInRect:<span class="type">CGRectMake</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">300</span>, <span class="number">450</span>)];</span><br><span class="line">    <span class="comment">//平铺绘制</span></span><br><span class="line"><span class="comment">//    [image drawAsPatternInRect:CGRectMake(0, 0, 320, 568)];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘图只能在当前位方法中调用,否则无法得到图形上下文</span></span><br><span class="line"><span class="operator">-</span> (void)drawRect:(<span class="type">CGRect</span>)rect&#123;</span><br><span class="line">    <span class="comment">//获取图形上下文</span></span><br><span class="line">    <span class="type">CGContextRef</span> context <span class="operator">=</span> <span class="type">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="comment">//指定上下文显示的范围</span></span><br><span class="line">    <span class="type">CGContextAddEllipseInRect</span>(context, <span class="type">CGRectMake</span>(<span class="number">80</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">    <span class="comment">//裁剪</span></span><br><span class="line">    <span class="type">CGContextClip</span>(context);</span><br><span class="line">    <span class="comment">//获取图片</span></span><br><span class="line">    <span class="type">UIImage</span> <span class="operator">*</span>image <span class="operator">=</span> [<span class="type">UIImage</span> imageNamed:@<span class="string">&quot;mv2.jpg&quot;</span>];</span><br><span class="line">    [image drawAtPoint:<span class="type">CGPointMake</span>(<span class="number">50</span>, <span class="number">50</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>截屏</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//截屏</span><br><span class="line">-(void)cutScreen&#123;</span><br><span class="line">    /*</span><br><span class="line">     1、获得一个图片的画布</span><br><span class="line">    2、获得画布的上下文</span><br><span class="line">    3、设置截图的参数</span><br><span class="line">    4、截图</span><br><span class="line">    5、关闭图片的上下文</span><br><span class="line">    6、保存</span><br><span class="line">    */</span><br><span class="line">   //1、获得一个图片的画布</span><br><span class="line">   UIGraphicsBeginImageContext(self.frame.size);</span><br><span class="line">   //2、获得一个上下文</span><br><span class="line">   [self addRound];</span><br><span class="line">   //3、设置参数</span><br><span class="line">   /*</span><br><span class="line">    CGSize size:截图尺寸</span><br><span class="line">    BOOL opaque：是否不透明,YES不透明</span><br><span class="line">    CGFloat scale：比例</span><br><span class="line">    */</span><br><span class="line">   UIGraphicsBeginImageContextWithOptions(self.frame.size, YES, 1);</span><br><span class="line">   //4、开始截图</span><br><span class="line">   UIImage image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">   //5、关闭图片上下文</span><br><span class="line">   UIGraphicsEndImageContext();</span><br><span class="line">   //保存到相册</span><br><span class="line">   UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:),nil);</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p><strong>保存到相册时的回调方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)image:(UIImage )image didFinishSavingWithError:(NSError )error</span><br><span class="line">   contextInfo:(void )contextInfo&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>参考资料推荐</code></p><p><a href="https://www.gitbook.com/book/wf851128/quartz-2d-shou-ce/details"><strong>Quartz 2D手册</strong></a></p><p><a href="http://www.kancloud.cn/manual/ios"><strong>ios核心动画高级技巧</strong></a></p><p><a href="https://github.com/raineryue?tab=repositories">https://github.com/raineryue?tab=repositories</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画,绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颜色渐变 CAGradientLayer</title>
      <link href="/2016/04/06/%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%20CAGradientLayer/"/>
      <url>/2016/04/06/%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%20CAGradientLayer/</url>
      
        <content type="html"><![CDATA[<p>如果要完成需要有渐变色的图片，进度条等，那么<code>CAGradientLayer</code>可以很容易的实现这一功能。</p><p>点击进入<code>CAGradientLayer.h</code>文件<br>阅读Api<br>Api简介：<br>在背景色上绘制渐变色，填满layer（包括圆角）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  CAGradientLayer是CALayer的子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CAGradientLayer</span> : <span class="title">CALayer</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用作渐变的颜色数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span> *colors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用作分界的位置数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *locations;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  渐变开始位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">CGPoint</span> startPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  渐变结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">CGPoint</span> endPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  表示像素变化方式，只有一个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>) <span class="built_in">NSString</span> *type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> 1、先创建一个label</span></span><br><span class="line">    <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">28</span>)];</span><br><span class="line">    label.text = <span class="string">@&quot;颜色渐变hello world&quot;</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:label];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> 2、创建layer（负责显示渐变色）</span></span><br><span class="line">    <span class="built_in">CAGradientLayer</span> *layer = [<span class="built_in">CAGradientLayer</span> layer];<span class="comment">//初始化渐变层</span></span><br><span class="line">    layer.frame = label.bounds;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置颜色组</span></span><br><span class="line">    layer.colors = @[(__bridge <span class="type">id</span>)[<span class="built_in">UIColor</span> redColor].CGColor,</span><br><span class="line">                     (__bridge <span class="type">id</span>)[<span class="built_in">UIColor</span> greenColor].CGColor,</span><br><span class="line">                     (__bridge <span class="type">id</span>)[<span class="built_in">UIColor</span> blackColor].CGColor,</span><br><span class="line">                     (__bridge <span class="type">id</span>)[<span class="built_in">UIColor</span> whiteColor].CGColor,</span><br><span class="line">                     (__bridge <span class="type">id</span>)[<span class="built_in">UIColor</span> blueColor].CGColor</span><br><span class="line">                     ];</span><br><span class="line">    <span class="comment">// 颜色分割线,渐变颜色的区间分布，locations的数组长度和color一致，这个值一般不用管它，默认是nil，会平均分布。</span></span><br><span class="line">    layer.locations = @[@(<span class="number">0.2</span>), @(<span class="number">0.35</span>),@(<span class="number">0.5</span>),@(<span class="number">0.65</span>),@(<span class="number">0.7</span>)];</span><br><span class="line">    <span class="comment">// 设置起点和终点坐标</span></span><br><span class="line">    layer.startPoint = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    layer.endPoint = <span class="built_in">CGPointMake</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    layer.type = kCAGradientLayerAxial;</span><br><span class="line">    layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    layer.position = <span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">340</span>);</span><br><span class="line">    layer.mask = label.layer;</span><br><span class="line">    [<span class="keyword">self</span>.view.layer addSublayer:layer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二-drawRect颜色渐变"><a href="#方式二-drawRect颜色渐变" class="headerlink" title="方式二 drawRect颜色渐变"></a>方式二 drawRect颜色渐变</h3><p>首先创建一个 UIView，重写drawRect方法</p><ul><li>一 创建颜色空间</li><li>二 创建渐变</li><li>三 设置裁剪区域</li><li>四 绘制渐变</li><li>五 释放对象</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> drawGradient];</span><br><span class="line"><span class="comment">//    [self drawGradient2];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark ---线性渐变</span></span><br><span class="line">-(<span class="type">void</span>) drawGradient</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="comment">//1.创建颜色空间 在计算机设置中，直接选择rgb即可，其他颜色空间暂时不用考虑。</span></span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.创建渐变</span></span><br><span class="line">    <span class="built_in">CGFloat</span> components[<span class="number">8</span>] = &#123;<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>&#125;;</span><br><span class="line">    <span class="built_in">CGFloat</span> locations[<span class="number">2</span>] = &#123;<span class="number">0.0</span>,<span class="number">1.0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGGradientRef</span> gradient=<span class="built_in">CGGradientCreateWithColorComponents</span>(colorSpace, components, locations, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//3.渐变区域裁剪</span></span><br><span class="line">    <span class="comment">//CGContextClipToRect(context, CGRectMake(0, 360, 200, 100));</span></span><br><span class="line">    <span class="built_in">CGRect</span> rects[<span class="number">5</span>] = &#123;<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>),<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>),<span class="built_in">CGRectMake</span>(<span class="number">200</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>),<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>),<span class="built_in">CGRectMake</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>)&#125;;</span><br><span class="line">    <span class="built_in">CGContextClipToRects</span>(context,rects,<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//4.绘制渐变</span></span><br><span class="line">    <span class="built_in">CGContextDrawLinearGradient</span>(context, gradient, <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>), <span class="built_in">CGPointMake</span>(<span class="number">370</span>, <span class="number">460.0</span>), kCGGradientDrawsAfterEndLocation);</span><br><span class="line">    <span class="comment">//5.释放对象</span></span><br><span class="line">    <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">    <span class="built_in">CGGradientRelease</span>(gradient);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark 径向渐变</span></span><br><span class="line">-(<span class="type">void</span>)drawGradient2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    <span class="built_in">CGFloat</span> components[<span class="number">8</span>] = &#123;<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>&#125;;</span><br><span class="line">    <span class="built_in">CGFloat</span> locations[<span class="number">2</span>] = &#123;<span class="number">0.3</span>,<span class="number">1.0</span>&#125;;</span><br><span class="line">    <span class="built_in">CGGradientRef</span> gradient=<span class="built_in">CGGradientCreateWithColorComponents</span>(colorSpace, components, locations, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPoint</span> statCenter=<span class="built_in">CGPointMake</span>(<span class="number">160</span>, <span class="number">230</span>);   <span class="comment">//起始中心点</span></span><br><span class="line">    <span class="built_in">CGFloat</span> startRadius=<span class="number">10</span>;                     <span class="comment">//起始半径 指定为0  从圆心渐变  否则  中心位置不渐变</span></span><br><span class="line">    <span class="built_in">CGPoint</span> endCenter=<span class="built_in">CGPointMake</span>(<span class="number">160</span>, <span class="number">230</span>);    <span class="comment">//结束中心点（通常与起始专心点重合）</span></span><br><span class="line">    <span class="built_in">CGFloat</span> endRadius=<span class="number">150</span>;                      <span class="comment">//结束半径</span></span><br><span class="line">    <span class="built_in">CGContextDrawRadialGradient</span>(context, gradient,statCenter,startRadius,endCenter,endRadius,kCGGradientDrawsAfterEndLocation);</span><br><span class="line">    <span class="comment">//释放对象</span></span><br><span class="line">    <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">    <span class="built_in">CGGradientRelease</span>(gradient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习React Native:Mac环境搭建Nuclide安装与配置</title>
      <link href="/2016/04/06/Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BANuclide%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/04/06/Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BANuclide%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Facebook开源了能够使用<code>JavaScript</code>开发iOS和Android原生应用的React Native。同时，Facebook还为React Native开发了一款基于跨平台文本编辑器Atom的开源IDE：Nuclide。</p><p>Nuclide的官网：<a href="http://nuclide.io/">http://nuclide.io</a><br>Nuclide的github：<a href="https://github.com/facebook/nuclide">https://github.com/facebook/nuclide</a><br>Nuclide是Facebook开发的开发React Native的开发工具，基于Github的Atom开发,是基于Atom 的提供的一系列插件集。要使用 Nuclide ，首先需要先安装 Atom 。<br>官网下载地址：(Atom)[<a href="https://atom.io/]">https://atom.io/]</a></p><p><strong>安装方法一：</strong><br>(1)安装完 Atom 后，打开 Settings 面板，并点击 Install 选项卡，然后在搜索框中键入 <code>nuclide-installer</code></p><p>选择我们需要安装的插件，点击该插件旁边的蓝色 Install 按钮进行安装。</p><p>另一种方法是直接利用 Atom 的包管理器 apm 安装：<br><code>$ apm install nuclide-installer</code></p><p><strong>安装方法二：</strong><br>(1)还有一种方法，对Nuclide源代码编译安装, Nuclide项目官方地址:<a href="https://github.com/facebook/nuclide%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93%E8%AF%A5%E9%A1%B9%E7%9B%AE%E6%98%AFfacebook%E5%AE%98%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84">https://github.com/facebook/nuclide，我们知道该项目是facebook官方提供的</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/facebook/nuclide.git</span><br><span class="line"><span class="built_in">cd</span> nuclide</span><br><span class="line">npm install</span><br><span class="line">apm link</span><br></pre></td></tr></table></figure><p>安装好了就可以高效的进行ReactNative的学习与开放了</p><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li>atom-beautify 代码格式化</li><li>atomerminal 打开终端，pwd为当前文件所在路径</li><li>docblockr 写注释的插件</li><li>react：React 的语法补全和智能重排；</li><li>save-session：让 Atom 记住上一次打开的会话；</li><li>browser-plus：在 Atom 中内嵌一个浏览器窗口，方便页面调试（其实 Atom 本身就是一个浏览器）；</li><li>react-snippets：React 的代码段；</li><li>highlight-selected：高亮当前双击选中的标记；</li><li>jshint：检查 JavaScript 的语法，支持 JSX （需要在插件设置中开启 Support Linting JSX）；</li><li>emmet：用 emmet （Zen Coding）方式快速编写页面；</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Native </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 多环境配置 Build Configuration</title>
      <link href="/2016/03/31/iOS%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/03/31/iOS%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>对于有些企业来说，应用在发布到 App Store 之前, 会把应用通过Ad Hoc 形式进行公测。目的是用来模拟真实用户的操作行为和流程,以此来找到一些更不容易发现的 Bug。</p><p>产品，测试，都需要自己打包，而且需要打不同环境的多个包，打包需要对配置进行修改，产品还要求公测包标题和图标需要带有Beta字样，这样改了改去非常麻烦而且非常耗费时间。</p><p>打包主要分为Debug, Beta, AppStore 这样的版本</p><p>其实XCode提供了一个非常容易使用的机制解决这些问题: Build Configuration</p><p>最终的目标是:<br>1、每个环境有一个单独的配置文件。例如我们可以改变测试服务器和生产服务器的URL。<br>2、有不同的包标识符,为每个环境设置包名称和应用程序图标。 这样做确保您可以直接识别哪个版本是安装在一个设备上。也许更重要的是,它还可以让我们在设备上有多个版本,因为每个环境都有自己的包标识符。<br>3、有一个预处理器宏能够区分不同环境。<br>​<br>当您创建一个新项目,Xcode已经提供了两种配置的: release 和 Debug</p><h3 id="创建一个功能，设置不同BundleID"><a href="#创建一个功能，设置不同BundleID" class="headerlink" title="创建一个功能，设置不同BundleID"></a>创建一个功能，设置不同BundleID</h3><p>不同版本要有不同的Bundle ID,比如</p><ol><li>com.mycompany.myapp.debug – Debug版本</li><li>com.mycompany.myapp.inhouse – (Ad Hoc, Beta) 版本</li><li>com.mycompany.myapp —App Store(Production) 版本</li></ol><p>多环境配置步骤</p><h3 id="一、创建Build-Configurations"><a href="#一、创建Build-Configurations" class="headerlink" title="一、创建Build Configurations"></a>一、创建Build Configurations</h3><p>默认Xcode会提供2个Build配置项(Build Configuration):Debug和Release。一般来说这样两种情况就足够了，但是在有些时候我们需要添加一个或多个新的配置项，添加一个新的配置项的步骤如下：</p><p>1）、方式：选中PROJECT的名称，然后选中Info，点击Configurations下面的<code>+</code>选择<code>Duplicate &quot;Debug&quot;Configuration</code> 生成一个新Configuration,双击重命名configuration ，修改如下图：<br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/31/FgWRnjX0WKEYIjRoBkmlheyMzfxN479.png"></p><h3 id="二、创建-User-Defined-Setting"><a href="#二、创建-User-Defined-Setting" class="headerlink" title="二、创建 User-Defined Setting"></a>二、创建 User-Defined Setting</h3><p>在Xcode中使用User-Defined Setting可以定义一些Xcode编译使用的宏配置，以便我们为不同的配置能够分配不同的包ID，图标名称或AppID。</p><p>1、开启User-Defined Setting，如下图：<br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/31/Frvrx6jiUF9AzXTw3QHWlrRHppQc479.png"></p><p>2、在这个例子中，我创建了2个不同的用户自定义设置; <code>APP_BUNDLE_ID (APP Bundle ID)</code>和<code>APP_DISPLAY_NAME(APP的名称)</code>。</p><p>添加User-Defined Setting后，编辑里面每个设置构建配置值<br>效果如下图：</p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/31/FlOrq2HK2R75jqp4mEJisoQvPwDh479.png"></p><p>3.App Icon 设置<br>在 Media Assets 中 (在项目中的默认名字应该是 Images.xcassets), 点击菜单 “Editor” -&gt; “New App Icon”, 建立两个新的 App Icon, 分别对应 Debug 和 Staging 版本. 然后把之前准备好的图标分别拖进去. 如图:<br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/31/FufHtzkg6spZBKdUwIUBkprxsY2P479.png"></p><p>点击AppIcon添加管理AppICon<br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/01/FkLqdrqhWcE7cGr16Ryv8Dkl7Wul758.png" alt="添加图标1"></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/01/Fv9EinlyuD1uZIt_FUpky3YPpg3P758.png"></p><h3 id="三、修改Info-plist文件"><a href="#三、修改Info-plist文件" class="headerlink" title="三、修改Info.plist文件"></a>三、修改Info.plist文件</h3><p>所有在上一步中定义的User-Defined Setting将在项目的info.plist中使用。<br>修改您的info.plist，通过插入用户自定义设置中定义的值。</p><p>Bundle identifiter(捆绑标识符)：<code>$(APP_BUNDLE_ID)</code><br>Bundle display name(包显示名称)：演示应用<code>$(APP_DISPLAY_NAME)</code></p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/31/FiV6Qzk3xYlQPXEWBu5cSSFKz_TV513.png"></p><p>设置完毕后，可进行Run测试，Debug,Beta，Release 编译后进入手机桌面，该工程将会有不同图标，名称的App。<br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/01/FhBRLfhncgDOQS6a1QgicO2SI9Qr445.jpeg"></p><p><code>设置多个Scheme</code><br>当然也可以设置多个Scheme进行管理<code>shift+cmmand+&lt;</code>,勾选shared以便git同步<br><a href="http://7xr7vj.com1.z0.glb.clouddn.com/2016/04/01/FhBRLfhncgDOQS6a1QgicO2SI9Qr445.jpeg"></a></p><p><strong>测试相关信息</strong></p><p>1：获取<code>bundle Id</code>信息：[[NSBundle mainBundle] bundleIdentifier]；</p><p>2：获取版本号：[[[NSBundle mainBundle]infoDictionary] objectForKey:@”CFBundleVersion”];</p><p>3: 获取App显示名：[[[NSBundle mainBundle]infoDictionary] objectForKey:@”CFBundleDisplayName”];</p><p>参考网址：<br><a href="http://appfoundry.be/blog/2014/07/04/Xcode-Env-Configuration/">http://appfoundry.be/blog/2014/07/04/Xcode-Env-Configuration/</a><br><a href="http://ravelantunes.com/blog/xcode-build-process/">http://ravelantunes.com/blog/xcode-build-process/</a><br><a href="http://www.teratotech.com/blog/xcode-7-steps-to-easily-switch-between-multiple-environments/">http://www.teratotech.com/blog/xcode-7-steps-to-easily-switch-between-multiple-environments/</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 高效率编程工具篇</title>
      <link href="/2016/03/30/iOS%20%E9%AB%98%E6%95%88%E7%8E%87%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
      <url>/2016/03/30/iOS%20%E9%AB%98%E6%95%88%E7%8E%87%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>古语有云，“工欲善其事，必先利其器” ，合理的使用工具能让开发效率大大提升，达到事半功倍的效果。</p><h3 id="第三方开源类库管理"><a href="#第三方开源类库管理" class="headerlink" title="第三方开源类库管理"></a>第三方开源类库管理</h3><p>CocoaPods–快速集成文第三方开源类库<br>使用教程：<a href="http://code4app.com/article/cocoapods-install-usage">CocoaPods安装和使用教程</a></p><h3 id="Xcode-插件"><a href="#Xcode-插件" class="headerlink" title="Xcode 插件"></a>Xcode 插件</h3><p>利用插件提高代码质量和工作效率</p><p>建议使用<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>来管理Xcode插件 快捷键<code>Shift+Command+9</code></p><p>Alcatraz安装</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh</span></span><br></pre></td></tr></table></figure><p>Alcatraz卸载：    </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Application Support/Alcatraz/</span><br></pre></td></tr></table></figure><p>InjectionPlugin （<code>推荐</code>）<br>Xcode高端必备插件，可以实时的修改代码,而不需要重新编译运行到模拟器中，成吨提高开发效率。</p><p><strong>代码格式化与注释</strong><br>1.XAlign   <code>Shift+Command+X</code><br>2.ClangFormat</p><p><strong>注释辅助插件</strong><br>XToDo         快捷键标记，和统一查看(TODO，FIXME,???和!!!注释，还为你提供了一个查看列表。)<br>VVDocumenter  规范注释生成器</p><p><strong>JSON数据一键生成模型文件</strong><br>1.ESJsonFormat<br>2.XWJsonToCode</p><p><strong>控制台的输出中文</strong><br>Debug栏打印时自动把Unicode转化成汉字<br>1.DXXcodeConsoleUnicodePlugin<br>2.FKConsole</p><p><strong>import头文件整理</strong><br>项目中import了很多类，经过不停的修改后可能已经不需要导入这个类，可是我们没有删除#import，这样会导致我们编译速度变慢<br>FUI                 清除没有引用的头文件<br>CleanHeaders        清除没有引用的头文件<br>SortXcodeSelection  整理头文件</p><p><strong>XIB 辅助插件</strong><br>DefaultMarginDisabler  为XIB设置默认约束<br>RRConstraintsPlugin    使用自动布局的辅助插件.</p><p>FuzzyAutocompletePlugin 代码自动补全<br>XcodeBoost  提取方法声明，添加基于命令行的代码操作（剪切&#x2F;复制&#x2F;粘贴&#x2F;重复&#x2F;删除行），以及持续高亮等</p><p>DCLazyInstantiate 自动生成懒加载代码<code>Shift + Cmd + -</code></p><p>ZLGotoSandboxPlugin 快速进入App沙盒目录<br>看沙盒的插件，当运行模拟器的时候，<code>Shift + Common + w</code> 直接查看当前模拟器下程序的沙盒。</p><p>CocoaPods    图像界面管理CocoaPods<br>FixCode      开发证书管理<br>KSImageNamed 提供了图像名称填写的自动化<br>KSHObjcUML   显示类的依赖关系导图<br>Reveal-In-GitHub 查看项目中GitHub的代码<br>ShowInGitHub </p><p><code>更新Xcode版本失效快捷修复</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.githubusercontent.com/cielpy/RPAXU/master/refreshPluginsAfterXcodeUpgrading.sh | sh</span><br></pre></td></tr></table></figure><p>Dash   最好用的阅读文档的工具<br><strong>ipa优化</strong><br><a href="https://github.com/jeffhodnett/Unused">Unused</a>       用来检查Xcode项目中没有用到的资源。<br><a href="http://wasted.werk01.de/">Wasted</a>      选取ipa文件分析出哪些可以优化</p><p><strong>AppIcon自动生成</strong></p><p>IconKit  App应用图标制作工具</p><p>自动生成@3x,@2x, @1x 图片<br>1.RTImageAssets<br>2.ROTools<br>3.Prepo</p><p><strong>Mac自带工具</strong><br>FileMerge   代码比较工具<br>数码测色计    支持十六进制取色</p><h3 id="轻量级文本编辑器"><a href="#轻量级文本编辑器" class="headerlink" title="轻量级文本编辑器"></a>轻量级文本编辑器</h3><ul><li>编辑器之神 vim</li><li>神之编辑器 Emacs   </li><li>编辑器之妖 TextMate</li><li>神级代码编辑器 Sublime Text</li></ul><p><a href="http://blog.csdn.net/redguardtoo/article/details/7222501">一年成为Emacs高手(像神一样使用编辑器)</a><br><code>开发者必备编辑器:</code><a href="http://www.maczapp.com/zjbb-i-developers">http://www.maczapp.com/zjbb-i-developers</a></p><h3 id="UI图片处理"><a href="#UI图片处理" class="headerlink" title="UI图片处理"></a>UI图片处理</h3><p>GIF图录制  <a href="http://www.cockos.com/licecap/">liceCap</a><br>Pixelmator（图片处理）<br>轻量级修图软件，干净整洁的界面易于操作，界面清爽，布局灵活，熟悉 Photoshop 的人可迅速上手。<br>Logoist 2   一款非常不错的Mac平面设计软件</p><p><strong>测量工具</strong><br><a href="http://www.ricciadams.com/projects/pixel-winch">Pixel Winch</a><br>UI没标注肿么办，用直接Pixel Winch自动精确测量 UI 切图之间的距离吧，相比系统手工量方便多了</p><p>取色配色工具</p><p>Colored</p><p>快捷 App 启动和切换工具 :</p><p> Manico</p><p><strong>图片压缩</strong><br>Tinyjpg      <a href="https://tinyjpg.com/">https://tinyjpg.com/</a><br>ImageOptim   <a href="https://imageoptim.com/">https://imageoptim.com/</a>　<br>色彩笔　　 　<a href="http://www.secaibi.com/tools/">http://www.secaibi.com/tools/</a></p><p>More：<a href="http://www.iplaysoft.com/image-optimization-tools.html">http://www.iplaysoft.com/image-optimization-tools.html</a></p><p>UI设计工具推荐: <a href="http://tool.ui.cn/">http://tool.ui.cn/</a></p><p><strong>接口调试</strong><br>网络封包分析工具：<a href="http://www.charlesproxy.com/">Charles</a><br>调试API接口神器— <code>Echo</code>、<code>Paw</code>、<code>do http</code><br>Chrom插件 —DHC 支持HTTP和HTTPS 、Postman<br>火狐插件 — HttpRequester、HTTP Tool、RESTClient</p><p>在线接口测试工具<br><a href="http://www.atool.org/httptest.php">http://www.atool.org/httptest.php</a><br><a href="http://www.haojson.com/postjson/">http://www.haojson.com/postjson/</a></p><p>Json解析格式验证</p><p><a href="http://json.cn/">http://json.cn/</a></p><p><a href="http://json.parser.online.fr/beta/">http://json.parser.online.fr/beta/</a></p><p><strong>SQLite管理工具</strong><br>1.SQLite Professional<br>2.MesaSQLite for Mac</p><p><strong>Api测试</strong><br><a href="https://www.juhe.cn/">聚合数据</a><br><a href="http://apistore.baidu.com/">百度ApiStore</a><br>Unicode转码<br><a href="http://tool.chinaz.com/Tools/Unicode.aspx">http://tool.chinaz.com/Tools/Unicode.aspx</a></p><p><strong>贝塞尔曲线生成</strong><br><a href="http://cubic-bezier.com/">http://cubic-bezier.com/</a></p><p>CheatSheet<code>推荐</code> 长按<code>command</code>键可以弹出当前程序下的快捷键列表。<br>Better Rename  文件批量重命名<br>Kaleidoscope    进行文本比较、图片比较的工具，可以支持任意类型文本格式的文件，也可以支持图片比较，无论你是可怜的码农，用作代码比较利器，文艺的作家，比较文章的不同，还是高端的设计师，来查看图片间的细微区别，都非常适合。<br>iTerm2           作为互联网从业者，装个系统终端增强工具总是必要的</p><p>Snap  超级好用的应用快捷键启动工具</p><p><strong>推送调试</strong></p><p><strong>Knuff</strong>–<a href="https://github.com/KnuffApp/Knuff">https://github.com/KnuffApp/Knuff</a></p><p><a href="http://www.cnblogs.com/sixindev/p/4545825.html">友盟分享，极光推送Demo</a></p><p>思维导图&#x2F;流程图</p><p><a href="http://naotu.baidu.com/">百度脑图</a></p><p><a href="https://www.processon.com/">https://www.processon.com/</a></p><p><a href="https://www.mindmeister.com/zh">https://www.mindmeister.com/zh</a></p><p>Mindnode</p><p><strong>下载工具</strong></p><p>Progressive Downloader  支持断点续传，多任务下载，速度也不错</p><p><strong>文件比较</strong></p><p>Beyond Compare   允许你快速和容易地比较你的文件和文件夹。通过使用简单的，强大的命令，你可以专注于你感兴趣的差异，并忽略其余。</p><p>程序开发相关工具：</p><p>Developer Font Tool 这是一款Mac平台的开发者字体工具，是一款帮助开发者和设计人员更简单的预览和比较字体效果的软件。</p><p>开发者HTTP工具 :</p><p> Developer HTTP Tool 这是一款Mac的开发者HTTP工具，帮助开发者快速检查HTTP相关的参数：请求参数、请求内容。</p><p><code>Mac 推荐</code></p><p>QQ截图 <a href="http://snip.qq.com/">http://snip.qq.com/</a></p><p>重命名namechanger  <a href="https://mrrsoftware.com/namechanger/">https://mrrsoftware.com/namechanger/</a></p><p><a href="http://zipzapmac.com/go2shell">Go2Shell</a>(官网)-从Finder直接打开终端</p><h3 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h3><p><strong>Android Studio</strong> -谷歌出的安卓开发环境，</p><p><strong>Eclipse&#x2F;MyEclipse</strong></p><p><strong>TotalFinder</strong></p><p>也是必备的一个软件，给Finder加上像谷歌浏览器一样的标签页，在各个标签页切换很方便。</p><p><strong>KeyKey Typing Tutor</strong> </p><p>是一款 Mac OS X 上优秀的键盘打字练习工具，可以让我们快速的掌握高效率正确的键盘打字方式，软件界面也很精美！</p><p><strong>可视化文件对比合并同步工具</strong></p><p><strong>Araxis Merge</strong>  </p><p><strong>Kaleidoscope</strong> </p><p><strong>Beyond Compare</strong></p><p>cakeBrew</p><p>Brew GUI工具</p><p>用分屏小工具</p><p>SizeUp </p><p>更多：<a href="http://www.scoop.it/t/ios-dev">http://www.scoop.it/t/ios-dev</a></p><p><a href="https://github.com/iamjiyixuan/iOSDevToolBox/blob/master/README.md">iOS开发工具箱</a></p><p><a href="http://benscheirman.com/2013/08/the-ios-developers-toolbelt/">75 Essential Tools for iOS Developers</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程规范 </tag>
            
            <tag> 代码优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS访问权限设置</title>
      <link href="/2016/03/30/iOS%20%E5%85%A8%E9%83%A8%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
      <url>/2016/03/30/iOS%20%E5%85%A8%E9%83%A8%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>iOS 全部访问权限设置(不断更新)</p><p><strong>HTTPS</strong>网络访问</p><p><a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33">https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在Info.plist中添加 App Transport Security Settings 类型 Dictionary ;</span><br><span class="line">并在App Transport Security Settings 下添加 Allow Arbitrary Loads 类型Boolean, 值设为 YES</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">升到iOS10之后，需要设置权限的有：</span><br><span class="line"></span><br><span class="line">麦克风权限：Privacy - Microphone Usage Description 是否允许此App使用你的麦克风？</span><br><span class="line">相机权限： Privacy - Camera Usage Description 是否允许此App使用你的相机？</span><br><span class="line">相册权限： Privacy - Photo Library Usage Description 是否允许此App访问你的媒体资料库？</span><br><span class="line">通讯录权限： Privacy - Contacts Usage Description 是否允许此App访问你的通讯录？</span><br><span class="line">蓝牙权限：Privacy - Bluetooth Peripheral Usage Description 是否许允此App使用蓝牙？</span><br><span class="line">语音转文字权限：Privacy - Speech Recognition Usage Description 是否允许此App使用语音识别？</span><br><span class="line">日历权限：Privacy - Calendars Usage Description</span><br><span class="line">定位权限：Privacy - Location When In Use Usage Description</span><br><span class="line">定位权限: Privacy - Location Always Usage Description</span><br><span class="line">位置权限：Privacy - Location Usage Description</span><br><span class="line">媒体库权限：Privacy - Media Library Usage Description</span><br><span class="line">健康分享权限：Privacy - Health Share Usage Description</span><br><span class="line">健康更新权限：Privacy - Health Update Usage Description</span><br><span class="line">运动使用权限：Privacy - Motion Usage Description</span><br><span class="line">音乐权限：Privacy - Music Usage Description</span><br><span class="line">提醒使用权限：Privacy - Reminders Usage Description</span><br><span class="line">Siri使用权限：Privacy - Siri Usage Description</span><br><span class="line">电视供应商使用权限：Privacy - TV Provider Usage Description</span><br><span class="line">视频用户账号使用权限：Privacy - Video Subscriber Account Usage Description</span><br></pre></td></tr></table></figure><p>plist信息</p><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppleMusicUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问媒体资料库<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSBluetoothPeripheralUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问蓝牙<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCalendarsUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问日历<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问相机<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthShareUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问健康分享<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthUpdateUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问健康更新 <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能始终访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能在使用期间访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMotionUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问运动与健身<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问麦克风<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问相册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问相机<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSRemindersUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问提醒事项<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift学习-基础部分</title>
      <link href="/2016/03/28/Swift%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2016/03/28/Swift%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>与Swift最新版同步，当前代码版本Swift4.0</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://www.swift51.com/swift4.0/chapter2/01_The_Basics.html</span></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">//#MARK:- 常量与变量</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;Hello, playground&quot;</span></span><br><span class="line"><span class="keyword">let</span> a<span class="operator">=</span><span class="number">1</span> <span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">var</span> b<span class="operator">=</span><span class="number">2</span> <span class="comment">//声明变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明多个常量或者多个变量</span></span><br><span class="line"><span class="keyword">let</span> x1 <span class="operator">=</span> <span class="number">0.0</span>, y1 <span class="operator">=</span> <span class="number">0.0</span>, z1 <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="number">0.0</span>, y <span class="operator">=</span> <span class="number">0.0</span>, z <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"><span class="keyword">var</span> c:<span class="type">String</span> <span class="comment">//声明变量类型</span></span><br><span class="line">c<span class="operator">=</span><span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 常量和变量的命名*/</span></span><br><span class="line"><span class="comment">//你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：</span></span><br><span class="line"><span class="keyword">let</span> π <span class="operator">=</span> <span class="number">3.14159</span></span><br><span class="line"><span class="keyword">let</span> 你好 <span class="operator">=</span> <span class="string">&quot;你好世界&quot;</span></span><br><span class="line"><span class="keyword">let</span> 🐶🐮 <span class="operator">=</span> <span class="string">&quot;dogcow&quot;</span></span><br><span class="line"><span class="keyword">let</span> dogcat <span class="operator">=</span> <span class="string">&quot;🐶🐹&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> friendlyWelcome <span class="operator">=</span> <span class="string">&quot;Hello!&quot;</span></span><br><span class="line">friendlyWelcome <span class="operator">=</span> <span class="string">&quot;Bonjour!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> languageName <span class="operator">=</span> <span class="string">&quot;Swift&quot;</span></span><br><span class="line"><span class="comment">//languageName = &quot;Swift++&quot;</span></span><br><span class="line"><span class="comment">// 这会报编译时错误 - languageName 不可改变</span></span><br><span class="line"><span class="built_in">print</span>(friendlyWelcome)</span><br><span class="line"><span class="built_in">print</span>(languageName)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;friendlyWelcome is <span class="subst">\(friendlyWelcome)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(<span class="number">3</span>)</span> times 2.5 is <span class="subst">\(Double(<span class="number">5</span>) <span class="operator">*</span> <span class="number">2.5</span>)</span>&quot;</span> <span class="comment">//字符串插值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;friendlyWelcome is <span class="subst">\(message)</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;friendlyWelcome is <span class="subst">\(friendlyWelcome)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//分号-与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：</span></span><br><span class="line"><span class="keyword">let</span> cat <span class="operator">=</span> <span class="string">&quot;🐱&quot;</span>; <span class="built_in">print</span>(cat)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meaningOfLife <span class="operator">=</span> <span class="number">42</span></span><br><span class="line"><span class="keyword">let</span> meaningOfLife2 <span class="operator">=</span> <span class="number">42.000</span></span><br><span class="line"><span class="built_in">type</span>(of: meaningOfLife) <span class="comment">//int类型</span></span><br><span class="line"><span class="built_in">type</span>(of: meaningOfLife2)   <span class="comment">//double类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#MARK:- 整数和浮点数转换</span></span><br><span class="line"><span class="keyword">let</span> three <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> pointOneFourOneFiveNine <span class="operator">=</span> <span class="number">0.14159</span></span><br><span class="line"><span class="keyword">let</span> pi <span class="operator">=</span> <span class="type">Double</span>(three) <span class="operator">+</span> pointOneFourOneFiveNine</span><br><span class="line"><span class="comment">//pi 等于 3.14159，所以被推测为 Double 类型</span></span><br><span class="line"><span class="keyword">let</span> integerPi <span class="operator">=</span> <span class="type">Int</span>(pi)</span><br><span class="line"><span class="keyword">let</span> floatPi <span class="operator">=</span> <span class="type">Float</span>(pi)</span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="comment">// 这个例子会编译成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//let i1 = 1</span></span><br><span class="line"><span class="comment">//if i1 &#123;</span></span><br><span class="line"><span class="comment">//    // 这个例子不会通过编译，会报错</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#MARK:- 元组</span></span><br><span class="line"><span class="keyword">let</span> http404Error <span class="operator">=</span> (<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>)</span><br><span class="line"><span class="comment">// http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (statusCode, statusMessage) <span class="operator">=</span> http404Error</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(statusCode)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// 输出 &quot;The status code is 404&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status message is <span class="subst">\(statusMessage)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// 输出 &quot;The status message is Not Found&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记：</span></span><br><span class="line"><span class="keyword">let</span> (justTheStatusCode, <span class="keyword">_</span>) <span class="operator">=</span> http404Error</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(justTheStatusCode)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// 输出 &quot;The status code is 404&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(http404Error.<span class="number">0</span>)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// 输出 &quot;The status code is 404&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status message is <span class="subst">\(http404Error.<span class="number">1</span>)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义元组的时候给单个元素命名：</span></span><br><span class="line"><span class="keyword">let</span> http200Status <span class="operator">=</span> (statusCode: <span class="number">200</span>, description: <span class="string">&quot;OK&quot;</span>,otherInfo:<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(http200Status.statusCode)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// 输出 &quot;The status code is 200&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status message is <span class="subst">\(http200Status.description)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//String-&gt;Int Int-&gt;String</span></span><br><span class="line"><span class="keyword">let</span> possibleNumber <span class="operator">=</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">let</span> convertedNumber <span class="operator">=</span> <span class="type">Int</span>(possibleNumber)</span><br><span class="line"><span class="keyword">let</span> aNumber <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> aNumberString <span class="operator">=</span> <span class="type">String</span>(aNumber);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> number <span class="operator">=</span> <span class="type">NSNumber</span>(value: aNumber)</span><br><span class="line"><span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">NumberFormatter</span>()</span><br><span class="line">formatter.minimumIntegerDigits <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> strValue3 <span class="operator">=</span> formatter.string(from: number)</span><br><span class="line"><span class="keyword">let</span> strValue4 <span class="operator">=</span> <span class="type">String</span>(format:<span class="string">&quot;%03d&quot;</span>,aNumber) <span class="comment">//保留3位整数，不足补0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#MARK:- 可选类型</span></span><br><span class="line"><span class="keyword">var</span> serverResponseCode: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">404</span></span><br><span class="line"><span class="comment">// serverResponseCode 包含一个可选的 Int 值 404</span></span><br><span class="line">serverResponseCode <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="comment">// serverResponseCode 现在不包含值</span></span><br><span class="line"><span class="comment">//nil不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</span></span><br><span class="line"><span class="keyword">var</span> surveyAnswer: <span class="type">String</span>?</span><br><span class="line"><span class="comment">//如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为 nil：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：</span></span><br><span class="line"><span class="keyword">if</span> convertedNumber <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;convertedNumber has an integer value of <span class="subst">\(convertedNumber<span class="operator">!</span>)</span>.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> possibleString: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;An optional string.&quot;</span></span><br><span class="line"><span class="keyword">let</span> forcedString: <span class="type">String</span> <span class="operator">=</span> possibleString<span class="operator">!</span> <span class="comment">// 需要感叹号来获取值</span></span><br><span class="line"><span class="keyword">let</span> assumedString: <span class="type">String</span>! <span class="operator">=</span> <span class="string">&quot;An implicitly unwrapped optional string.&quot;</span></span><br><span class="line"><span class="keyword">let</span> implicitString: <span class="type">String</span> <span class="operator">=</span> assumedString  <span class="comment">// 不需要感叹号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选类型表示允许常量或者变量没有值，即nil，可选类型用？表明</span></span><br><span class="line"><span class="keyword">var</span> d: <span class="type">String</span>?    <span class="comment">// 可选变量，会自动将其值设置为nil</span></span><br><span class="line"><span class="keyword">var</span> e: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">404</span> <span class="comment">// 可选变量，这样可以把nil赋值给该变量</span></span><br><span class="line"><span class="built_in">print</span>(d <span class="operator">??</span> <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(e<span class="operator">!</span>)  <span class="comment">// 需要!来获取值</span></span><br><span class="line"><span class="comment">// 隐式解析可选类型，用!声明，表明强制要求该变量一定有值。一个隐式解析可选类型其实就是一个普通的可选类型，只是可以被当作非可选类型来使用，如果该变量没有值，那么去获取的时候就会报错</span></span><br><span class="line"><span class="keyword">let</span> f: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f <span class="keyword">as</span> <span class="keyword">Any</span>)    <span class="comment">// 不需要!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单快速实现UIProgressView进度条圆角</title>
      <link href="/2016/03/24/%E7%AE%80%E5%8D%95%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0UIProgressView%E8%BF%9B%E5%BA%A6%E6%9D%A1%E5%9C%86%E8%A7%92/"/>
      <url>/2016/03/24/%E7%AE%80%E5%8D%95%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0UIProgressView%E8%BF%9B%E5%BA%A6%E6%9D%A1%E5%9C%86%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<p>关键方法：</p><ol><li>利用贝塞尔生成圆角图片</li><li>圆角不变形拉伸拉伸图片<code>resizableImageWithCapInsets</code><br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/24/FgyebQmfb7Xz26rka6M8clFEcAbd534.png"></li></ol><p>PS：UIProgressView在iOS7，iOS8.3上会出现设置trackimage和ProgressImage无效Bug，具体解决查阅：<a href="https://github.com/huluo666/HJProgressView">HJProgressView</a></p><p>代码如下</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIProgressView</span> (<span class="title">Radius</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRadiusTrackColor:(<span class="built_in">UIColor</span> *)trackColor ;</span><br><span class="line">- (<span class="type">void</span>)setRadiusProgressColor:(<span class="built_in">UIColor</span> *)progressColor;</span><br><span class="line">- (<span class="type">void</span>)setRadiusTrackColor:(<span class="built_in">UIColor</span> *)trackColor</span><br><span class="line">              progressColor:(<span class="built_in">UIColor</span> *)progressColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;UIProgressView+Radius.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIProgressView</span> (<span class="title">Radius</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRadiusTrackColor:(<span class="built_in">UIColor</span> *)trackColor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *trackImage = [<span class="keyword">self</span> imageWithColor:trackColor cornerRadius:<span class="keyword">self</span>.frame.size.height/<span class="number">2.0</span>];</span><br><span class="line">    [<span class="keyword">self</span> setTrackImage:trackImage];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRadiusProgressColor:(<span class="built_in">UIColor</span> *)progressColor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *progressImage = [<span class="keyword">self</span> imageWithColor:progressColor cornerRadius:<span class="keyword">self</span>.frame.size.height/<span class="number">2.0</span>];</span><br><span class="line">    [<span class="keyword">self</span> setProgressImage:progressImage];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRadiusTrackColor:(<span class="built_in">UIColor</span> *)trackColor</span><br><span class="line">              progressColor:(<span class="built_in">UIColor</span> *)progressColor</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setRadiusTrackColor:trackColor];</span><br><span class="line">    [<span class="keyword">self</span> setRadiusProgressColor:progressColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小尺寸---1px</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> edgeSizeWithRadius(<span class="built_in">CGFloat</span> cornerRadius) &#123;</span><br><span class="line">    <span class="keyword">return</span> cornerRadius * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color</span><br><span class="line">               cornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> minEdgeSize = edgeSizeWithRadius(cornerRadius);</span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, minEdgeSize, minEdgeSize);</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *roundedRect = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:rect cornerRadius:cornerRadius];</span><br><span class="line">    roundedRect.lineWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(rect.size, <span class="literal">NO</span>, <span class="number">0.0</span>f);</span><br><span class="line">    [color setFill];</span><br><span class="line">    [roundedRect fill];</span><br><span class="line">    [roundedRect stroke];</span><br><span class="line">    [roundedRect addClip];</span><br><span class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="keyword">return</span> [image resizableImageWithCapInsets:<span class="built_in">UIEdgeInsetsMake</span>(cornerRadius, cornerRadius, cornerRadius, cornerRadius)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    UIProgressView *progressView=[[UIProgressView alloc]initWithProgressViewStyle:UIProgressViewStyleDefault];</span><br><span class="line">    progressView.frame=CGRectMake([UIScreen mainScreen].bounds.size.width/2-150, 50, 300, 50);</span><br><span class="line">    [self.view addSubview:progressView];</span><br><span class="line"></span><br><span class="line">    [progressView setProgress:0.68 animated:YES];</span><br><span class="line">   </span><br><span class="line">    //修改progressView高度</span><br><span class="line">    progressView.transform=CGAffineTransformMakeScale(1.0, 8.0);</span><br><span class="line">    </span><br><span class="line">    //设置进度条颜色和圆角</span><br><span class="line">    [progressView setRadiusTrackColor:RGBCOLOR(231, 233, 238) progressColor:RGBCOLOR(255, 153,0)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新建,模板,小书匠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义搜索框</title>
      <link href="/2016/03/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%90%9C%E7%B4%A2%E6%A1%86/"/>
      <url>/2016/03/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%90%9C%E7%B4%A2%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p>自定义搜索框</p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/24/FnmWAoRczLDKNE-AFMeuZP4qtby6559.png" alt="搜索框"></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomSearchBar</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以便外部修改UI</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UITextField</span>  *textField;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UITextField</span>  *bgView;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类方法，快速创建一个自定义的view</span></span><br><span class="line">+(<span class="keyword">instancetype</span>)searchBar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CustomSearchBar.m</span></span><br><span class="line"><span class="comment">//  RuntimeLearn</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by luo.h on 16/3/14.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 appledev. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&quot;CustomSearchBar.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomSearchBar</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomSearchBar</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.bgView];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.textField];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+(<span class="keyword">instancetype</span>)searchBar</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">44</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITextField</span>  *)textField &#123;</span><br><span class="line">    <span class="keyword">if</span>(_textField == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _textField = [[<span class="built_in">UITextField</span>  alloc] init];</span><br><span class="line">        _textField.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">15</span>];</span><br><span class="line">        _textField.placeholder = <span class="string">@&quot;搜索&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UIImageView</span> *searchIcon = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">        searchIcon.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;search_search_icon&quot;</span>];</span><br><span class="line">        <span class="comment">// contentMode：default is UIViewContentModeScaleToFill，要设置为UIViewContentModeCenter：使图片居中，防止图片填充整个imageView</span></span><br><span class="line">        searchIcon.contentMode = <span class="built_in">UIViewContentModeCenter</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGRect</span> frame = <span class="built_in">CGRectZero</span>;</span><br><span class="line">        frame.size = <span class="built_in">CGSizeMake</span>(<span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line">        searchIcon.frame =frame;</span><br><span class="line">        </span><br><span class="line">        _textField.leftView = searchIcon;</span><br><span class="line">        _textField.leftViewMode = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">        _textField.frame=<span class="built_in">CGRectMake</span>(<span class="number">5</span>, <span class="number">5</span>,<span class="keyword">self</span>.bounds.size.width<span class="number">-10</span>, <span class="keyword">self</span>.bounds.size.height<span class="number">-10</span>);</span><br><span class="line">        </span><br><span class="line">        _textField.backgroundColor=[<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">        _textField.layer.borderColor=RGBCOLOR(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>).CGColor;</span><br><span class="line">        _textField.layer.borderWidth=<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置圆角效果</span></span><br><span class="line">        _textField.layer.cornerRadius = (<span class="keyword">self</span>.bounds.size.height<span class="number">-10</span>)/<span class="number">2</span>;</span><br><span class="line">        _textField.layer.masksToBounds = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _textField;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span>  *)bgView &#123;</span><br><span class="line"><span class="keyword">if</span>(_bgView == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//背景视图</span></span><br><span class="line">        _bgView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="keyword">self</span>.bounds];</span><br><span class="line">        _bgView.backgroundColor =RGBCOLOR(<span class="number">225</span>, <span class="number">227</span>, <span class="number">234</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _bgView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索框 </tag>
            
            <tag> searchBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac文件解压shell命令</title>
      <link href="/2016/03/24/Mac%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8Bshell%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/03/24/Mac%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8Bshell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="一、文件解压相关格式"><a href="#一、文件解压相关格式" class="headerlink" title="一、文件解压相关格式"></a>一、文件解压相关格式</h4><p> Windows 平台-最常用的格式是 zip 和 rar，国内大多数是用 rar，国外大多数是用 zip。<br>类 Unix 平台而言-常用的格式是 tar 和 tar.gz，zip 比较少一些，rar 则几乎没有。<br>zip格式:Mac默认压缩格式，缺点:就是它的压缩率并不是很高，不如 rar及 tar.gz 等格式。</p><p><strong>ZIP</strong><br>压缩 zip 文档的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r archive_name.zip file_to_compress</span><br><span class="line">zip -r archive_name.zip directory_to_compress/</span><br></pre></td></tr></table></figure><p>解压 zip 文档的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip archive_name.zip</span><br></pre></td></tr></table></figure><p><strong>TAR</strong><br>tar 只是一种打包格式，并不对文件进行压缩，主要是为了便于文件的管理，所以打包后的文档大小一般远远大于 zip 和 tar.gz，优点:打包速度非常快，打包时 CPU 占用率低(因为不需要压缩嘛)。<br>将文件或文件夹打包为 tar 文档的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf archive_name.tar file_to_compress</span><br><span class="line">tar -cvf archive_name.tar directory_to_compress</span><br></pre></td></tr></table></figure><p>解包一个 tar 文档的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf archive_name.tar</span><br></pre></td></tr></table></figure><p><strong>TAR.GZ</strong><br>tar.gz 可以说是对于 tar 的一个补充，它会对文件进行压缩，且压缩率略优于 zip，而对于 CPU 的占用率却不怎么高。Linux 平台下的大多数开源软件或源代码都是采用这种格式。<br>将文件或文件夹打包压缩为 tar.gz 文档的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf archive_name.tar.gz file_to_compress</span><br><span class="line">tar -zcvf archive_name.tar.gz directory_to_compress</span><br></pre></td></tr></table></figure><p>解压一个 tar.gz 文档的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf archive_name.tar.gz</span><br></pre></td></tr></table></figure><p><strong>TAR.BZ2</strong><br>相比以上几种格式，tar.gz2 拥有最高的压缩率，但是压缩的时候所需要的时间也最长，CPU 占用率也最高。将文件或文件夹压缩为 tar.bz2 的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf archive_name.tar.bz2 file_to_compress</span><br><span class="line">tar -jcvf archive_name.tar.bz2 directory_to_compress</span><br></pre></td></tr></table></figure><p>解压一个 tar.bz2 文件的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jxvf archive_name.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>Com From</strong>：<a href="https://libuchao.com/2013/04/21/linux-zip-tar-tar-gz-tar-bz2">https://libuchao.com/2013/04/21/linux-zip-tar-tar-gz-tar-bz2</a></p><h4 id="tar命令详解"><a href="#tar命令详解" class="headerlink" title="tar命令详解"></a>tar命令详解</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c: 建立压缩档案</span><br><span class="line">-x：解压</span><br><span class="line">-t：查看内容</span><br><span class="line">-r：向压缩归档文件末尾追加文件</span><br><span class="line">-u：更新原压缩包中的文件</span><br></pre></td></tr></table></figure><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。<br>下面的参数是根据需要在压缩或解压档案时可选的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-z：有gzip属性的,表明创建zip压缩文件，后面的后缀一定要是tar.gz</span><br><span class="line">-j：有bz2属性的</span><br><span class="line">-Z：有compress属性的</span><br><span class="line">-v：显示所有过程</span><br><span class="line">-O：将文件解开到标准输出</span><br><span class="line">参数-f是必须的</span><br><span class="line">-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</span><br></pre></td></tr></table></figure><p><strong>查看</strong><br>tar -tf aaa.tar.gz   在不解压的情况下查看压缩包的内容</p><p><strong>压缩</strong><br><code>tar –cvf jpg.tar *.jpg</code> &#x2F;&#x2F;将目录里所有jpg文件打包成tar.jpg<br><code>tar –czf jpg.tar.gz *.jpg</code> &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar –cjf jpg.tar.bz2 *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar –cZf jpg.tar.Z *.jpg   &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p><p><strong>二、gzip压缩文件的生成</strong><br><code>tar -zcvf &lt;压缩文件名&gt;.tar.gz &lt;要压缩的文件夹或者文件名&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-z表明创建zip压缩文件，后面的后缀一定要是tar.gz</span><br><span class="line">-c创建打包文件</span><br><span class="line">-v显示压缩过程</span><br><span class="line">-f归档名</span><br></pre></td></tr></table></figure><p>文件分卷压缩<br><code>split -b &lt;分卷大小&gt; &lt;要拆分的文件名&gt; &lt;分卷名前缀&gt;</code><br><code>split -b 900k test.tar.gz splt.tar.gz.</code></p><p>将建立的test.tar.gz 拆分为数个大小不超过900k的文件<br>注意后面的 split.tar.gz. 以”.”结尾的，这样拆分的文件就得到 split.tar.gz.aa split.tar.gz.ab….否则得到的是 xaa, xab, xac这样的文件<br>如果先建立一个压缩文件，再进行拆分的话，虽然可行，但是多少有些不方便。现在用 “ | “通道将两个命令一同执行<br><code>tar -zcvf - User_Guide.pdf  | split -b 900k - splt.tar.gz.</code><br>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、压缩</span><br><span class="line">tar -zcf creatName.tar.gz living.jpg(单个文件)</span><br><span class="line">tar –zcf creatName.tar.gz *.jpg (通配所有jpg文件)</span><br><span class="line">2、分卷</span><br><span class="line">split -b 900k creatName.tar.gz  splt.tar.gz.</span><br><span class="line">生成名字splt.tar.gz.aa，splt.tar.gz.ab</span><br><span class="line">3、解压</span><br><span class="line">cat splt.tar.gz.a* | tar -jx</span><br></pre></td></tr></table></figure><p>压缩framework</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -cjf creatName.tar.bz2 *.framework</span><br><span class="line">split -b 1500k creatName.tar.bz2  a.tx.libs.tar.bz2.</span><br><span class="line">cat a.tx.libs.tar.bz2.a* | tar -jx</span><br><span class="line">tar -jcvf - *.jpg  | split -b 100k - a.tx.libs.tar.bz2.</span><br><span class="line">tar -jcvf - libs  | split -b 10000k - a.tx.libs.tar.bz2.</span><br></pre></td></tr></table></figure><p>分卷压缩文件的合并<br>十分简单，用cat命令合并文件（cat也可用于文本文件的合并），用通配符指定要合并的文件即可<br>接上例。生成了 splt.tar.gz.aa ~~~~ splt.tar.gz.ad 共四个文件，同样将终端定位到桌面目录下复制内容到剪贴板代码:<code>cat split.tar.gz.a*&gt;new.tar.gz</code>执行后即可看到桌面多出一个new.tar.gz 的压缩文件<br>类似3.当中提到的，这条合并命令一样可以用 | 在一条命令内实现“合并+解压”的任务。复制内容到剪贴板代码:<code>cat split.tar.gz.a* | tar -zxv</code>注意这里两步执行的时候同样用到了类似上面的缓存操作，所以并不需要指定合并后的压缩文件的具体名称，后面的tar命令也不需要加上-f参数指定名称了。<br>转自：<a href="http://mac.pcbeta.com/thread-112623-1-1.html">http://mac.pcbeta.com/thread-112623-1-1.html</a><br>示例<br>使用 zip 命令压缩文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip - largefile | split -b 500k</span><br></pre></td></tr></table></figure><p>将文件 <em>largefile</em> 压缩成 zip 包并分卷成不超过 500k 的文件，分解后文件名默认是 <code>x*</code> ，后缀为 2 位 <code>a-z</code> 字母，如 aa、ab。<br>要合并已分解的文件，可使用cat命令恢复成 <em>zip</em> 文件后使用 <code>unzip</code> 或其它主流解压软件解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat x* &gt; file.zip</span><br></pre></td></tr></table></figure><p>tar 命令压缩文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czvf - largefile | split -b 500k</span><br></pre></td></tr></table></figure><p>使用 <code>tar</code> 解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat x* | tar xzvf -</span><br></pre></td></tr></table></figure><p><strong>相关压缩文件解压命令</strong></p><table><thead><tr><th>压缩文件格式</th><th>解压命令</th></tr></thead><tbody><tr><td>*.tar</td><td>tar –xvf</td></tr><tr><td>*.gz</td><td>gzip -d或者gunzip</td></tr><tr><td>.tar.gz和.tgz</td><td>tar –xzf</td></tr><tr><td>*.bz2</td><td>bzip2 -d或者用bunzip2</td></tr><tr><td>*.tar.bz2</td><td>tar –xjf</td></tr><tr><td>*.Z</td><td>uncompress</td></tr><tr><td>*.tar.Z</td><td>tar –xZf</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单封装新浪提示框</title>
      <link href="/2016/03/23/%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E6%96%B0%E6%B5%AA%E6%8F%90%E7%A4%BA%E6%A1%86/"/>
      <url>/2016/03/23/%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E6%96%B0%E6%B5%AA%E6%8F%90%E7%A4%BA%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h3 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h3><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/18/FgwYS2XmPX6sFXJY3nIvXtFWvLB7596.gif"></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  HJStatusBarHUD.h</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by luo.h on 16/3/11.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 appledev. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HJStatusBarHUD</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span> * text;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UILabel</span>  *textLabel;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类方法创建HUD</span></span><br><span class="line">+(<span class="keyword">instancetype</span>)statusBarHUD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示提示文本信息</span></span><br><span class="line">+(<span class="type">void</span>)showTips:(<span class="built_in">UIViewController</span> *)controller withText:(<span class="built_in">NSString</span> *)text;</span><br><span class="line">+(<span class="type">void</span>)showHUB:(HJStatusBarHUD *)StatusBarHUD Duration:(<span class="built_in">NSTimeInterval</span>)duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  HJStatusBarHUD.m</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by luo.h on 16/3/11.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 appledev. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&quot;HJStatusBarHUD.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_HEIGHT 44.0f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HJStatusBarHUD</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// Set default values for properties</span></span><br><span class="line">        <span class="keyword">self</span>.contentMode = <span class="built_in">UIViewContentModeCenter</span>;</span><br><span class="line">        <span class="keyword">self</span>.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleTopMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleBottomMargin</span></span><br><span class="line">| <span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleRightMargin</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Transparent background</span></span><br><span class="line">        <span class="keyword">self</span>.opaque = <span class="literal">NO</span>;</span><br><span class="line">        <span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.textLabel];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)text</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _textLabel.text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setText:(<span class="built_in">NSString</span> *)text</span><br><span class="line">&#123;</span><br><span class="line">    _textLabel.text = text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UILabel</span> *)textLabel &#123;</span><br><span class="line">    <span class="keyword">if</span>(_textLabel == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="built_in">UILabel</span>  *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.bounds.size.width,<span class="keyword">self</span>.bounds.size.height)];</span><br><span class="line">        label.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">        label.adjustsFontSizeToFitWidth = <span class="literal">YES</span>;</span><br><span class="line">        label.textColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">        _textLabel =label;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _textLabel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    _textLabel=<span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+(<span class="keyword">instancetype</span>)statusBarHUD</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, DEFAULT_HEIGHT)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+(<span class="type">void</span>)showTips:(<span class="built_in">UIViewController</span> *)controller withText:(<span class="built_in">NSString</span> *)text  Duration:(<span class="built_in">NSTimeInterval</span>)duration;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> frame=<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, controller.view.bounds.size.width,DEFAULT_HEIGHT);</span><br><span class="line">    HJStatusBarHUD * HUD=[HJStatusBarHUD statusBarHUD];</span><br><span class="line">    <span class="keyword">if</span>([controller.parentViewController isKindOfClass:[<span class="built_in">UINavigationController</span> <span class="keyword">class</span>]] &amp;&amp; !controller.navigationController.navigationBar.isHidden)&#123;</span><br><span class="line">        frame.origin.y = controller.navigationController.navigationBar.height+<span class="number">20</span>-DEFAULT_HEIGHT;</span><br><span class="line">        HUD.frame=frame;</span><br><span class="line">        <span class="comment">// 5.添加到导航控制器的view</span></span><br><span class="line">        [controller.navigationController.view insertSubview:HUD belowSubview:controller.navigationController.navigationBar];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        frame.origin.y = <span class="number">20</span>-DEFAULT_HEIGHT;</span><br><span class="line">        HUD.frame=frame;</span><br><span class="line">        [controller.view addSubview:HUD];</span><br><span class="line">    &#125;</span><br><span class="line">    HUD.text = text;</span><br><span class="line">    HUD.backgroundColor=[<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">    [HJStatusBarHUD showHUB:HUD Duration:duration];<span class="comment">//显示提示框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+(<span class="type">void</span>)showTips:(<span class="built_in">UIViewController</span> *)controller withText:(<span class="built_in">NSString</span> *)text;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> showTips:controller withText:text Duration:<span class="number">0.75</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+(<span class="type">void</span>)showHUB:(HJStatusBarHUD *)StatusBarHUD Duration:(<span class="built_in">NSTimeInterval</span>)duration</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration animations:^&#123;</span><br><span class="line">        <span class="comment">// 往下移动一个hub的高度</span></span><br><span class="line">        StatusBarHUD.transform = <span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>, StatusBarHUD.height);</span><br><span class="line">    &#125; completion:^(<span class="type">BOOL</span> finished) &#123; <span class="comment">// 向下移动完毕</span></span><br><span class="line">        <span class="built_in">CGFloat</span> delay = <span class="number">1.0</span>;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:duration delay:delay options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span> animations:^&#123;</span><br><span class="line">            <span class="comment">// 恢复到原来的位置</span></span><br><span class="line">            StatusBarHUD.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">        &#125; completion:^(<span class="type">BOOL</span> finished) &#123;</span><br><span class="line">            <span class="comment">// 删除控件</span></span><br><span class="line">            [StatusBarHUD removeFromSuperview];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义View </tag>
            
            <tag> HUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime常用方法</title>
      <link href="/2016/03/23/Runtime%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2016/03/23/Runtime%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>新建NSObject Category<br>如<code>#import &quot;NSObject+Propertys.h&quot;</code></p><h3 id="1-获取对象的所有属性"><a href="#1-获取对象的所有属性" class="headerlink" title="1.获取对象的所有属性"></a>1.获取对象的所有属性</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取对象的所有属性 */</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getAllProperties</span><br><span class="line">&#123;</span><br><span class="line">    Class subclass = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">    <span class="keyword">if</span> (subclass == [<span class="built_in">NSObject</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get the list of properties</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> propertyCount;</span><br><span class="line">    <span class="comment">//如果没有属性，则propertyCount为0，properties为nil</span></span><br><span class="line">    objc_property_t *properties = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>],</span><br><span class="line">                                                         &amp;propertyCount);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *result = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; propertyCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        <span class="comment">// 获取属性名称</span></span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span> *propertyName = property_getName(property);</span><br><span class="line">        <span class="built_in">NSString</span> *key = @(propertyName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Add to array</span></span><br><span class="line">        [result addObject:key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意，这里properties是一个数组指针，是C的语法，</span></span><br><span class="line">    <span class="comment">// 我们需要使用free函数来释放内存，否则会造成内存泄露</span></span><br><span class="line">    free(properties);</span><br><span class="line">    <span class="keyword">return</span> result.count ? [result <span class="keyword">copy</span>] : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取对象的所有属性和属性值"><a href="#2-获取对象的所有属性和属性值" class="headerlink" title="2.获取对象的所有属性和属性值"></a>2.获取对象的所有属性和属性值</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取对象的所有属性和属性值 */</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)getAllPropertiesAndVaules</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    Class currentClass = [self class];</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *propertyDic = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="comment">//属性个数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> outCount;</span><br><span class="line">    <span class="comment">//属性数组</span></span><br><span class="line">    objc_property_t *property = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//循环取出属性并存在字典中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</span><br><span class="line">        objc_property_t property_t = property[i];</span><br><span class="line">        <span class="comment">//获得属性的名称</span></span><br><span class="line">        <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithCString:property_getName(property_t) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="comment">//从对象中获得指定属性名的属性值</span></span><br><span class="line">        <span class="type">id</span> propertyValue = [<span class="keyword">self</span> valueForKey:propertyName];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//属性值不为空时，就封装进字典中</span></span><br><span class="line">        <span class="keyword">if</span> (propertyValue &amp;&amp; propertyValue != <span class="literal">nil</span>) &#123;</span><br><span class="line">            [propertyDic setObject:propertyValue forKey:propertyName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放掉属性数组</span></span><br><span class="line">    free(property);</span><br><span class="line">    <span class="keyword">return</span> propertyDic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取对象的所有方法"><a href="#3-获取对象的所有方法" class="headerlink" title="3.获取对象的所有方法"></a>3.获取对象的所有方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取对象的所有方法 */</span></span><br><span class="line">-(<span class="type">void</span>)getAllMethods</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> mothCout_f =<span class="number">0</span>;</span><br><span class="line">    Method* mothList_f = class_copyMethodList([<span class="keyword">self</span> <span class="keyword">class</span>],&amp;mothCout_f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mothCout_f;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Method temp_f = mothList_f[i];</span><br><span class="line">        <span class="comment">//        IMP imp_f = method_getImplementation(temp_f);</span></span><br><span class="line">        <span class="comment">//        SEL name_f = method_getName(temp_f);</span></span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span>* name_s =sel_getName(method_getName(temp_f));</span><br><span class="line">        <span class="type">int</span> arguments = method_getNumberOfArguments(temp_f);</span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span>* encoding =method_getTypeEncoding(temp_f);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;方法名：%@,参数个数：%d,编码方式：%@&quot;</span>,[<span class="built_in">NSString</span> stringWithUTF8String:name_s], arguments,              [<span class="built_in">NSString</span> stringWithUTF8String:encoding]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    free(mothList_f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">NSDictionary</span> *)getAllPropertyNameAndAttributes&#123;</span><br><span class="line">    u_int count;</span><br><span class="line">    <span class="comment">//获取到的类的属性列表</span></span><br><span class="line">    objc_property_t *properties  = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *propertyNameArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *propertyAttributesArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        <span class="comment">//拿到属性名字</span></span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span> *propertyName =property_getName(property);</span><br><span class="line">        <span class="comment">//属性的是属性的特性（weak,readonly等等）</span></span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span> *propertyAttributes = property_getAttributes(property);</span><br><span class="line">        </span><br><span class="line">        [propertyNameArray addObject: [<span class="built_in">NSString</span> stringWithUTF8String: propertyName]];</span><br><span class="line">        [propertyAttributesArray addObject:[<span class="built_in">NSString</span> stringWithUTF8String: propertyAttributes]];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">NSDictionary</span> *propertiesDictionary = [<span class="built_in">NSDictionary</span> dictionaryWithObjects:propertyAttributesArray forKeys:propertyNameArray];</span><br><span class="line">     free(properties);</span><br><span class="line">    <span class="keyword">return</span> propertiesDictionary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark---- 以下内容适用于成员变量 ivars</span></span><br><span class="line">-(<span class="built_in">NSArray</span> *)allMemberVariables &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Ivar *ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *result = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        Ivar variable = ivars[i];</span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span> *name = ivar_getName(variable);</span><br><span class="line">        <span class="built_in">NSString</span> *varName = [<span class="built_in">NSString</span> stringWithUTF8String:name];</span><br><span class="line">        </span><br><span class="line">        [result addObject:varName];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    <span class="keyword">return</span> result.count ? [result <span class="keyword">copy</span>] : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)protocols &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> outCount;</span><br><span class="line">    Protocol * <span class="keyword">const</span> *protocols = class_copyProtocolList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *result = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> adoptedCount;</span><br><span class="line">        Protocol * <span class="keyword">const</span> *adotedProtocols = protocol_copyProtocolList(protocols[i], &amp;adoptedCount);</span><br><span class="line">        <span class="built_in">NSString</span> *protocolName = [<span class="built_in">NSString</span> stringWithCString:protocol_getName(protocols[i]) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSMutableArray</span> *adoptedProtocolNames = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; adoptedCount; idx++) &#123;</span><br><span class="line">            [adoptedProtocolNames addObject:[<span class="built_in">NSString</span> stringWithCString:protocol_getName(adotedProtocols[idx]) encoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSString</span> *protocolDescription = protocolName;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (adoptedProtocolNames.count) &#123;</span><br><span class="line">            protocolDescription = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ &lt;%@&gt;&quot;</span>, protocolName, [adoptedProtocolNames componentsJoinedByString:<span class="string">@&quot;, &quot;</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        [result addObject:protocolDescription];</span><br><span class="line">        <span class="comment">//free(adotedProtocols);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//free((__bridge void *)(*protocols));</span></span><br><span class="line">    <span class="keyword">return</span> result.count ? [result <span class="keyword">copy</span>] : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Runtime,模板,小书匠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 学习</title>
      <link href="/2016/03/18/shell%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/2016/03/18/shell%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>shell程序设计</p><p><a href="http://opus.konghy.cn/shell-tutorial/index.html">http://opus.konghy.cn/shell-tutorial/index.html</a></p><p><code>#!/bin/sh</code></p><p>shell编程是以”#”为注释，但对<code>&quot;#!/bin/sh&quot;</code>却不是。</p><p><code>&quot;#!/bin/sh&quot;</code>是对shell的声明，说明你所用的是那种类型的shell及其路径所在。</p><p>#!&#x2F;bin&#x2F;sh 是指此脚本使用&#x2F;bin&#x2F;sh来解释执行，#!是特殊的表示符，其后面根的是此解释此脚本的shell的路径。</p><p><code>“#!”</code>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。</p><p>C是编译型语言，而shell是解释型语言。</p><p><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md">https://github.com/qinjx/30min_guides/blob/master/shell.md</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cd ~</span><br><span class="line">mkdir shell_tut</span><br><span class="line">cd shell_tut</span><br><span class="line"></span><br><span class="line">for ((i=0; i&lt;10; i++)); do</span><br><span class="line">    touch test_$i.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h3><ul><li>第1行：指定脚本解释器，这里是用&#x2F;bin&#x2F;sh做解释器的</li><li>第2行：切换到当前用户的home目录</li><li>第3行：创建一个目录shell_tut</li><li>第4行：切换到shell_tut目录</li><li>第5行：循环条件，一共循环10次</li><li>第6行：创建一个test_1…10.txt文件</li><li>第7行：循环体结束</li></ul><p><strong>流程判断语句if&#x2F;if else&#x2F;if else-if else</strong></p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2</span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>写成一行用分号隔开（适用于终端命令提示符）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if `ps -ef | grep ssh`;  then echo hello; fi</span><br></pre></td></tr></table></figure><p>末尾的fi就是if倒过来拼写</p><h3 id="for-while"><a href="#for-while" class="headerlink" title="for while"></a>for while</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="C风格的for"><a href="#C风格的for" class="headerlink" title="C风格的for"></a>C风格的for</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (( EXP1; EXP2; EXP3 ))</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (( ; ; ))</span><br></pre></td></tr></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">case &quot;$&#123;opt&#125;&quot; in</span><br><span class="line">    &quot;Install-Puppet-Server&quot; )</span><br><span class="line">        install_master $1</span><br><span class="line">        exit</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    &quot;Install-Puppet-Client&quot; )</span><br><span class="line">        install_client $1</span><br><span class="line">        exit</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    &quot;Config-Puppet-Server&quot; )</span><br><span class="line">        config_puppet_master</span><br><span class="line">        exit</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    &quot;Config-Puppet-Client&quot; )</span><br><span class="line">        config_puppet_client</span><br><span class="line">        exit</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    &quot;Exit&quot; )</span><br><span class="line">        exit</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    * ) echo &quot;Bad option, please choose again&quot;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/bin/sh  test.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/bin/php test.php</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Permission denied</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh <span class="comment">#使脚本具有执行权限 OR chmod 755 test.sh</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">./test.sh <span class="comment">#执行脚本</span></span></span><br></pre></td></tr></table></figure><p>关于 <code>man</code> 命令</p><p>相当于帮助命令，如输入<code>man ls</code>即可进入使用指南页面。</p><p><strong>常用命令文件夹操作命令</strong></p><table><thead><tr><th>目录参数</th><th>功能描述</th><th align="left">事例</th></tr></thead><tbody><tr><td>.</td><td>表示当前目录</td><td align="left">cd .  ls</td></tr><tr><td>..</td><td>表示当前目录的上一级目录</td><td align="left">open .</td></tr><tr><td>&#x2F;</td><td>根目录&#x2F;目录分隔符</td><td align="left">cd &#x2F;</td></tr><tr><td>.&#x2F;</td><td>当前目录</td><td align="left"></td></tr><tr><td>..&#x2F;</td><td>回到上一级目录</td><td align="left">cd ..&#x2F;..&#x3D;cd ..&#x2F;+ ..</td></tr><tr><td>~</td><td>当前登陆用户目录</td><td align="left"></td></tr></tbody></table><p>相对路径&#x2F;绝对路径 凡是以&#x2F;开始的路径，都是绝对路径</p><table><thead><tr><th>命令</th><th>功能描述</th><th></th></tr></thead><tbody><tr><td>pwd</td><td>显示当前目录的绝对路径</td><td></td></tr><tr><td>ls</td><td>列出当前目录的内容</td><td></td></tr><tr><td>cd</td><td>切换工作目录</td><td>cd &#x2F;Users&#x2F;myhome&#x2F;</td></tr><tr><td>open</td><td>打开当前目录</td><td></td></tr></tbody></table><h3 id="处理特殊字符"><a href="#处理特殊字符" class="headerlink" title="处理特殊字符"></a>处理特殊字符</h3><p>如果目录中有特殊字符（空格，括号，引号，<code>[]</code>，<code>!</code>，<code>$</code>，<code>&amp;</code>，<code>*</code>，<code>;</code>，<code>|</code>，<code>\</code>），那么直接输入空格会造成系统识别困难，必须使用特殊的语法来表示这些字符。例如上例中，空格前添加反斜杠“<code>\</code>”（back slash）即可：<code>cd Punlic/Drop\ Box/</code>。除了反斜杠，也可以用引号的方法：<code>cd &quot;Public/Drop Box&quot;。</code></p><p><strong>shell命令ifconfig</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">显示: ifconfig [设备名] 如 ifconfig en0</span><br><span class="line">显示过滤: ifconfig [设备名] |grep [string] 如 ifconfig en0 |grep ether</span><br><span class="line">配置ip: ifconfig [设备名] [ip] netmask [netmask]</span><br><span class="line">配置硬件ID: ifconfig en0 hw ether [硬件地址]</span><br><span class="line">启用或禁用设备 ifconfig en0 [up/down]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig | grep <span class="string">&quot;inet&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><table><thead><tr><th align="left">命令名</th><th align="left">功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td align="left">mkdir</td><td align="left">创建一个目录</td><td>mkdir dirname</td></tr><tr><td align="left">rmdir</td><td align="left">删除一个目录</td><td>rmdir dirname</td></tr><tr><td align="left">mvdir</td><td align="left">移动或重命名一个目录</td><td>mvdir dir1 dir2</td></tr><tr><td align="left">cd</td><td align="left">改变当前目录</td><td>cd dirname</td></tr><tr><td align="left">pwd</td><td align="left">显示当前目录的路径名</td><td>pwd</td></tr><tr><td align="left">ls</td><td align="left">显示当前目录的内容</td><td>ls -la <strong>-w 显示中文，-l 详细信息， -a 包括隐藏文件</strong></td></tr><tr><td align="left">dircmp</td><td align="left">比较两个目录的内容</td><td>dircmp dir1 dir2</td></tr></tbody></table><p>用terminal启动相应程序打开文件的方法</p><p> <code>open (-a) [program][filename]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">open  -a Typora  README.md</span></span><br></pre></td></tr></table></figure><p><strong>通配符</strong></p><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>?</td><td>匹配一个任意字符</td></tr><tr><td>*</td><td>匹配0个或任意多个任意字符，也就是可以匹配任何内容</td></tr><tr><td>[ ]</td><td>匹配中括号中任意一个字符，例如：[abc]代表一个字符，或者a,或者b，或者c</td></tr><tr><td>[-]</td><td>匹配中括号中任意一个字符，代表一个范围。例如：[a-z]代表匹配一个小写字母</td></tr><tr><td>[^]</td><td>逻辑非，表示匹配不是中括号内的一个字符，例如：[^0-9]代表匹配一个不是数字的字符</td></tr></tbody></table><p>shell权限修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 aa.sh</span><br><span class="line">chmod -x aa.sh</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/cpp/shell/">http://c.biancheng.net/cpp/shell/</a> C语言中文网<br><a href="http://www.iosxxx.com/blog/2015-12-25-mac-shellru-men.html#u53C2_u8003_u76EE_u5F55">Mac shell入门</a><br><a href="http://www.jianshu.com/p/3291de46f3ff">Mac 终端命令大全</a><br><a href="http://www.weiosx.com/show-12-142-1.html">Mac OS X 终端常用命令大全</a><br><a href="http://www.iosxxx.com/blog/2015-12-25-mac-shellru-men.html#u53C2_u8003_u76EE_u5F55">SHELL中的循环语句总结(FOR, WHILE, UNTIL）</a><br><a href="http://www.renfei.org/blog/mac-os-x-terminal-101.html">Mac OS X Terminal 101：终端使用初级教程</a><br><a href="http://metman.info/blog/2014/11/05/bashjiao-ben-huo-qu-zi-shen-lu-jing-fang-fa/">Bash脚本获取自身路径方法</a><br><a href="http://aotu.io/mac/docs/">MAC全栈开发环境搭建指南</a><br><a href="http://www.jeffjade.com/2016/03/03/2016-03-02-how-to-use-atom/">新编码神器Atom使用纪要</a><br><a href="http://w3cshow.com/2015/05/23/mac-terminal-md/">http://w3cshow.com/2015/05/23/mac-terminal-md/</a><br><a href="http://www.jianshu.com/p/161a77e580b7">使用shell脚本批量修改文件后缀名</a><br><a href="http://www.jellythink.com/archives/699">Linux Shell简明教程（一）</a><br><a href="http://www.runoob.com/linux/linux-shell.html">http://www.runoob.com/linux/linux-shell.html</a></p><p>Shell参数解析脚本传参方法总结</p><p><a href="http://www.jianshu.com/p/ff85119d2630">http://www.jianshu.com/p/ff85119d2630</a><br><a href="https://www.jianshu.com/p/d3cd36c97abc">https://www.jianshu.com/p/d3cd36c97abc</a><br><a href="http://www.zmonster.me/2014/08/09/pare-arguments-in-shell-function.html">http://www.zmonster.me/2014/08/09/pare-arguments-in-shell-function.html</a></p><p>shell脚本中echo显示内容带颜色的实现方法</p><p><a href="http://www.jianshu.com/p/ba1b8aded634">http://www.jianshu.com/p/ba1b8aded634</a><br><a href="http://huangshanben.com/articles/3031/">http://huangshanben.com/articles/3031/</a></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift学习-UITableView的简单使用</title>
      <link href="/2016/03/15/Swift%E5%AD%A6%E4%B9%A0-UITableView%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/03/15/Swift%E5%AD%A6%E4%B9%A0-UITableView%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>swift学习，tableView的不同写法，使用懒加载方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.swift</span></span><br><span class="line"><span class="comment">//  Created by luo.h on 16/10/11.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 apple. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">//Swift 宏定义</span></span><br><span class="line"><span class="keyword">let</span> kScreenHeight <span class="operator">=</span> <span class="type">UIScreen</span>.mainScreen().bounds.size.height</span><br><span class="line"><span class="keyword">let</span> kScreenWidth <span class="operator">=</span> <span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line"><span class="keyword">let</span> kCellIdentifier <span class="operator">=</span> <span class="string">&quot;CellIdentifier&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_ inherited__">UIViewController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(tableView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写法二</span></span><br><span class="line">        view.addSubview(tableView1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: UI懒加载--lazyLoad</span></span><br><span class="line">    <span class="comment">// ----------------------------------------</span></span><br><span class="line">    <span class="comment">// 写法二- tableView lazy 加载</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> tableView : <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> temptableView <span class="operator">=</span> <span class="type">UITableView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>,kScreenWidth, kScreenHeight<span class="operator">/</span><span class="number">2</span><span class="operator">-</span><span class="number">10</span>), style: <span class="type">UITableViewStyle</span>.<span class="type">Grouped</span>)</span><br><span class="line">        temptableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        temptableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> temptableView</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------- 写法二--------------------------</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> tableView1: <span class="type">UITableView</span>! <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>,kScreenHeight<span class="regexp">/2,kScreenWidth, kScreenHeight/</span><span class="number">2</span><span class="operator">-</span><span class="number">10</span>), style: <span class="type">UITableViewStyle</span>.<span class="type">Grouped</span>)</span><br><span class="line">        tableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.registerClass(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier:kCellIdentifier)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据源 lazy 加载</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> dataList:[<span class="type">String</span>] <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;iOS001&quot;</span>,<span class="string">&quot;iOS002&quot;</span>,<span class="string">&quot;iOS003&quot;</span>,<span class="string">&quot;iOS007&quot;</span>];</span><br><span class="line"></span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK:-- UITableView Delegate</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewController</span> : <span class="title class_ inherited__">UITableViewDelegate</span>,<span class="title class_ inherited__">UITableViewDataSource</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataList.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAtIndexPath</span> <span class="params">indexPath</span>: <span class="type">NSIndexPath</span>) -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tableView <span class="operator">==</span> <span class="keyword">self</span>.tableView &#123;</span><br><span class="line">            <span class="comment">//写法-</span></span><br><span class="line">            <span class="keyword">let</span> identifier <span class="operator">=</span> <span class="string">&quot;CellIdentifier&quot;</span></span><br><span class="line">            <span class="keyword">var</span> cell <span class="operator">=</span> tableView.dequeueReusableCellWithIdentifier(identifier)</span><br><span class="line">            <span class="keyword">if</span> cell <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                cell <span class="operator">=</span> <span class="type">UITableViewCell</span>(style: .<span class="type">Default</span>, reuseIdentifier: identifier)</span><br><span class="line">            &#125;</span><br><span class="line">            cell<span class="operator">?</span>.textLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;tableView*显示行数<span class="subst">\(indexPath.row)</span>-<span class="subst">\(dataList[indexPath.row])</span>&quot;</span></span><br><span class="line">            <span class="keyword">return</span> cell<span class="operator">!</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写法二</span></span><br><span class="line">            <span class="keyword">let</span> cell2 <span class="operator">=</span> tableView.dequeueReusableCellWithIdentifier(kCellIdentifier, forIndexPath: indexPath)</span><br><span class="line">            cell2.textLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;tableView1*显示行数-<span class="subst">\(dataList[indexPath.row])</span>&quot;</span></span><br><span class="line">            <span class="keyword">return</span> cell2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OC写法</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UITableView</span> *tableView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *dataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - life cycle</span></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.tableView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - UITableViewDataSource</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataSource.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier];</span><br><span class="line">    cell.textLabel.text = <span class="keyword">self</span>.dataSource[indexPath.row];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - UITableViewDelegate</span></span><br><span class="line">- (<span class="type">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    [tableView deselectRowAtIndexPath:indexPath animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - getters and setters</span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> kCellIdentifier = <span class="string">@&quot;kCellIdentifier&quot;</span>;</span><br><span class="line">- (<span class="built_in">UITableView</span> *)tableView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_tableView == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _tableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">20</span>, <span class="keyword">self</span>.view.bounds.size.width, <span class="keyword">self</span>.view.bounds.size.height) style:<span class="built_in">UITableViewStylePlain</span>];</span><br><span class="line">        _tableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">        _tableView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">        [_tableView registerClass:[<span class="built_in">UITableViewCell</span> <span class="keyword">class</span>] forCellReuseIdentifier:kCellIdentifier];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _tableView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)dataSource</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_dataSource == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _dataSource = @[<span class="string">@&quot;First controller&quot;</span>, <span class="string">@&quot;Second controller&quot;</span>, <span class="string">@&quot;Third controller&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS单例模式</title>
      <link href="/2016/03/12/%E5%8D%95%E4%BE%8B%E5%86%99%E6%B3%95%C2%A0/"/>
      <url>/2016/03/12/%E5%8D%95%E4%BE%8B%E5%86%99%E6%B3%95%C2%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>单例模式（Singleton）作用</strong>：</p><ul><li>可以保证的程序运行过程，一个类只有一个示例,并提供一个访问它的全局访问点方便外界访问</li><li>控制了实例个数，并节约系统资源。</li></ul><p>​    单例写法有好几种，通常的写法是基于线程安全的写法，保证单例对象只会被创建一次，为单例对象创建一个静态实例，可以写成全局的，也可以在类方法中实现，并置为nil。</p><h5 id="简要步骤"><a href="#简要步骤" class="headerlink" title="简要步骤"></a>简要步骤</h5><ul><li>1、先定义一个静态的instance.</li><li>2、定一个sharedInstance的类方法.能够被全局调用的.此方法里需要考虑线程安全问题</li><li>3、如果需要copy,需要遵守NSCopying协议,以及在copyWithZone中,直接返回self;</li></ul><p>创建一个继承继承自NSObject的类AccountManager</p><p><code>AccountManager.h</code>文件</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AccountManager.h</span></span><br><span class="line"><span class="comment">//  Copyright © 2018年 hl.com.cn. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AccountManager</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**快速创建单例的类方法*/</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>AccountManager.m</code>文件（简洁版，不考虑<code>alloc</code>,<code>copy</code>方式创建单例）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AccountManager.m</span></span><br><span class="line"><span class="comment">//  Copyright © 2018年 hl.com.cn. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&quot;AccountManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AccountManager</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为单例对象创建的静态实例，因为对象的唯一性，必须是static类型</span></span><br><span class="line"><span class="keyword">static</span> AccountManager *_sharedInstance = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark---创建单例(普通，同步锁，GCD三种方式)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最简单的单例(不建议使用)</span></span><br><span class="line"><span class="comment"> * 缺点：没有考虑多线程并发问题（非线程安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance1&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_sharedInstance) &#123;</span><br><span class="line">        _sharedInstance = [[<span class="keyword">self</span> alloc]init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *同步锁版本</span></span><br><span class="line"><span class="comment"> *优点：线程安全</span></span><br><span class="line"><span class="comment"> *缺点：每次运行代码前都要获取锁，效率较GCD慢</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance&#123;</span><br><span class="line">    <span class="comment">//考虑多线程并发问题, 所以加个@synchronized同步锁</span></span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_sharedInstance) &#123;</span><br><span class="line">            _sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *GCD版本（线程安全）--🍎推荐</span></span><br><span class="line"><span class="comment"> *优点：1、线程安全 2、无需担心加锁或同步</span></span><br><span class="line"><span class="comment"> *缺点：暂无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;<span class="comment">/*这个拿到函数体外,成为全局的,用于访问销毁单例*/</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance2 &#123;</span><br><span class="line">    <span class="comment">//dispatch_once保证线程安全</span></span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark---销毁单例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步锁版本:销毁单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+(<span class="type">void</span>)attemptDealloc&#123;</span><br><span class="line">    _sharedInstance = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GCD版本:销毁单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+(<span class="type">void</span>)attempDealloc&#123;</span><br><span class="line">     onceToken = <span class="number">0</span>; <span class="comment">// 只有置成0,GCD才会认为它从未执行过.它默认为0.这样才能保证下次再次调用shareInstance的时候,再次创建对象.</span></span><br><span class="line">    _sharedInstance = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就是一个完整的单例,保证怎么创建都是唯一的.</p><p>测试单例</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    AccountManager *obj1 = [AccountManager sharedInstance] ;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;obj1 = %@&quot;</span>, obj1) ;</span><br><span class="line"></span><br><span class="line">    AccountManager *obj2 = [AccountManager sharedInstance] ;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;obj2 = %@&quot;</span>, obj2) ;</span><br><span class="line"></span><br><span class="line">    AccountManager *obj3 = [[AccountManager alloc] init] ;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;obj3 = %@&quot;</span>, obj3) ;</span><br><span class="line"></span><br><span class="line">    AccountManager* obj4 = [[AccountManager alloc] init] ;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;obj4 = %@&quot;</span>, [obj4 <span class="keyword">copy</span>]) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2016-03-12 14:30:52.078030+0800 SingletonDemo[3438:763080] obj1 = &lt;AccountManager: 0x60400001dfb0&gt;</span><br><span class="line">2016-03-12 14:30:52.078208+0800 SingletonDemo[3438:763080] obj2 = &lt;AccountManager: 0x60400001dfb0&gt;</span><br><span class="line">2016-03-12 14:30:52.078340+0800 SingletonDemo[3438:763080] obj3 = &lt;AccountManager: 0x60000001e230&gt;</span><br><span class="line">2016-03-12 14:30:52.078340+0800 SingletonDemo[3438:763080] obj4 直接Crash</span><br></pre></td></tr></table></figure><p>​以上创建单例方式基本可以了，通过<code>alloc</code>，<code>copy</code>方式创建单例本身就是一种非规范写法，但为了提高容错率，我们还是处理下<code>alloc</code>，<code>copy</code>方式创建单例。</p><p>升级版</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AccountManager.m</span></span><br><span class="line"><span class="comment">//  Copyright © 2018年 hl.com.cn. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&quot;AccountManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AccountManager</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为单例对象创建的静态实例，因为对象的唯一性，必须是static类型</span></span><br><span class="line"><span class="keyword">static</span> AccountManager *_sharedInstance = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最简单的单例</span></span><br><span class="line"><span class="comment"> * 缺点：没有考虑多线程并发问题（非线程安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance1&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_sharedInstance) &#123;</span><br><span class="line">        _sharedInstance = [[<span class="keyword">self</span> alloc]init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *同步锁版本</span></span><br><span class="line"><span class="comment"> *优点：线程安全</span></span><br><span class="line"><span class="comment"> *缺点：每次运行代码前都要获取锁，效率较GCD慢</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance&#123;</span><br><span class="line">    <span class="comment">//考虑多线程并发问题, 所以加个@synchronized同步锁</span></span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_sharedInstance) &#123;</span><br><span class="line">            _sharedInstance = [[<span class="variable language_">super</span> allocWithZone:<span class="literal">NULL</span>] init];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *GCD版本（线程安全）--🍎推荐</span></span><br><span class="line"><span class="comment"> *优点：1、线程安全 2、无需担心加锁或同步</span></span><br><span class="line"><span class="comment"> *缺点：暂无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;<span class="comment">/*这个拿到函数体外,成为全局的,用于访问销毁单例*/</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance2 &#123;</span><br><span class="line">    <span class="comment">//dispatch_once保证线程安全</span></span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark---销毁单例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 同步锁版本:销毁单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+(<span class="type">void</span>)attemptDealloc1&#123;</span><br><span class="line">    _sharedInstance = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> GCD版本:销毁单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+(<span class="type">void</span>)attempDealloc2&#123;</span><br><span class="line">     onceToken = <span class="number">0</span>; <span class="comment">// 只有置成0,GCD才会认为它从未执行过.它默认为0.这样才能保证下次再次调用shareInstance的时候,再次创建对象.</span></span><br><span class="line">    _sharedInstance = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark---完善alloc，copy方式创建的单例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *创建对象的步骤分为申请内存(alloc)-&gt;初始化(init)这两个步骤，我们要确保对象的唯一性，因此在第一步这个阶段我们就要拦截它。当我们调用alloc方法时，OC内部会调用allocWithZone这个方法来申请内存，我们重写这个方法，然后在这个方法中调用shareInstance方法返回单例对象，这样就可以达到我们的目的。拷贝对象也是同样的原理，重写copyWithZone方法，然后在这个方法中调用shareInstance方法返回单例对象。</span></span><br><span class="line"><span class="comment"> * 重写allocWithZone方法，保证alloc或者init创建的实例不会产生新实例，因为该类覆盖了allocWithZone方法，所以只能通过其父类分配内存，即[super allocWithZone]</span></span><br><span class="line"><span class="comment"> *    AccountManager *account= [AccountManager alloc]init];</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sharedInstance];<span class="comment">// 直接调用单例的创建方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  NSCopying协议,重写copyWithZone方法，保证copy不会产生新实例，</span></span><br><span class="line"><span class="comment"> *   保证copy时相同 防止AccountManager *account= [AccountManager copy];方式出现Crash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="type">id</span>)copyWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sharedInstance];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写copy方法</span></span><br><span class="line">- (<span class="type">id</span>)<span class="keyword">copy</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写 mutableCopy 方法</span></span><br><span class="line">- (<span class="type">id</span>)mutableCopy &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>测试打印信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2016-03-12 14:53:17.572240+0800 SingletonDemo[3995:849854] obj1 = &lt;AccountManager: 0x600000007850&gt;</span><br><span class="line">2016-03-12 14:53:17.572624+0800 SingletonDemo[3995:849854] obj2 = &lt;AccountManager: 0x600000007850&gt;</span><br><span class="line">2016-03-12 14:53:17.572768+0800 SingletonDemo[3995:849854] obj3 = &lt;AccountManager: 0x600000007850&gt;</span><br><span class="line">2016-03-12 14:53:17.572909+0800 SingletonDemo[3995:849854] obj4 = &lt;AccountManager: 0x600000007850&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>runtime之方法交换</title>
      <link href="/2016/03/09/Runtime%E4%B9%8B%E6%96%B9%E6%B3%95%E4%BA%A4%E6%8D%A2/"/>
      <url>/2016/03/09/Runtime%E4%B9%8B%E6%96%B9%E6%B3%95%E4%BA%A4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>利用runtime熟悉项目架构<br>团队项目比较多，有时需要接手别的项目，跳转流程是怎样的，需要修改的控制器叫什么名字。。？这些都不知道，肿么办。。。<br>下面利用Runtime方法交换原理，可以方便的打印你所进入的控制器，方便调试。</p><span id="more"></span><h2 id="原理简介："><a href="#原理简介：" class="headerlink" title="原理简介："></a>原理简介：</h2><p>方法交换，顾名思义，就是将两个方法的实现交换。例如：将A方法和B方法交换，调用A方法的时候，就会执行B方法中的代码，反之亦然。<br> 1.SEL – 表示该方法的名称又名选择器；<br> 2.types – 表示该方法参数的类型；<br> 3.IMP – 指向该方法的具体实现的函数指针，也就是就是实现方法。<br>参考：<a href="http://nshipster.com/method-swizzling/">http://nshipster.com/method-swizzling/</a></p><h2 id="新建Category文件"><a href="#新建Category文件" class="headerlink" title="新建Category文件"></a>新建Category文件</h2><p><code>UIViewController+SwizzleMethods.h</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  UIViewController+SwizzleMethods.h</span></span><br><span class="line"><span class="comment">//  RuntimeLearn</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by luo.h on 16/3/3.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 appledev. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span> (<span class="title">SwizzleMethods</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>UIViewController+SwizzleMethods.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UIViewController+SwizzleMethods.m</span></span><br><span class="line"><span class="comment">//  RuntimeLearn</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by luo.h on 16/3/3.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 appledev. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&quot;UIViewController+SwizzleMethods.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Swizzle</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//load方法会在类第一次加载的时候被调用 相关：http://blog.leichunfeng.com/blog/2015/05/02/objectivec-plus-load-vs-plus-initialize/</span></span><br><span class="line"><span class="comment">//调用的时间比较靠前，适合在这个方法里做方法交换</span></span><br><span class="line"><span class="comment">//注意：不要在+initialize中交换</span></span><br><span class="line"><span class="comment">//+initialize是类第一次初始化时才会被调用，因为这个类有可能一直都没有使用到，因此这个类可能永远不会被调用。</span></span><br><span class="line">+ (<span class="type">void</span>)load&#123;</span><br><span class="line">    <span class="comment">//方法交换应该被保证，在程序中只会执行一次</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">         <span class="comment">//方法交换</span></span><br><span class="line">        SwizzlingMethods([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(viewWillAppear:), <span class="keyword">@selector</span>(swiz_viewWillAppear:));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 方法交换*/</span></span><br><span class="line"><span class="type">void</span> SwizzlingMethods(Class cls, SEL systemSel, SEL newSel)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//两个方法的Method</span></span><br><span class="line">    Method systemMethod = class_getInstanceMethod(cls, systemSel);</span><br><span class="line">    Method newMethod = class_getInstanceMethod(cls, newSel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先动态添加方法，实现是被交换的方法，返回值表示添加成功还是失败</span></span><br><span class="line">    <span class="type">BOOL</span> isAddMethod = class_addMethod(cls,systemSel,</span><br><span class="line">                                       method_getImplementation(newMethod),</span><br><span class="line">                                       method_getTypeEncoding(newMethod));</span><br><span class="line">    <span class="keyword">if</span>(isAddMethod)&#123;</span><br><span class="line">        <span class="comment">//如果成功，说明类中不存在这个方法的实现</span></span><br><span class="line">        <span class="comment">//将被交换方法的实现替换到这个并不存在的实现</span></span><br><span class="line">        class_replaceMethod(cls, newSel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//否则，交换两个方法的实现(改变两个方法的具体指针指向)</span></span><br><span class="line">        method_exchangeImplementations(systemMethod, newMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)swiz_viewWillAppear:(<span class="type">BOOL</span>)animated&#123;</span><br><span class="line">    <span class="comment">//看起来像是死循环，但是其实自己的实现已经被替换了</span></span><br><span class="line">    <span class="comment">//防止UINavigationController 或 UIInputWindowController调用次数变多</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) isEqualToString:<span class="string">@&quot;UINavigationController&quot;</span>] || [<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) isEqualToString:<span class="string">@&quot;UIInputWindowController&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> swiz_viewWillAppear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;✅VC-&gt;%@&quot;</span>,[<span class="keyword">self</span> <span class="keyword">class</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> runtime,小书匠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FMDB使用与SQL语句</title>
      <link href="/2016/03/01/FMDB%E4%BD%BF%E7%94%A8%E4%B8%8ESQL%E8%AF%AD%E5%8F%A5/"/>
      <url>/2016/03/01/FMDB%E4%BD%BF%E7%94%A8%E4%B8%8ESQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/143c83362909">http://www.jianshu.com/p/143c83362909</a>   </p><p><a href="http://www.jianshu.com/p/e2dbd69b6db2">数据库第三方框架FMDB详细讲解</a></p><p>需要模仿QQ类似的分页加载。就是一句话</p><p><code>select * from table order by sendTime ASC Limit itemSize Offset offset</code></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos鼠标监控</title>
      <link href="/2016/02/27/Cocoa%E9%BC%A0%E6%A0%87%E7%9B%91%E6%8E%A7/"/>
      <url>/2016/02/27/Cocoa%E9%BC%A0%E6%A0%87%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/6325558/cocoa-screen-not-refreshing-after-cgeventpost-mouse-click">https://stackoverflow.com/questions/6325558/cocoa-screen-not-refreshing-after-cgeventpost-mouse-click</a><br><a href="https://stackoverflow.com/questions/7212483/how-do-i-get-the-mouse-position-on-click-when-it-is-outside-of-the-component">https://stackoverflow.com/questions/7212483/how-do-i-get-the-mouse-position-on-click-when-it-is-outside-of-the-component</a><br><a href="https://www.keakon.net/2011/11/10/%E7%9B%91%E5%90%ACMacOSX%E7%9A%84%E5%85%A8%E5%B1%80%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6">https://www.keakon.net/2011/11/10/%E7%9B%91%E5%90%ACMacOSX%E7%9A%84%E5%85%A8%E5%B1%80%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS清除代码警告</title>
      <link href="/2016/02/24/iOS%E6%B8%85%E9%99%A4%E4%BB%A3%E7%A0%81%E8%AD%A6%E5%91%8A/"/>
      <url>/2016/02/24/iOS%E6%B8%85%E9%99%A4%E4%BB%A3%E7%A0%81%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>项目中存在很多黄色感叹号时，首先视觉上就觉得不舒服，并且有些警告可能产生Bug。当有些警告不想看到黄色感叹号时，可以采取一些特殊的手段强制消除警告！</p><span id="more"></span><h3 id="一、去警告基本语法"><a href="#一、去警告基本语法" class="headerlink" title="一、去警告基本语法"></a>一、去警告基本语法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic ignored <span class="string">&quot;警告名称&quot;</span></span></span><br><span class="line"><span class="comment">//被夹在这中间的代码针对于此警告都会无视并且不显示出来</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br></pre></td></tr></table></figure><p><strong>这段代码的基本流程:</strong></p><ol><li>push 当前警告入栈</li><li>忽略我们要消除的警告</li><li>执行会产生警告的代码</li><li>pop 警告出栈——恢复之前的状态</li></ol><p> 例如：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic ignored <span class="string">&quot;-Wdeprecated-declarations&quot;</span></span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">@&quot;contentText&quot;</span> sizeWithFont:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14</span>] constrainedToSize:<span class="built_in">CGSizeMake</span>(<span class="number">320</span>, <span class="built_in">CGFLOAT_MAX</span>) lineBreakMode:<span class="number">0</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br></pre></td></tr></table></figure><h3 id="二、常见编译警告类型"><a href="#二、常见编译警告类型" class="headerlink" title="二、常见编译警告类型"></a>二、常见编译警告类型</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-Wincompatible-pointer-types    指针类型不匹配</span><br><span class="line">-Wincomplete-implementation     没有实现已声明的方法</span><br><span class="line">-Wprotocol                      没有实现协议的方法</span><br><span class="line">-Wimplicit-function-declaration 尚未声明的函数(通常指c函数)</span><br><span class="line">-Warc-performSelector-leaks     使用performSelector可能会出现泄漏(该警告在xcode4<span class="number">.3</span><span class="number">.1</span>中没出现过,网上流传说<span class="number">4.2</span>使用performselector:withObject: 就会得到该警告)</span><br><span class="line">-Wdeprecated-declarations       使用了不推荐使用的方法(如[<span class="built_in">UILabel</span> setFont:(<span class="built_in">UIFont</span>*)])</span><br><span class="line">-Wunused-variable               含有没有被使用的变量</span><br><span class="line">-Wundeclared-selector           未定义selector方法</span><br></pre></td></tr></table></figure><p>阅读更多<br>警告类型大全：<a href="http://fuckingclangwarnings.com/">http://fuckingclangwarnings.com/</a></p><h3 id="三、去警告宏定义"><a href="#三、去警告宏定义" class="headerlink" title="三、去警告宏定义"></a>三、去警告宏定义</h3><p>如果需要忽略的警告有很多，可以定义一个宏，简化使用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//忽略PerformSelector警告</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUPPRESS_PerformSelectorLeak_WARNING(Stuff) \</span></span><br><span class="line"><span class="meta">do &#123; \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic push&quot;</span>) \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic ignored \&quot;-Warc-performSelector-leaks\&quot;&quot;</span>) \</span></span><br><span class="line"><span class="meta">Stuff; \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic pop&quot;</span>) \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略未定义方法警告</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  SUPPRESS_Undeclaredselector_WARNING(Stuff) \</span></span><br><span class="line"><span class="meta">do &#123; \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic push&quot;</span>) \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic ignored \&quot;-Wundeclared-selector\&quot;&quot;</span>) \</span></span><br><span class="line"><span class="meta">Stuff; \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic pop&quot;</span>) \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略过期API警告</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUPPRESS_DEPRECATED_WARNING(Stuff) \</span></span><br><span class="line"><span class="meta">do &#123; \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic push&quot;</span>) \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic ignored \&quot;-Wdeprecated-declarations\&quot;&quot;</span>) \</span></span><br><span class="line"><span class="meta">Stuff; \</span></span><br><span class="line"><span class="meta">_Pragma(<span class="string">&quot;clang diagnostic pop&quot;</span>) \</span></span><br><span class="line"><span class="meta">&#125; while (0</span></span><br></pre></td></tr></table></figure><h3 id="四、获取警告类型"><a href="#四、获取警告类型" class="headerlink" title="四、获取警告类型"></a>四、获取警告类型</h3><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/findwarning.png" alt="警告"><br>  -W    是前缀,表示打开这种类型的警告，默认开启<br>  -Wno- 关闭某种类型的警告<br>关闭警告如：<code>-Wno-unused-variable</code>、<code>-Wno-shorten-64-to-32</code></p><h3 id="五、关闭工程中指定类型的警告"><a href="#五、关闭工程中指定类型的警告" class="headerlink" title="五、关闭工程中指定类型的警告"></a>五、关闭工程中指定类型的警告</h3><p>1、屏蔽项目指定文件指定类型警告<br><code>-Wno-unused-variable</code><br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/01/FoS6FJiNkETzlbFkUp0NHPkQm2PY908.png" alt="屏蔽指定文件警告"><br>全部类型<code>-w</code></p><p>2、屏蔽工程指定类型警告<br>Taget- buld Setting -other warning Flags -Wno-unused-variable<br><img src="http://7xr7vj.com1.z0.glb.clouddn.com/2016/03/01/FmNscVylZviDEH2QfAsVRhy86DA7298.png" alt="屏蔽工程指定类型警告"></p><p>重新编译,文件中的指定类型警告全部消失了!!!!</p><h3 id="六、屏蔽cocoapod引入的第三方警告"><a href="#六、屏蔽cocoapod引入的第三方警告" class="headerlink" title="六、屏蔽cocoapod引入的第三方警告"></a>六、屏蔽cocoapod引入的第三方警告</h3><p>对于我们使用cocoapod引入的第三方,我们可以在podfile文件中增加一句<code>inhibit_all_warnings!</code> 来屏蔽pod的工程的任何警告。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># platform :ios, &#x27;8.0&#x27;</span></span><br><span class="line"># Uncomment <span class="variable language_">this</span> line <span class="keyword">if</span> you<span class="string">&#x27;re using Swift</span></span><br><span class="line"><span class="string"># use_frameworks!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">inhibit_all_warnings!</span></span><br><span class="line"><span class="string">target &#x27;</span>RuntimeLearn<span class="string">&#x27; do</span></span><br><span class="line"><span class="string">pod &#x27;</span><span class="built_in">UITextView</span>+Placeholder<span class="string">&#x27;, &#x27;</span>~&gt; <span class="number">1.1</span><span class="number">.1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">pod &#x27;</span>MJRefresh<span class="string">&#x27;, &#x27;</span>~&gt; <span class="number">3.1</span><span class="number">.0</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">#也可以单独设置打开编译警告就好了</span></span><br><span class="line"><span class="string">pod &#x27;</span>Alamofire<span class="string">&#x27;, &#x27;</span>~&gt; <span class="number">3.0</span><span class="number">.0</span>-beta<span class="number">.3</span><span class="string">&#x27;, :inhibit_warnings =&gt; true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure><h3 id="七、工程常见警告"><a href="#七、工程常见警告" class="headerlink" title="七、工程常见警告"></a>七、工程常见警告</h3><ol><li>苹果app支持arm64以后会有一个问题：NSInteger变成64位了，和原来的int （%d）不匹配，会报如下warning:<br><code>Values of type &#39;NSInteger&#39; should not be used as format arguments;</code><br><code>add an explicit cast to &#39;long&#39; instead</code></li></ol><p>解决办法：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、系统推荐方法               [<span class="built_in">NSString</span> stringWithFormat:@“%ld<span class="string">&quot;, (long)number];</span></span><br><span class="line"><span class="string">2、类型强制                  [NSString stringWithFormat:@&quot;</span>%d<span class="string">&quot;, (int)number];</span></span><br><span class="line"><span class="string">3、使用NSNumber类型          [NSString stringWithFormat:@“%@&quot;</span>, @(number)];</span><br><span class="line"><span class="number">4</span>、对应数字是一个size_t的值    [<span class="built_in">NSString</span> stringWithFormat:@“%zd<span class="string">&quot;,number];</span></span><br></pre></td></tr></table></figure><p>建议使用第4种方式。<br><code>use %zd for signed, %tu for unsigned, and %tx for hex.</code><br>关于格式化规范:<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html">String Format Specifiers。</a><br><a href="http://stackoverflow.com/questions/18893880/alternatives-to-type-casting-when-formatting-nsuinteger-on-32-and-64-bit-archi?rq=1">Stackoverflow</a></p><pre><code>PS：切记，警告屏蔽只针对于无关紧要的警告，有些警告是代码编写本身有误，可能引起Bug，需要及时修复。屏蔽掉无关紧要的Bug可以让我们快速找到需要修复的警告，让工程更整洁，让App更稳定。</code></pre><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://nshipster.cn/clang-diagnostics/">http://nshipster.cn/clang-diagnostics/</a><br><a href="http://oleb.net/blog/2013/04/compiler-warnings-for-objectivec-developers/">http://oleb.net/blog/2013/04/compiler-warnings-for-objectivec-developers/</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 警告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 多环境配置 Build Configuration</title>
      <link href="/2016/02/19/iOS%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%A4%87%E5%BF%98/"/>
      <url>/2016/02/19/iOS%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<p>添加多个blocks替代UITextView delegate方法，没有子类，也允许使用delegate方法如果没有设置Block</p><span id="more"></span><p><strong>UITextView</strong><br>添加多个blocks替代UITextView delegate方法，没有子类，也允许使用delegate方法如果没有设置Block<br><a href="https://github.com/yichizhang/UITextView-Blocks">https://github.com/yichizhang/UITextView-Blocks</a></p><p>使用手势改变字体大小<br><a href="https://github.com/yichizhang/UITextView-Blocks">https://github.com/yichizhang/UITextView-Blocks</a></p><p>为UITextView添加Placeholder<br><a href="https://github.com/devxoul/UITextView-Placeholder">https://github.com/devxoul/UITextView-Placeholder</a></p><p>为UITextView添加编辑事件<br><a href="https://github.com/andrewsardone/UITextView-UIControl">https://github.com/andrewsardone/UITextView-UIControl</a></p><p>UITextView with support of auto growing, placeholder and length limit. <a href="https://github.com/KennethTsang/GrowingTextView">https://github.com/KennethTsang/GrowingTextView</a><br>RSKGrowingTextView</p><p>APExpandingTextView （swift）文本自增长<br><a href="https://github.com/aadeshp/APExpandingTextView">https://github.com/aadeshp/APExpandingTextView</a></p><p>BIZExpandedTextView 文本自增长<br><a href="https://github.com/bizibizi/BIZExpandedTextView">https://github.com/bizibizi/BIZExpandedTextView</a></p><p>A lightweight UITextView subclass that is growing and shrinking in size<br><a href="https://github.com/ziryanov/CCGrowingTextView">https://github.com/ziryanov/CCGrowingTextView</a><br><a href="https://github.com/cloverstudio/CSGrowingTextView">https://github.com/cloverstudio/CSGrowingTextView</a></p><p><strong>UITextField</strong><br><a href="https://github.com/haaakon/UITextField-Blocks">https://github.com/haaakon/UITextField-Blocks</a><br><a href="https://github.com/RuiAAPeres/UITextField-DelegationBlocks">https://github.com/RuiAAPeres/UITextField-DelegationBlocks</a><br><a href="https://github.com/andreamazz/UITextField-Shake">https://github.com/andreamazz/UITextField-Shake</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题安装</title>
      <link href="/2016/02/02/hexo%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/"/>
      <url>/2016/02/02/hexo%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>首先将hexo主题先克隆到自己电脑上：</p><p>进入hexo 安装目录，也就是初始化的目录（hexo init githexo）中的githexo目录，详细目录请根据自己定义的目录名字为主，</p><ul><li><code>cd huluo666.github.io</code>    站点文件目录</li><li><code>git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</code>。</li></ul><p>克隆完毕<code>themes</code>目录会出现<code>maupassant</code>主题目录</p><ul><li><strong>接下来一定要输入下面的命令，来安装这个主题的依赖环境。</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-sass --save</span><br><span class="line">npm install hexo-renderer-jade --save</span><br></pre></td></tr></table></figure><p>由于墙等不定因素可能导致安装错误</p><p>可以先安装cnpm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后使用cnpm安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cnpm install hexo-renderer-jade --save</span><br><span class="line">sudo cnpm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><p><a href="http://yijiebuyi.com/blog/b12eac891cdc5f0dff127ae18dc386d4.html">给电脑换源 npm 国内镜像 cnpm</a></p><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>接下来我们只需要将站点下的<code>_config.yml</code>配置文件中找到<code>theme：xxx</code>行主题配置更换成<code>theme：maupassant</code></p><p>其实这样主题就配好了，其它的图标之类的可以根据需要修改即可。</p><p>**然后输入<code>hexo s</code> 或者 <code>hexo server</code> 就可以查看更换后的主题效果了</p><p><a href="http://localhost:4000/">http://localhost:4000/</a></p><p>文章头部样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: ChangedBlogThemes</span><br><span class="line">toc: true   // 文章侧边增加文章目录</span><br><span class="line">date: 2016-11-23 21:16:14</span><br><span class="line">tags: Themes</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>将npm 的镜像换成了阿里的 然后重新按照步骤执行了一下 就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --registry=http://registry.npm.taobao.org --sass-binary-site=http://npm.taobao.org/mirrors/node-sass</span><br></pre></td></tr></table></figure><h3 id="Maupassant主题安装"><a href="#Maupassant主题安装" class="headerlink" title="Maupassant主题安装"></a>Maupassant主题安装</h3><p>主题地址：<a href="https://github.com/tufu9441/maupassant-hexo">https://github.com/tufu9441/maupassant-hexo</a></p><h5 id="1、安装主题和渲染器"><a href="#1、安装主题和渲染器" class="headerlink" title="1、安装主题和渲染器"></a>1、安装主题和渲染器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x27;hexo博客目录&#x27;</span><br><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line">npm install hexo-renderer-jade --save // 渲染器</span><br><span class="line">npm install hexo-renderer-sass --save</span><br><span class="line">npm install hexo-generator-feed --save // rss支持</span><br></pre></td></tr></table></figure><h5 id="2、设置hexo主题"><a href="#2、设置hexo主题" class="headerlink" title="2、设置hexo主题"></a>2、设置hexo主题</h5><p>编辑hexo的_config.yml，设置主题名和语言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span>: maupassant   # 渲染主题名</span><br><span class="line"><span class="attr">language</span>: zh-<span class="variable constant_">CN</span> # 默认英文</span><br></pre></td></tr></table></figure><h5 id="3、搜索"><a href="#3、搜索" class="headerlink" title="3、搜索"></a>3、搜索</h5><p>添加站内搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save  #安装hexo搜索插件</span><br></pre></td></tr></table></figure><p>然后，编辑theme&#x2F;maupassant目录下的_config.yml，分hexo配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 添加字段</span><br><span class="line">search:</span><br><span class="line">  - path: search.xml</span><br><span class="line">  - field: post</span><br></pre></td></tr></table></figure><p>4、语法高亮</p><p>maupassant换图标教程：<a href="http://wdxtub.com/2016/03/05/maupassant-icon-config/">http://wdxtub.com/2016/03/05/maupassant-icon-config/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客搭建</title>
      <link href="/2016/02/01/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2016/02/01/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、hexo与相关环境安装"><a href="#一、hexo与相关环境安装" class="headerlink" title="一、hexo与相关环境安装"></a>一、hexo与相关环境安装</h3><p><strong>1）、安装<code>node.js</code>，<code>git</code>环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install node  #使用homebrew安装，这个Mac使用者必备吧</span><br><span class="line">brew install git   #如果安装了xcode，那么也就已经安装了git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">brew uninstall node 卸载node</span></span><br></pre></td></tr></table></figure><p>查看node安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v #输出版本信息 v6.x.x</span><br></pre></td></tr></table></figure><p><strong>2）、安装hexo</strong></p><p>hexo的安装使用最好查看[hexo官网][1]，官网很详细，因为版本升级，网上那些信息可能不准确而多走弯路</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">sudo</span> npm install hexo-cli -g <span class="comment">#全局安装Hexo客户端 3.0后</span></span></span><br></pre></td></tr></table></figure><p>升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo v                      <span class="comment">#查看版本信息，检查是否安装成功</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm update hexo-cli -g      <span class="comment">#更新hexo到最新版</span></span> </span><br></pre></td></tr></table></figure><h3 id="二、hexo初始化"><a href="#二、hexo初始化" class="headerlink" title="二、hexo初始化"></a>二、hexo初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> xxx.github.io      <span class="comment">#博客目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init  folder     <span class="comment">#folder可不填</span></span></span><br></pre></td></tr></table></figure><p>如果指定 <code>folder</code>，便会在目前的资料夹建立一个名为 <code>folder</code> 的新资料夹；否则会在目前资料夹初始化。</p><p><strong>相关依赖库安装</strong></p><p>本人发现安装 <code>hexo-cli</code>时已安装以下库，如果出现相应错误，则需要安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install  #这个命令会把需要的依赖环境都自动装上</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hexo从 3.0 开始把服务器独立成了个别模块，所以要本地调试的话，还需要安装 hexo-server 才能使用</span></span><br><span class="line">npm install hexo-deployer-git --save  #如果没hexo d 失败则安装</span><br><span class="line">npm install hexo-server --save        #如果没hexo s 失败则安装</span><br></pre></td></tr></table></figure><h3 id="三、创建新博客"><a href="#三、创建新博客" class="headerlink" title="三、创建新博客"></a><strong>三、创建新博客</strong></h3><p>在当前目录<code>xxx.github.io</code></p><p><code>hexo new &quot;Hello World&quot;</code></p><h3 id="四、生成网站-本地调试"><a href="#四、生成网站-本地调试" class="headerlink" title="四、生成网站&amp;本地调试"></a>四、生成网站&amp;本地调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    #清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">hexo generate #生成网站静态文件  可缩写为 hexo g</span><br><span class="line">hexo server   #启动服务，     可缩写为 hexo s </span><br><span class="line">hexo deploy   #部署网站 部署前，需要预先生成静态文件 可缩写为 hexo d</span><br></pre></td></tr></table></figure><p>常用组合命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d -g <span class="comment">#生成部署</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s -g <span class="comment">#生成预览</span></span></span><br></pre></td></tr></table></figure><p>本地查看调试地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>也可以指定端口如<code>hexo s -p 80</code></p><p>出现<code>Branch master set up to track remote branch master from https://github.com/xxxx.github.io.git.</code>表示部署成功</p><p>访问博客: [<a href="http://username.github.io][2]">http://username.github.io][2]</a></p><ul><li><p>Q：卸载Hexo？<br>A：3.0.0版本执行<code>$ npm uninstall hexo-cli -g</code>，之前版本执行<code>$ npm uninstall hexo -g</code>。</p><p>​</p></li></ul><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p><strong>（1）、Cannot find module</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: Cannot find module &#x27;./build/Release/DTraceProviderBindings&#x27;] code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &#x27;./build/default/DTraceProviderBindings&#x27;] code: &#x27;MODULE_NOT_FOUND&#x27; &#125;   </span><br><span class="line">&#123; [Error: Cannot find module &#x27;./build/Debug/  DTraceProviderBindings&#x27;] code: &#x27;MODULE_NOT_FOUND&#x27; &#125;   </span><br></pre></td></tr></table></figure><p>这个问题烦了好久，最终找到解决办法。<br>$ npm install hexo –no-optional</p><p><strong>（2）、部署不成功</strong></p><p><code>nothing to commit, working directory clean</code><br>解决：3步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.rm -rf .deploy</span><br><span class="line">2.hexo generater</span><br><span class="line">3.hexo deploy</span><br></pre></td></tr></table></figure><p>建议用safari浏览器打开查看</p><p><strong>（3）、修改config.xml文件</strong></p><p><code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 11, column 9:</code></p><p>检查一下是不是 冒号后面没有写空格？</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br>MAC 上 github + hexo 搭建博客教程</p><p><a href="http://www.jianshu.com/p/fd878edb95e7">http://www.jianshu.com/p/fd878edb95e7</a></p><p>Homebrew简介及安装<br><a href="http://www.cnblogs.com/lzrabbit/p/4032515.html">http://www.cnblogs.com/lzrabbit/p/4032515.html</a><br>Homebrew官网 <a href="http://brew.sh/index/_zh-cn.html">http://brew.sh/index\_zh-cn.html</a></p><p>Hexo安装和配置<br>MAC 上 github + hexo 搭建博客教程</p><p><a href="http://www.lovebxm.com/2017/05/30/buildBlog/">http://www.lovebxm.com/2017/05/30/buildBlog/</a></p><p><a href="http://www.jianshu.com/p/b7886271e21a">http://www.jianshu.com/p/b7886271e21a</a><br><a href="http://segmentfault.com/q/1010000002565189">http://segmentfault.com/q/1010000002565189</a></p><p><a href="http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/">http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/</a></p><p>[手把手教你使用Hexo + Github Pages搭建个人独立博客][3]</p><p><a href="https://dreajay.github.io/2014/11/24/hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/">https://dreajay.github.io/2014/11/24/hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</a></p><p>域名绑定</p><p>[GitHub Pages 绑定来自阿里云的域名][4]</p><p>[1]:<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br>[2]:<a href="http://username.github.io/">http://username.github.io/</a><br>[3]:<a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/">https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/</a><br>[4]:<a href="http://quantumman.me/blog/setting-up-a-domain-with-gitHub-pages.html">http://quantumman.me/blog/setting-up-a-domain-with-gitHub-pages.html</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Awesome系列</title>
      <link href="/2016/01/07/Awesome%E7%B3%BB%E5%88%97/"/>
      <url>/2016/01/07/Awesome%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="Awesome系列"><a href="#Awesome系列" class="headerlink" title="Awesome系列"></a>Awesome系列</h4><p><a href="https://github.com/aozhimin/awesome-iOS-resource">https://github.com/aozhimin/awesome-iOS-resource</a></p><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><p><a href="https://github.com/burningtree/awesome-json">https://github.com/burningtree/awesome-json</a></p><h5 id="Rest-API"><a href="#Rest-API" class="headerlink" title="Rest API"></a>Rest API</h5><p><a href="https://github.com/Kikobeats/awesome-api">https://github.com/Kikobeats/awesome-api</a></p><p><a href="https://github.com/marmelab/awesome-rest">https://github.com/marmelab/awesome-rest</a></p><p><a href="https://github.com/TonnyL/Awesome_APIs">https://github.com/TonnyL/Awesome_APIs</a></p><p><a href="https://github.com/abhishekbanthia/Public-APIs">https://github.com/abhishekbanthia/Public-APIs</a></p><h5 id="Mac工具"><a href="#Mac工具" class="headerlink" title="Mac工具"></a>Mac工具</h5><p><a href="https://github.com/jaywcjlove/awesome-mac">https://github.com/jaywcjlove/awesome-mac</a></p><p><a href="https://github.com/tanjibo/awesome-mac">https://github.com/tanjibo/awesome-mac</a></p><p><a href="https://github.com/SuJunming/mac-awesome">https://github.com/SuJunming/mac-awesome</a></p><p><a href="https://github.com/joshbuchea/awesome-macos">https://github.com/joshbuchea/awesome-macos</a></p><p><a href="https://github.com/nikitavoloboev/my-mac-os">https://github.com/nikitavoloboev/my-mac-os</a></p><p>Mac屏保</p><p><a href="https://github.com/agarrharr/awesome-macos-screensavers">https://github.com/agarrharr/awesome-macos-screensavers</a></p><h5 id="React-Native"><a href="#React-Native" class="headerlink" title="React-Native"></a>React-Native</h5><p><a href="https://github.com/crazycodeboy/react-native-awesome">https://github.com/crazycodeboy/react-native-awesome</a></p><p><a href="https://github.com/wabg/awesome-react-native">https://github.com/wabg/awesome-react-native</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新员工职业培训心得</title>
      <link href="/2015/12/26/%E6%96%B0%E5%91%98%E5%B7%A5%E8%81%8C%E4%B8%9A%E5%9F%B9%E8%AE%AD%E5%BF%83%E5%BE%97%20/"/>
      <url>/2015/12/26/%E6%96%B0%E5%91%98%E5%B7%A5%E8%81%8C%E4%B8%9A%E5%9F%B9%E8%AE%AD%E5%BF%83%E5%BE%97%20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​新员工培训后的感想体会，也是入职考评是否合格任务之一</p></blockquote><p>​       这周周末进行了2天的职业化素质培训，虽然牺牲了周末的休息时间，但收益良多。在新员工职业培训期间，我们吃住都非常的不错，下面谈谈这次培训的心得吧。</p><p>​       这2天的培训，框架合理，内容精炼丰富，本次新员工培训每组分为6个人，首先开讲的是林宛烨老师，主题是”团队组建”，团队有小有大，大如公司，小如每一个小组，一个人的力量是有限的，只有一个团队才会有无限的激情和创造力，通过林老师的精彩讲解，极大的激励了每一位组员的团队意识，在培训的日子里，每一位组员都能为团队作出自己的贡献而出谋划策。正因为如此，我们的友谊更加深厚，我们的团队凝聚力更加强大。 张颖老师的”职业化塑造”课程对于我们这些刚参加工作不久，之前也没参加过类似的职业培训的职员更加清晰的认识到自己的职业道路，对自己在未来职场上能很好的发挥好自身价值，深刻的明白职业化对我们及公司是多么的重要。张雨濛老师讲的主题”规章制度与保密意识”，介绍了公司的企业文化和公司架构，让我们对公司有了进一步的认识，也更加加深了公司的规章制度，明白”保密意识”的重要性。杨波老师的精彩主题”发展太平洋”，回顾了太平洋网络的发展历程，讲解的互联网的发展轨迹及发展趋势，让我们对互联网有较深的了解，比较了太平洋与竞争对手的区别，知道我们的优势和不足，也感觉到自己身上的一份责任，我们得更加努力，才能做的更好。</p><p>​       培训时间虽短但我们受益匪浅、这都归功于公司的合理安排。通过此次培训我对职业化有了更清楚的认识，清楚的明白职业化的标准是什么，今后也会按此标准努力，让自己越来越好。总之，此次培训对我意义非凡。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图文混排</title>
      <link href="/2015/11/06/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
      <url>/2015/11/06/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Haley-Wong/TextUtil/blob/master/TextUtil/Utils/Utility.m">https://github.com/Haley-Wong/TextUtil/blob/master/TextUtil/Utils/Utility.m</a></p><p><a href="https://github.com/LeeYouth/LYCoreLabel">https://github.com/LeeYouth/LYCoreLabel</a></p><p><a href="https://github.com/alexandreos/UILabel-Copyable">https://github.com/alexandreos/UILabel-Copyable</a></p><p><a href="http://www.jianshu.com/p/9a192bc8e644">TTTAttributedLabel链接点击</a></p><p><a href="https://github.com/XZwalk/TTTAttributeLabelView">https://github.com/XZwalk/TTTAttributeLabelView</a></p><p><a href="https://github.com/LMMIsGood/LiuqsChatWithEmotion">https://github.com/LMMIsGood/LiuqsChatWithEmotion</a></p><p><a href="https://github.com/12207480/TYAttributedLabel">https://github.com/12207480/TYAttributedLabel</a>     —star 1766</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS,动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2015/06/16/hello-world/"/>
      <url>/2015/06/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Don’t forget sudo </p><h2 id="Goto-Blog-catalog"><a href="#Goto-Blog-catalog" class="headerlink" title="Goto Blog catalog"></a>Goto Blog catalog</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/.../yourname.github.io</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p><h3 id="Markdown-工具推荐"><a href="#Markdown-工具推荐" class="headerlink" title="Markdown 工具推荐"></a>Markdown 工具推荐</h3><p><a href="http://www.pc6.com/mach/markdownxzgj/">MarkDown写作工具</a><br><a href="https://segmentfault.com/a/1190000000506986">78 款 Markdown 工具</a><br><a href="http://www.williamlong.info/archives/4319.html">好用的Markdown编辑器一览</a><br><a href="http://www.imjeff.cn/blog/90/">Markdown 在线编辑阅读器及应用收集</a></p><p><a href="https://stackedit.io/editor">Stackedit</a><br><a href="https://www.zybuluo.com/mdeditor">作业部落</a><br><a href="http://markdown.xiaoshujiang.com/">小书匠</a><br><a href="https://pandao.github.io/">MEditor</a></p><h3 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h3><p><a href="http://i.cmgine.net/archives/12291.html">10分钟学会Markdown V1.4</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
